{"SerializedFilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\obj\\Debug\\net6.0\\project.razor.vs.json","FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\Website Du lich.csproj","Configuration":{"ConfigurationName":"MVC-3.0","LanguageVersion":"6.0","Extensions":[{"ExtensionName":"MVC-3.0"}]},"ProjectWorkspaceState":{"TagHelpers":[{"HashCode":-1865342645,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxInputFileCore","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxInputFileCore\">\r\n            <summary>\r\n            Raw component extending <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\" /> with direct upload.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputFileCore"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.InputFileCoreSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputFileCoreSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"UploadUrl","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.UploadUrl\">\r\n            <summary>\r\n            URL of the server endpoint receiving the files.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"UploadUrl"}},{"Kind":"Components.Component","Name":"OnProgress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnProgress\">\r\n            <summary>\r\n            Raised during running file upload (the frequency depends on browser implementation).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadProgressEventArgs>","Common.PropertyName":"OnProgress"}},{"Kind":"Components.Component","Name":"OnFileUploaded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\">\r\n            <summary>\r\n            Raised after a file is uploaded (for every single file separately).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.FileUploadedEventArgs>","Common.PropertyName":"OnFileUploaded"}},{"Kind":"Components.Component","Name":"OnUploadCompleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnUploadCompleted\">\r\n            <summary>\r\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> events).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Common.PropertyName":"OnUploadCompleted"}},{"Kind":"Components.Component","Name":"Multiple","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Multiple\">\r\n            <summary>\r\n            Single <c>false</c> or multiple <c>true</c> files upload.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Multiple"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Enabled\">\r\n            <summary>\r\n            Make the item appear disabled by setting to <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Accept\">\r\n            <summary>\r\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\r\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Int64?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.MaxFileSize\">\r\n            <summary>\r\n            The maximum files size in bytes.\r\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\r\n            Default is <c>long.MaxValue</c> (unlimited).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int64?","Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"MaxParallelUploads","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.MaxParallelUploads\">\r\n            <summary>\r\n            Maximum number of concurrent uploads. Default is <c>6</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxParallelUploads"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Id\">\r\n            <summary>\r\n            Input element id.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxInputFileCore","Common.TypeNameIdentifier":"HxInputFileCore"}},{"HashCode":-353142795,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxInputFileCore","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxInputFileCore\">\r\n            <summary>\r\n            Raw component extending <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\" /> with direct upload.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxInputFileCore"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.InputFileCoreSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputFileCoreSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"UploadUrl","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.UploadUrl\">\r\n            <summary>\r\n            URL of the server endpoint receiving the files.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"UploadUrl"}},{"Kind":"Components.Component","Name":"OnProgress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnProgress\">\r\n            <summary>\r\n            Raised during running file upload (the frequency depends on browser implementation).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadProgressEventArgs>","Common.PropertyName":"OnProgress"}},{"Kind":"Components.Component","Name":"OnFileUploaded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\">\r\n            <summary>\r\n            Raised after a file is uploaded (for every single file separately).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.FileUploadedEventArgs>","Common.PropertyName":"OnFileUploaded"}},{"Kind":"Components.Component","Name":"OnUploadCompleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnUploadCompleted\">\r\n            <summary>\r\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> events).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Common.PropertyName":"OnUploadCompleted"}},{"Kind":"Components.Component","Name":"Multiple","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Multiple\">\r\n            <summary>\r\n            Single <c>false</c> or multiple <c>true</c> files upload.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Multiple"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Enabled\">\r\n            <summary>\r\n            Make the item appear disabled by setting to <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Accept\">\r\n            <summary>\r\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\r\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Int64?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.MaxFileSize\">\r\n            <summary>\r\n            The maximum files size in bytes.\r\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.HxInputFileCore.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\r\n            Default is <c>long.MaxValue</c> (unlimited).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int64?","Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"MaxParallelUploads","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.MaxParallelUploads\">\r\n            <summary>\r\n            Maximum number of concurrent uploads. Default is <c>6</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxParallelUploads"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxInputFileCore.Id\">\r\n            <summary>\r\n            Input element id.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxInputFileCore","Common.TypeNameIdentifier":"HxInputFileCore"}},{"HashCode":-485737206,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxFormState","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxFormState\">\r\n            <summary>\r\n            Propagates form states as a cascading parementer to child components.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxFormState\">https://havit.blazor.eu/components/HxFormState</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxFormState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.Enabled\">\r\n            <summary>\r\n            Indicated enabled/disabled section. Value to propagate.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.Visible\">\r\n            <summary>\r\n            When <c>false</c>, nothing is rendered (no children). Value is not propagated, there is no where to propagate.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxFormState","Common.TypeNameIdentifier":"HxFormState"}},{"HashCode":668691406,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxFormState","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxFormState\">\r\n            <summary>\r\n            Propagates form states as a cascading parementer to child components.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxFormState\">https://havit.blazor.eu/components/HxFormState</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxFormState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.Enabled\">\r\n            <summary>\r\n            Indicated enabled/disabled section. Value to propagate.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.Visible\">\r\n            <summary>\r\n            When <c>false</c>, nothing is rendered (no children). Value is not propagated, there is no where to propagate.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxFormState","Common.TypeNameIdentifier":"HxFormState"}},{"HashCode":1688178842,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxFormState.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxFormState"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxFormState.ChildContent","Common.TypeNameIdentifier":"HxFormState"}},{"HashCode":-257420647,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxFormState.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxFormState.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.HxFormState"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxFormState.ChildContent","Common.TypeNameIdentifier":"HxFormState"}},{"HashCode":-1334798815,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxModelEditForm`1\">\r\n            <summary>\r\n            Edit form wrapper which provides strong type model and model instance update when valid form is submitted.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxModelEditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.HxModelEditForm<TModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TModel"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Id\">\r\n            <summary>\r\n            Form element id.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Model","TypeName":"TModel","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Model\">\r\n            <summary>\r\n            Model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TModel","Components.GenericTyped":"True","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ModelChanged\">\r\n            <summary>\r\n            Model event callback. Invoked when valid form is updated.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ModelChanged"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxModelEditForm"}},{"HashCode":-1344126475,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxModelEditForm`1\">\r\n            <summary>\r\n            Edit form wrapper which provides strong type model and model instance update when valid form is submitted.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxModelEditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.HxModelEditForm<TModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TModel"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Id\">\r\n            <summary>\r\n            Form element id.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Model","TypeName":"TModel","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Model\">\r\n            <summary>\r\n            Model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TModel","Components.GenericTyped":"True","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ModelChanged\">\r\n            <summary>\r\n            Model event callback. Invoked when valid form is updated.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ModelChanged"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxModelEditForm"}},{"HashCode":-722668239,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxModelEditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent","Common.TypeNameIdentifier":"HxModelEditForm"}},{"HashCode":1278986093,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.HxModelEditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>.ChildContent","Common.TypeNameIdentifier":"HxModelEditForm"}},{"HashCode":-978037638,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxChangeTracker","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxChangeTracker\">\r\n            <summary>\r\n            Subscribes to INotifyPropertyChanged changes and triggers re-rendering of ChildContent.\r\n            To be used when you want limit a scope of re-rendering and to prevent re-rendering of a wider component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxChangeTracker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxChangeTracker.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.ComponentModel.INotifyPropertyChanged","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxChangeTracker.Value\">\r\n            <summary>\r\n            The value to be tracked.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.ComponentModel.INotifyPropertyChanged","Common.PropertyName":"Value"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxChangeTracker","Common.TypeNameIdentifier":"HxChangeTracker"}},{"HashCode":1871319295,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxChangeTracker","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxChangeTracker\">\r\n            <summary>\r\n            Subscribes to INotifyPropertyChanged changes and triggers re-rendering of ChildContent.\r\n            To be used when you want limit a scope of re-rendering and to prevent re-rendering of a wider component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxChangeTracker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxChangeTracker.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.ComponentModel.INotifyPropertyChanged","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxChangeTracker.Value\">\r\n            <summary>\r\n            The value to be tracked.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.ComponentModel.INotifyPropertyChanged","Common.PropertyName":"Value"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxChangeTracker","Common.TypeNameIdentifier":"HxChangeTracker"}},{"HashCode":1656269495,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxChangeTracker.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxChangeTracker.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxChangeTracker"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxChangeTracker.ChildContent","Common.TypeNameIdentifier":"HxChangeTracker"}},{"HashCode":1705202296,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxChangeTracker.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxChangeTracker.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.HxChangeTracker"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxChangeTracker.ChildContent","Common.TypeNameIdentifier":"HxChangeTracker"}},{"HashCode":-703431651,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxDynamicElement","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxDynamicElement\">\r\n            <summary>\r\n            Renders an element with the specified name, attributes and child-content.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxDynamicElement\">https://havit.blazor.eu/components/HxDynamicElement</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDynamicElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ElementName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.ElementName\">\r\n            <summary>\r\n            Gets or sets the name of the element to render.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ElementName"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.OnClick\">\r\n            <summary>\r\n            Raised after the element is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Deafult is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"ElementRef","TypeName":"Microsoft.AspNetCore.Components.ElementReference","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.ElementRef\">\r\n            <summary>\r\n            Element reference.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.ElementReference","Common.PropertyName":"ElementRef"}},{"Kind":"Components.Component","Name":"ElementRefChanged","TypeName":"System.Action<Microsoft.AspNetCore.Components.ElementReference>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.ElementRefChanged\">\r\n            <summary>\r\n            Action (synchronnous, not an EventCallback) called when the element's reference got captured.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Action<global::Microsoft.AspNetCore.Components.ElementReference>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"ElementRefChanged"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxDynamicElement","Common.TypeNameIdentifier":"HxDynamicElement"}},{"HashCode":950986162,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxDynamicElement","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxDynamicElement\">\r\n            <summary>\r\n            Renders an element with the specified name, attributes and child-content.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxDynamicElement\">https://havit.blazor.eu/components/HxDynamicElement</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxDynamicElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ElementName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.ElementName\">\r\n            <summary>\r\n            Gets or sets the name of the element to render.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ElementName"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.OnClick\">\r\n            <summary>\r\n            Raised after the element is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Deafult is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Deafult is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"ElementRef","TypeName":"Microsoft.AspNetCore.Components.ElementReference","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.ElementRef\">\r\n            <summary>\r\n            Element reference.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.ElementReference","Common.PropertyName":"ElementRef"}},{"Kind":"Components.Component","Name":"ElementRefChanged","TypeName":"System.Action<Microsoft.AspNetCore.Components.ElementReference>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxDynamicElement.ElementRefChanged\">\r\n            <summary>\r\n            Action (synchronnous, not an EventCallback) called when the element's reference got captured.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Action<global::Microsoft.AspNetCore.Components.ElementReference>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"ElementRefChanged"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxDynamicElement","Common.TypeNameIdentifier":"HxDynamicElement"}},{"HashCode":-2053476793,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxDynamicElement.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDynamicElement"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxDynamicElement.ChildContent","Common.TypeNameIdentifier":"HxDynamicElement"}},{"HashCode":1947862512,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxDynamicElement.ChildContent","AssemblyName":"Havit.Blazor.Components.Web","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.HxDynamicElement"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxDynamicElement.ChildContent","Common.TypeNameIdentifier":"HxDynamicElement"}},{"HashCode":1703312414,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxRedirectTo","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxRedirectTo\">\r\n            <summary>\r\n            Rendering a <c>HxRedirectTo</c> will navigate to a new location.<br />\r\n            Can be used in <c>AuthorizeRouteView</c>, <c>Router</c> and such components to process redirection to login page, error page or such.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxRedirectTo\">https://havit.blazor.eu/components/HxRedirectTo</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxRedirectTo"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Uri","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRedirectTo.Uri\">\r\n            <summary>\r\n            URI to navigate to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Uri"}},{"Kind":"Components.Component","Name":"ForceLoad","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRedirectTo.ForceLoad\">\r\n            <summary>\r\n            If <c>true</c>, bypasses client-side routing and forces the browser to load the new\r\n            page from the server, whether or not the URI would normally be handled by the\r\n            client-side router.<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ForceLoad"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxRedirectTo","Common.TypeNameIdentifier":"HxRedirectTo"}},{"HashCode":85181582,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxRedirectTo","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxRedirectTo\">\r\n            <summary>\r\n            Rendering a <c>HxRedirectTo</c> will navigate to a new location.<br />\r\n            Can be used in <c>AuthorizeRouteView</c>, <c>Router</c> and such components to process redirection to login page, error page or such.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxRedirectTo\">https://havit.blazor.eu/components/HxRedirectTo</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxRedirectTo"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Uri","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRedirectTo.Uri\">\r\n            <summary>\r\n            URI to navigate to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Uri"}},{"Kind":"Components.Component","Name":"ForceLoad","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRedirectTo.ForceLoad\">\r\n            <summary>\r\n            If <c>true</c>, bypasses client-side routing and forces the browser to load the new\r\n            page from the server, whether or not the URI would normally be handled by the\r\n            client-side router.<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ForceLoad"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxRedirectTo","Common.TypeNameIdentifier":"HxRedirectTo"}},{"HashCode":-953111397,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxRepeater`1\">\r\n            <summary>\r\n            A data-bound list component that allows custom layout by repeating a specified template for each item displayed in the list.\r\n            Analogous to ASP.NET WebForms Repeater control.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxRepeater\">https://havit.blazor.eu/components/HxRepeater</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\">item type</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxRepeater"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.HxRepeater<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.HeaderTemplate\">\r\n            <summary>\r\n            Template that defines how the header section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.ItemTemplate\">\r\n            <summary>\r\n            Template that defines how items in the Repeater component are displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.FooterTemplate\">\r\n            <summary>\r\n            Template that defines how the footer section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"NullTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.NullTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of Items <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NullTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.EmptyTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of empty Items.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.Data\">\r\n            <summary>\r\n            Items to be rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":-1373101208,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxRepeater`1\">\r\n            <summary>\r\n            A data-bound list component that allows custom layout by repeating a specified template for each item displayed in the list.\r\n            Analogous to ASP.NET WebForms Repeater control.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxRepeater\">https://havit.blazor.eu/components/HxRepeater</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\">item type</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxRepeater"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.HxRepeater<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.HeaderTemplate\">\r\n            <summary>\r\n            Template that defines how the header section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.ItemTemplate\">\r\n            <summary>\r\n            Template that defines how items in the Repeater component are displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.FooterTemplate\">\r\n            <summary>\r\n            Template that defines how the footer section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"NullTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.NullTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of Items <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NullTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.EmptyTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of empty Items.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.Data\">\r\n            <summary>\r\n            Items to be rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":2124481070,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.HeaderTemplate\">\r\n            <summary>\r\n            Template that defines how the header section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":-32629486,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.HeaderTemplate\">\r\n            <summary>\r\n            Template that defines how the header section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.HeaderTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":552591897,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.ItemTemplate\">\r\n            <summary>\r\n            Template that defines how items in the Repeater component are displayed.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxRepeater"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":-200573048,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.ItemTemplate\">\r\n            <summary>\r\n            Template that defines how items in the Repeater component are displayed.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.HxRepeater"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":-1603866538,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.FooterTemplate\">\r\n            <summary>\r\n            Template that defines how the footer section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":-1780509426,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.FooterTemplate\">\r\n            <summary>\r\n            Template that defines how the footer section of the Repeater component is displayed.\r\n            Renders only if there are any items to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Havit.Blazor.Components.Web.HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.FooterTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":-509567744,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.NullTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of Items <c>null</c>.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NullTemplate","ParentTag":"HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":115953276,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.NullTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of Items <c>null</c>.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NullTemplate","ParentTag":"Havit.Blazor.Components.Web.HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.NullTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":265371859,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.EmptyTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of empty Items.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":1803533742,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxRepeater`1.EmptyTemplate\">\r\n            <summary>\r\n            Template that defines what should be rendered in case of empty Items.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"Havit.Blazor.Components.Web.HxRepeater"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.HxRepeater<TItem>.EmptyTemplate","Common.TypeNameIdentifier":"HxRepeater"}},{"HashCode":1655547751,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxIcon","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxIcon\">\r\n            <summary>\r\n            Displays an icon.\r\n            Currently supports <see href=\"https://icons.getbootstrap.com/\" target=\"_blank\">Bootstrap icons</see> through <c>BootstrapIcon</c> class.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxIcon\">https://havit.blazor.eu/components/HxIcon</see>\r\n            You can add your own icon-set easily.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxIcon.Icon\">\r\n            <summary>\r\n            Icon to display.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxIcon.CssClass\">\r\n            <summary>\r\n            CSS Class to combine with basic icon CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxIcon.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxIcon","Common.TypeNameIdentifier":"HxIcon"}},{"HashCode":117174593,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.HxIcon","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.HxIcon\">\r\n            <summary>\r\n            Displays an icon.\r\n            Currently supports <see href=\"https://icons.getbootstrap.com/\" target=\"_blank\">Bootstrap icons</see> through <c>BootstrapIcon</c> class.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxIcon\">https://havit.blazor.eu/components/HxIcon</see>\r\n            You can add your own icon-set easily.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxIcon.Icon\">\r\n            <summary>\r\n            Icon to display.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxIcon.CssClass\">\r\n            <summary>\r\n            CSS Class to combine with basic icon CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxIcon.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.HxIcon","Common.TypeNameIdentifier":"HxIcon"}},{"HashCode":1633303460,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordion\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/accordion/\">Bootstrap accordion</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAccordion\">https://havit.blazor.eu/components/HxAccordion</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAccordion"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the accordion container.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ExpandedItemIds","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemIds\">\r\n            <summary>\r\n            IDs of the expanded items (if <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.StayOpen\" /> is <code>true</code>, several items can be expanded).\r\n            Do not use constant value as it resets the accordion on every roundtrip. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemIds\" /> to set the initial state.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"ExpandedItemIds"}},{"Kind":"Components.Component","Name":"ExpandedItemIdsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<global::System.String>>","Common.PropertyName":"ExpandedItemIdsChanged"}},{"Kind":"Components.Component","Name":"ExpandedItemId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\">\r\n            <summary>\r\n            ID of the single expanded item (if <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.StayOpen\" /> is <code>true</code>, use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemIds\" />, several items can be expanded).\r\n            Do not use constant value as it reverts the accordion to that item on every roundtrip. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemId\" /> to set the initial state.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ExpandedItemId"}},{"Kind":"Components.Component","Name":"ExpandedItemIdChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ExpandedItemIdChanged"}},{"Kind":"Components.Component","Name":"StayOpen","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.StayOpen\">\r\n            <summary>\r\n            Set to <c>true</c> to make accordion items stay open when another item is opened.\r\n            Default is <c>false</c>, opening another item collapses current item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"StayOpen"}},{"Kind":"Components.Component","Name":"InitialExpandedItemId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemId\">\r\n            <summary>\r\n            ID of the item you want to expand at the very beginning (overwrites <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" /> if set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InitialExpandedItemId"}},{"Kind":"Components.Component","Name":"InitialExpandedItemIds","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemIds\">\r\n            <summary>\r\n            IDs of the item you want to expand at the very beginning (overwrites <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemIds\" /> if set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"InitialExpandedItemIds"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":235767571,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordion\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/accordion/\">Bootstrap accordion</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAccordion\">https://havit.blazor.eu/components/HxAccordion</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the accordion container.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ExpandedItemIds","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemIds\">\r\n            <summary>\r\n            IDs of the expanded items (if <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.StayOpen\" /> is <code>true</code>, several items can be expanded).\r\n            Do not use constant value as it resets the accordion on every roundtrip. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemIds\" /> to set the initial state.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"ExpandedItemIds"}},{"Kind":"Components.Component","Name":"ExpandedItemIdsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<global::System.String>>","Common.PropertyName":"ExpandedItemIdsChanged"}},{"Kind":"Components.Component","Name":"ExpandedItemId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\">\r\n            <summary>\r\n            ID of the single expanded item (if <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.StayOpen\" /> is <code>true</code>, use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemIds\" />, several items can be expanded).\r\n            Do not use constant value as it reverts the accordion to that item on every roundtrip. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemId\" /> to set the initial state.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ExpandedItemId"}},{"Kind":"Components.Component","Name":"ExpandedItemIdChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ExpandedItemIdChanged"}},{"Kind":"Components.Component","Name":"StayOpen","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.StayOpen\">\r\n            <summary>\r\n            Set to <c>true</c> to make accordion items stay open when another item is opened.\r\n            Default is <c>false</c>, opening another item collapses current item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"StayOpen"}},{"Kind":"Components.Component","Name":"InitialExpandedItemId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemId\">\r\n            <summary>\r\n            ID of the item you want to expand at the very beginning (overwrites <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" /> if set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InitialExpandedItemId"}},{"Kind":"Components.Component","Name":"InitialExpandedItemIds","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.InitialExpandedItemIds\">\r\n            <summary>\r\n            IDs of the item you want to expand at the very beginning (overwrites <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemIds\" /> if set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"InitialExpandedItemIds"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":-1984383887,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxAccordion"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":1018882950,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ChildContent","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":902771658,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem\">\r\n            <summary>\r\n            Single item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordion\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAccordionItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate\">\r\n            <summary>\r\n            Clickable header (always visible).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate\">\r\n            <summary>\r\n            Body (collapsible).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.Id\">\r\n            <summary>\r\n            ID of the item (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" />). (Gets generated GUID if not set.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"OnExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.OnExpanded\">\r\n            <summary>\r\n            Raised after the transition to this item (the animation is finished).\r\n            Is not raised for the initial rendering even if the item is not collapsed (no transition happened).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnExpanded"}},{"Kind":"Components.Component","Name":"OnCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.OnCollapsed\">\r\n            <summary>\r\n            Raised after the transition from this item (the animation is finished).\r\n            Is not raised for the initial rendering even if the item is collapsed (no transition happened).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnCollapsed"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the accordion item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the accordion item header (<c>.accordion-header</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the accordion item body (<c>.accordion-body</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem","Common.TypeNameIdentifier":"HxAccordionItem"}},{"HashCode":-980827179,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem\">\r\n            <summary>\r\n            Single item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAccordion\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate\">\r\n            <summary>\r\n            Clickable header (always visible).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate\">\r\n            <summary>\r\n            Body (collapsible).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.Id\">\r\n            <summary>\r\n            ID of the item (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordion.ExpandedItemId\" />). (Gets generated GUID if not set.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"OnExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.OnExpanded\">\r\n            <summary>\r\n            Raised after the transition to this item (the animation is finished).\r\n            Is not raised for the initial rendering even if the item is not collapsed (no transition happened).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnExpanded"}},{"Kind":"Components.Component","Name":"OnCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.OnCollapsed\">\r\n            <summary>\r\n            Raised after the transition from this item (the animation is finished).\r\n            Is not raised for the initial rendering even if the item is collapsed (no transition happened).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnCollapsed"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the accordion item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the accordion item header (<c>.accordion-header</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the accordion item body (<c>.accordion-body</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem","Common.TypeNameIdentifier":"HxAccordionItem"}},{"HashCode":-11426899,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate\">\r\n            <summary>\r\n            Clickable header (always visible).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxAccordionItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate","Common.TypeNameIdentifier":"HxAccordionItem"}},{"HashCode":1195137555,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate\">\r\n            <summary>\r\n            Clickable header (always visible).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.HeaderTemplate","Common.TypeNameIdentifier":"HxAccordionItem"}},{"HashCode":630876520,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate\">\r\n            <summary>\r\n            Body (collapsible).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"HxAccordionItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate","Common.TypeNameIdentifier":"HxAccordionItem"}},{"HashCode":1193058607,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate\">\r\n            <summary>\r\n            Body (collapsible).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordionItem.BodyTemplate","Common.TypeNameIdentifier":"HxAccordionItem"}},{"HashCode":663913598,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAlert","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAlert\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/alerts/\">Bootstrap alert</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAlert\">https://havit.blazor.eu/components/HxAlert</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAlert"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor","IsEnum":true,"IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAlert.Color\">\r\n            <summary>\r\n            Alert color (background). Required.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Dismissible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAlert.Dismissible\">\r\n            <summary>\r\n            Shows the Close button and allows dismissing of the alert.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Dismissible"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAlert.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAlert","Common.TypeNameIdentifier":"HxAlert"}},{"HashCode":-369838979,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAlert","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAlert\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/alerts/\">Bootstrap alert</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAlert\">https://havit.blazor.eu/components/HxAlert</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAlert"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor","IsEnum":true,"IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAlert.Color\">\r\n            <summary>\r\n            Alert color (background). Required.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Dismissible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAlert.Dismissible\">\r\n            <summary>\r\n            Shows the Close button and allows dismissing of the alert.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Dismissible"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAlert.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAlert","Common.TypeNameIdentifier":"HxAlert"}},{"HashCode":581096571,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxAlert"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent","Common.TypeNameIdentifier":"HxAlert"}},{"HashCode":325402731,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAlert"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAlert.ChildContent","Common.TypeNameIdentifier":"HxAlert"}},{"HashCode":1810899750,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBadge","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/badge/\">Bootstrap Badge</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxBadge\">https://havit.blazor.eu/components/HxBadge</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxBadge"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Color\">\r\n            <summary>\r\n            Badge color (background).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"TextColor","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.TextColor\">\r\n            <summary>\r\n            Color of badge text. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Color\" /> for the background color.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> (color automatically selected to work with chosen background color).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"TextColor"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Type\">\r\n            <summary>\r\n            Badge type - Regular or rounded-pills. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.BadgeType.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeType?","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBadge","Common.TypeNameIdentifier":"HxBadge"}},{"HashCode":647787030,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBadge","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/badge/\">Bootstrap Badge</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxBadge\">https://havit.blazor.eu/components/HxBadge</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxBadge"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Color\">\r\n            <summary>\r\n            Badge color (background).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"TextColor","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.TextColor\">\r\n            <summary>\r\n            Color of badge text. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Color\" /> for the background color.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> (color automatically selected to work with chosen background color).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"TextColor"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.Type\">\r\n            <summary>\r\n            Badge type - Regular or rounded-pills. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.BadgeType.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeType?","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBadge.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBadge","Common.TypeNameIdentifier":"HxBadge"}},{"HashCode":1123727944,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxBadge"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent","Common.TypeNameIdentifier":"HxBadge"}},{"HashCode":-1571208346,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxBadge"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBadge.ChildContent","Common.TypeNameIdentifier":"HxBadge"}},{"HashCode":-1060308064,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\">\r\n            <summary>\r\n            Button (<c>&lt;button type=\"button\"&gt;</c>). See also <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/\">Bootstrap Buttons</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxButton\">https://havit.blazor.eu/components/HxButton</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButton","Common.TypeNameIdentifier":"HxButton"}},{"HashCode":-879214699,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\">\r\n            <summary>\r\n            Button (<c>&lt;button type=\"button\"&gt;</c>). See also <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/\">Bootstrap Buttons</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxButton\">https://havit.blazor.eu/components/HxButton</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButton","Common.TypeNameIdentifier":"HxButton"}},{"HashCode":-2044054290,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent","Common.TypeNameIdentifier":"HxButton"}},{"HashCode":-1801564383,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent","Common.TypeNameIdentifier":"HxButton"}},{"HashCode":949267047,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/button-group/\">Button group</see>s.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxButtonGroup\">https://havit.blazor.eu/components/HxButtonGroup</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.Size\">\r\n            <summary>\r\n            Size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.Orientation\">\r\n            <summary>\r\n            Orientation. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation.Horizontal\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation","Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.AriaLabel\">\r\n            <summary>\r\n            Groups should be given an explicit label, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AriaLabel"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) to be added.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup","Common.TypeNameIdentifier":"HxButtonGroup"}},{"HashCode":-1324407016,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/button-group/\">Button group</see>s.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxButtonGroup\">https://havit.blazor.eu/components/HxButtonGroup</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.Size\">\r\n            <summary>\r\n            Size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonGroupSize","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.Orientation\">\r\n            <summary>\r\n            Orientation. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation.Horizontal\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonGroupOrientation","Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.AriaLabel\">\r\n            <summary>\r\n            Groups should be given an explicit label, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AriaLabel"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) to be added.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup","Common.TypeNameIdentifier":"HxButtonGroup"}},{"HashCode":-1722247462,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxButtonGroup"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent","Common.TypeNameIdentifier":"HxButtonGroup"}},{"HashCode":1965337873,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonGroup.ChildContent","Common.TypeNameIdentifier":"HxButtonGroup"}},{"HashCode":1268936228,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/button-group/#button-toolbar\">Button toolbar</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxButtonToolbar\">https://havit.blazor.eu/components/HxButtonToolbar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxButtonToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent\">\r\n            <summary>\r\n            Toolbar's content\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.AriaLabel\">\r\n            <summary>\r\n            An explicit label should be set, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AriaLabel"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.CssClass\">\r\n            <summary>\r\n            CSS class(es) to add to the HTML element with the <c>.btn-toolbar</c> class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar","Common.TypeNameIdentifier":"HxButtonToolbar"}},{"HashCode":886589508,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/button-group/#button-toolbar\">Button toolbar</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxButtonToolbar\">https://havit.blazor.eu/components/HxButtonToolbar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent\">\r\n            <summary>\r\n            Toolbar's content\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.AriaLabel\">\r\n            <summary>\r\n            An explicit label should be set, as most assistive technologies will otherwise not announce them, despite the presence of the correct role attribute. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AriaLabel"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.CssClass\">\r\n            <summary>\r\n            CSS class(es) to add to the HTML element with the <c>.btn-toolbar</c> class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar","Common.TypeNameIdentifier":"HxButtonToolbar"}},{"HashCode":372023016,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent\">\r\n            <summary>\r\n            Toolbar's content\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxButtonToolbar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent","Common.TypeNameIdentifier":"HxButtonToolbar"}},{"HashCode":1356032239,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent\">\r\n            <summary>\r\n            Toolbar's content\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxButtonToolbar.ChildContent","Common.TypeNameIdentifier":"HxButtonToolbar"}},{"HashCode":1628443173,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCloseButton\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/close-button/\">close-button</see> component.<br />\r\n            A simple close button for dismissing content like modals and alerts.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCloseButton\">https://havit.blazor.eu/components/HxCloseButton</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCloseButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"White","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCloseButton.White\">\r\n            <summary>\r\n            Toggles between the light and dark version of the button.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"White"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton","Common.TypeNameIdentifier":"HxCloseButton"}},{"HashCode":1660072182,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCloseButton\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/close-button/\">close-button</see> component.<br />\r\n            A simple close button for dismissing content like modals and alerts.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCloseButton\">https://havit.blazor.eu/components/HxCloseButton</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"White","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCloseButton.White\">\r\n            <summary>\r\n            Toggles between the light and dark version of the button.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"White"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton","Common.TypeNameIdentifier":"HxCloseButton"}},{"HashCode":533173094,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCloseButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton.ChildContent","Common.TypeNameIdentifier":"HxCloseButton"}},{"HashCode":-1419831513,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCloseButton.ChildContent","Common.TypeNameIdentifier":"HxCloseButton"}},{"HashCode":-1369274759,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSubmit\">\r\n            <summary>\r\n            Button <c>&lt;button type=\"submit\"&gt;</c>.\r\n            Direct ancestor of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> with the same API.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSubmit#HxSubmit\">https://havit.blazor.eu/components/HxSubmit#HxSubmit</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSubmit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit","Common.TypeNameIdentifier":"HxSubmit"}},{"HashCode":-872009987,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSubmit\">\r\n            <summary>\r\n            Button <c>&lt;button type=\"submit\"&gt;</c>.\r\n            Direct ancestor of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> with the same API.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSubmit#HxSubmit\">https://havit.blazor.eu/components/HxSubmit#HxSubmit</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit","Common.TypeNameIdentifier":"HxSubmit"}},{"HashCode":356825790,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxSubmit"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent","Common.TypeNameIdentifier":"HxSubmit"}},{"HashCode":-367059364,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSubmit.ChildContent","Common.TypeNameIdentifier":"HxSubmit"}},{"HashCode":-1480872141,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCalendar\">\r\n            <summary>\r\n            Basic calendar building block. Used for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange\" /> implementation.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCalendar\">https://havit.blazor.eu/components/HxCalendar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Value\">\r\n            <summary>\r\n            Date selected.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.ValueChanged\">\r\n            <summary>\r\n            Raised when selected date changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime?>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"DisplayMonth","TypeName":"System.DateTime","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.DisplayMonth\">\r\n            <summary>\r\n            Month to display.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"DisplayMonth"}},{"Kind":"Components.Component","Name":"DisplayMonthChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.DisplayMonthChanged\">\r\n            <summary>\r\n            Raised when month selection changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime>","Common.PropertyName":"DisplayMonthChanged"}},{"Kind":"Components.Component","Name":"MinDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.MinDate\">\r\n            <summary>\r\n            First date selectable from the calendar.<br />\r\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MinDate"}},{"Kind":"Components.Component","Name":"MaxDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.MaxDate\">\r\n            <summary>\r\n            Last date selectable from the calendar.<br />\r\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MaxDate"}},{"Kind":"Components.Component","Name":"DateCustomizationProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.DateCustomizationProvider\">\r\n            <summary>\r\n            Allows customization of the dates in calendar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"DateCustomizationProvider"}},{"Kind":"Components.Component","Name":"KeyboardNavigation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.KeyboardNavigation\">\r\n            <summary>\r\n            Indicates whether the keyboard navigation is enabled. When disabled, the calendar renders tabindex=\"-1\" on interactive elements.\r\n            Default is <c>true</c> (tabindex attribute is not rendered).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"KeyboardNavigation"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Common.TypeNameIdentifier":"HxCalendar"}},{"HashCode":-1989207546,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCalendar\">\r\n            <summary>\r\n            Basic calendar building block. Used for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange\" /> implementation.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCalendar\">https://havit.blazor.eu/components/HxCalendar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Value\">\r\n            <summary>\r\n            Date selected.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.ValueChanged\">\r\n            <summary>\r\n            Raised when selected date changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime?>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"DisplayMonth","TypeName":"System.DateTime","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.DisplayMonth\">\r\n            <summary>\r\n            Month to display.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"DisplayMonth"}},{"Kind":"Components.Component","Name":"DisplayMonthChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.DisplayMonthChanged\">\r\n            <summary>\r\n            Raised when month selection changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime>","Common.PropertyName":"DisplayMonthChanged"}},{"Kind":"Components.Component","Name":"MinDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.MinDate\">\r\n            <summary>\r\n            First date selectable from the calendar.<br />\r\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MinDate"}},{"Kind":"Components.Component","Name":"MaxDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.MaxDate\">\r\n            <summary>\r\n            Last date selectable from the calendar.<br />\r\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MaxDate"}},{"Kind":"Components.Component","Name":"DateCustomizationProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.DateCustomizationProvider\">\r\n            <summary>\r\n            Allows customization of the dates in calendar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"DateCustomizationProvider"}},{"Kind":"Components.Component","Name":"KeyboardNavigation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCalendar.KeyboardNavigation\">\r\n            <summary>\r\n            Indicates whether the keyboard navigation is enabled. When disabled, the calendar renders tabindex=\"-1\" on interactive elements.\r\n            Default is <c>true</c> (tabindex attribute is not rendered).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"KeyboardNavigation"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Common.TypeNameIdentifier":"HxCalendar"}},{"HashCode":-673289899,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCard\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/card/\">Bootstrap card</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCard\">https://havit.blazor.eu/components/HxCard</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCard"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ImageSrc","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageSrc\">\r\n            <summary>\r\n            Image to be placed in the card. For image position see <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImagePlacement\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ImageSrc"}},{"Kind":"Components.Component","Name":"ImagePlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImagePlacement\">\r\n            <summary>\r\n            Placement of the image. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement.Top\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement","Common.PropertyName":"ImagePlacement"}},{"Kind":"Components.Component","Name":"ImageAlt","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageAlt\">\r\n            <summary>\r\n            Image <c>alt</c> attribute value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ImageAlt"}},{"Kind":"Components.Component","Name":"ImageWidth","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageWidth\">\r\n            <summary>\r\n            Image <c>width</c> attribute value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"ImageWidth"}},{"Kind":"Components.Component","Name":"ImageHeight","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageHeight\">\r\n            <summary>\r\n            Image <c>height</c> attribute value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"ImageHeight"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate\">\r\n            <summary>\r\n            Header content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent\">\r\n            <summary>\r\n            Generic card content (outside <c>.card-body</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the card-container.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderCssClass\">\r\n            <summary>\r\n            Additional CSS class for the header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyCssClass\">\r\n            <summary>\r\n            Additional CSS class for the body.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterCssClass\">\r\n            <summary>\r\n            Additional CSS class for the footer.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":334016885,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCard\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/card/\">Bootstrap card</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCard\">https://havit.blazor.eu/components/HxCard</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCard"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ImageSrc","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageSrc\">\r\n            <summary>\r\n            Image to be placed in the card. For image position see <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImagePlacement\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ImageSrc"}},{"Kind":"Components.Component","Name":"ImagePlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImagePlacement\">\r\n            <summary>\r\n            Placement of the image. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement.Top\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardImagePlacement","Common.PropertyName":"ImagePlacement"}},{"Kind":"Components.Component","Name":"ImageAlt","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageAlt\">\r\n            <summary>\r\n            Image <c>alt</c> attribute value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ImageAlt"}},{"Kind":"Components.Component","Name":"ImageWidth","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageWidth\">\r\n            <summary>\r\n            Image <c>width</c> attribute value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"ImageWidth"}},{"Kind":"Components.Component","Name":"ImageHeight","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ImageHeight\">\r\n            <summary>\r\n            Image <c>height</c> attribute value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"ImageHeight"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate\">\r\n            <summary>\r\n            Header content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent\">\r\n            <summary>\r\n            Generic card content (outside <c>.card-body</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the card-container.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderCssClass\">\r\n            <summary>\r\n            Additional CSS class for the header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyCssClass\">\r\n            <summary>\r\n            Additional CSS class for the body.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterCssClass\">\r\n            <summary>\r\n            Additional CSS class for the footer.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":451880179,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate\">\r\n            <summary>\r\n            Header content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":691024376,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate\">\r\n            <summary>\r\n            Header content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.HeaderTemplate","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":1283843102,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":1177555378,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.BodyTemplate","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":-1069227609,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":423669847,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.FooterTemplate","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":979947627,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent\">\r\n            <summary>\r\n            Generic card content (outside <c>.card-body</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":1395779744,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent\">\r\n            <summary>\r\n            Generic card content (outside <c>.card-body</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCard"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCard.ChildContent","Common.TypeNameIdentifier":"HxCard"}},{"HashCode":1680925839,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/card/#titles-text-and-links\">card-subtitle</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCardSubtitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"HtmlElement","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.HtmlElement\">\r\n            <summary>\r\n            Underlying HTML element for card-subtitle. Default is <c>h6</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HtmlElement"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the card-subtitle element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle","Common.TypeNameIdentifier":"HxCardSubtitle"}},{"HashCode":1711699192,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/card/#titles-text-and-links\">card-subtitle</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"HtmlElement","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.HtmlElement\">\r\n            <summary>\r\n            Underlying HTML element for card-subtitle. Default is <c>h6</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HtmlElement"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the card-subtitle element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle","Common.TypeNameIdentifier":"HxCardSubtitle"}},{"HashCode":1812799616,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCardSubtitle"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent","Common.TypeNameIdentifier":"HxCardSubtitle"}},{"HashCode":-487925836,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardSubtitle.ChildContent","Common.TypeNameIdentifier":"HxCardSubtitle"}},{"HashCode":-246686892,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCardText\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/card/#titles-text-and-links\">card-title</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCardText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardText.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the card-text element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardText","Common.TypeNameIdentifier":"HxCardText"}},{"HashCode":-667982686,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCardText\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/card/#titles-text-and-links\">card-title</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCardText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardText.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the card-text element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardText","Common.TypeNameIdentifier":"HxCardText"}},{"HashCode":696792687,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCardText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent","Common.TypeNameIdentifier":"HxCardText"}},{"HashCode":1548303269,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCardText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardText.ChildContent","Common.TypeNameIdentifier":"HxCardText"}},{"HashCode":953823329,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/card/#titles-text-and-links\">card-title</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCardTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"HtmlElement","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.HtmlElement\">\r\n            <summary>\r\n            Underlying HTML element for card-title. Default is <c>h5</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HtmlElement"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the card-title element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle","Common.TypeNameIdentifier":"HxCardTitle"}},{"HashCode":-226887835,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/card/#titles-text-and-links\">card-title</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"HtmlElement","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.HtmlElement\">\r\n            <summary>\r\n            Underlying HTML element for card-title. Default is <c>h5</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HtmlElement"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the card-title element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle","Common.TypeNameIdentifier":"HxCardTitle"}},{"HashCode":1006470020,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCardTitle"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent","Common.TypeNameIdentifier":"HxCardTitle"}},{"HashCode":960911508,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent\">\r\n            <summary>\r\n            Text content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCardTitle.ChildContent","Common.TypeNameIdentifier":"HxCardTitle"}},{"HashCode":-1362885244,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCarousel\">\r\n            <summary>\r\n            A slideshow component for cycling through elements—images or slides of text—like a carousel.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCarousel\">https://havit.blazor.eu/components/HxCarousel</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCarousel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent\">\r\n            <summary>\r\n            Content of the carousel.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.CssClass\">\r\n            <summary>\r\n            Carousel CSS class. Added to root div <c>.carousel</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Controls","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Controls\">\r\n            <summary>\r\n            Display controls to switch between slides.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Controls"}},{"Kind":"Components.Component","Name":"Indicators","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Indicators\">\r\n            <summary>\r\n            Display indicators showing which slide is active. Can also be used to switch between slides.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Indicators"}},{"Kind":"Components.Component","Name":"Dark","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Dark\">\r\n            <summary>\r\n            Show controls, captions, etc. to dark colors.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Dark"}},{"Kind":"Components.Component","Name":"Crossfade","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Crossfade\">\r\n            <summary>\r\n            Animate slides with a fade transition instead of slide.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Crossfade"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Interval\">\r\n            <summary>\r\n            Delay for automatically switching slides. Default is <c>3000 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Interval"}},{"Kind":"Components.Component","Name":"TouchSwiping","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.TouchSwiping\">\r\n            <summary>\r\n            Enable or disable swiping left/right on touchscreen devices to move between slides.\r\n            Default is <c>true</c> (enabled).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"TouchSwiping"}},{"Kind":"Components.Component","Name":"OnSlide","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.OnSlide\">\r\n            <summary>\r\n            Is fired when the current slide is changed (at the very start of the sliding transition).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Common.PropertyName":"OnSlide"}},{"Kind":"Components.Component","Name":"OnSlid","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.OnSlid\">\r\n            <summary>\r\n            Is fired when the current slide is changed (once the transition is completed).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Common.PropertyName":"OnSlid"}},{"Kind":"Components.Component","Name":"Ride","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CarouselRide","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Ride\">\r\n            <summary>\r\n            Carousel ride (autoplay) behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselRide.Carousel\" /> (autoplays the carousel on load).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CarouselRide","Common.PropertyName":"Ride"}},{"Kind":"Components.Component","Name":"Pause","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CarouselPause","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Pause\">\r\n            <summary>\r\n            Carousel pause behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselPause.Hover\" /> (carousel will stop sliding on hover).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CarouselPause","Common.PropertyName":"Pause"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel","Common.TypeNameIdentifier":"HxCarousel"}},{"HashCode":419032732,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCarousel\">\r\n            <summary>\r\n            A slideshow component for cycling through elements—images or slides of text—like a carousel.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCarousel\">https://havit.blazor.eu/components/HxCarousel</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent\">\r\n            <summary>\r\n            Content of the carousel.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.CssClass\">\r\n            <summary>\r\n            Carousel CSS class. Added to root div <c>.carousel</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Controls","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Controls\">\r\n            <summary>\r\n            Display controls to switch between slides.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Controls"}},{"Kind":"Components.Component","Name":"Indicators","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Indicators\">\r\n            <summary>\r\n            Display indicators showing which slide is active. Can also be used to switch between slides.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Indicators"}},{"Kind":"Components.Component","Name":"Dark","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Dark\">\r\n            <summary>\r\n            Show controls, captions, etc. to dark colors.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Dark"}},{"Kind":"Components.Component","Name":"Crossfade","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Crossfade\">\r\n            <summary>\r\n            Animate slides with a fade transition instead of slide.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Crossfade"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Interval\">\r\n            <summary>\r\n            Delay for automatically switching slides. Default is <c>3000 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Interval"}},{"Kind":"Components.Component","Name":"TouchSwiping","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.TouchSwiping\">\r\n            <summary>\r\n            Enable or disable swiping left/right on touchscreen devices to move between slides.\r\n            Default is <c>true</c> (enabled).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"TouchSwiping"}},{"Kind":"Components.Component","Name":"OnSlide","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.OnSlide\">\r\n            <summary>\r\n            Is fired when the current slide is changed (at the very start of the sliding transition).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Common.PropertyName":"OnSlide"}},{"Kind":"Components.Component","Name":"OnSlid","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.OnSlid\">\r\n            <summary>\r\n            Is fired when the current slide is changed (once the transition is completed).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.CarouselSlideEventArgs>","Common.PropertyName":"OnSlid"}},{"Kind":"Components.Component","Name":"Ride","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CarouselRide","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Ride\">\r\n            <summary>\r\n            Carousel ride (autoplay) behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselRide.Carousel\" /> (autoplays the carousel on load).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CarouselRide","Common.PropertyName":"Ride"}},{"Kind":"Components.Component","Name":"Pause","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CarouselPause","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.Pause\">\r\n            <summary>\r\n            Carousel pause behavior. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CarouselPause.Hover\" /> (carousel will stop sliding on hover).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CarouselPause","Common.PropertyName":"Pause"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel","Common.TypeNameIdentifier":"HxCarousel"}},{"HashCode":1772572715,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent\">\r\n            <summary>\r\n            Content of the carousel.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCarousel"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent","Common.TypeNameIdentifier":"HxCarousel"}},{"HashCode":-1336784752,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent\">\r\n            <summary>\r\n            Content of the carousel.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarousel.ChildContent","Common.TypeNameIdentifier":"HxCarousel"}},{"HashCode":176140372,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCarouselCaption"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption","Common.TypeNameIdentifier":"HxCarouselCaption"}},{"HashCode":1438739089,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption","Common.TypeNameIdentifier":"HxCarouselCaption"}},{"HashCode":-1631841942,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCarouselCaption"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent","Common.TypeNameIdentifier":"HxCarouselCaption"}},{"HashCode":-643731001,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselCaption.ChildContent","Common.TypeNameIdentifier":"HxCarouselCaption"}},{"HashCode":-616323114,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCarouselItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.Interval\">\r\n            <summary>\r\n            Time before automatically cycling to the next item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Interval"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem","Common.TypeNameIdentifier":"HxCarouselItem"}},{"HashCode":140554890,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.Interval\">\r\n            <summary>\r\n            Time before automatically cycling to the next item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Interval"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem","Common.TypeNameIdentifier":"HxCarouselItem"}},{"HashCode":836148736,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCarouselItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent","Common.TypeNameIdentifier":"HxCarouselItem"}},{"HashCode":-971911327,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCarouselItem.ChildContent","Common.TypeNameIdentifier":"HxCarouselItem"}},{"HashCode":2051824195,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxChipGenerator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"ChipRemoveAction","TypeName":"System.Action<System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"ChipRemoveAction"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator","Common.TypeNameIdentifier":"HxChipGenerator"}},{"HashCode":2009174550,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"ChipRemoveAction","TypeName":"System.Action<System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Action<global::System.Object>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"ChipRemoveAction"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator","Common.TypeNameIdentifier":"HxChipGenerator"}},{"HashCode":-721452678,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxChipGenerator"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent","Common.TypeNameIdentifier":"HxChipGenerator"}},{"HashCode":982792408,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator.ChildContent","Common.TypeNameIdentifier":"HxChipGenerator"}},{"HashCode":-581464092,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipList","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipList\">\r\n            <summary>\r\n            Presents a list of chips as badges.<br />\r\n            Usually being used to present filter-criteria gathered by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFilterForm`1\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxChipList\">https://havit.blazor.eu/components/HxChipList</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxChipList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ChipListSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ChipListSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.Chips\">\r\n            <summary>\r\n            Chips to be presented.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Common.PropertyName":"Chips"}},{"Kind":"Components.Component","Name":"ChipBadgeSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ChipBadgeSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render chips.\r\n            Default brings <c>Color=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Secondary\" />\".</c>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"ChipBadgeSettings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"OnChipRemoveClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnChipRemoveClick\">\r\n            <summary>\r\n            Called when chip remove button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Common.PropertyName":"OnChipRemoveClick"}},{"Kind":"Components.Component","Name":"OnResetClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnResetClick\">\r\n            <summary>\r\n            Called when the reset button is clicked (when using the ready-made reset button, not the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate\" /> where you are expected to wire the event on your own).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Common.PropertyName":"OnResetClick"}},{"Kind":"Components.Component","Name":"ShowResetButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ShowResetButton\">\r\n            <summary>\r\n            Enables/disables the reset button.\r\n            Default is <c>false</c> (can be changed with <code>HxChipList.Defaults.ShowResetButton</code>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowResetButton"}},{"Kind":"Components.Component","Name":"ResetButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonText\">\r\n            <summary>\r\n            Text of the reset button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ResetButtonText"}},{"Kind":"Components.Component","Name":"ResetButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate\">\r\n            <summary>\r\n            Template for the reset button.\r\n            If used, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonText\" /> is ignored and the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnResetClick\" /> callback is not triggered (you are expected to wire the reset logic on you own).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ResetButtonTemplate"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipList","Common.TypeNameIdentifier":"HxChipList"}},{"HashCode":-1051488536,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipList","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipList\">\r\n            <summary>\r\n            Presents a list of chips as badges.<br />\r\n            Usually being used to present filter-criteria gathered by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFilterForm`1\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxChipList\">https://havit.blazor.eu/components/HxChipList</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxChipList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ChipListSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ChipListSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.Chips\">\r\n            <summary>\r\n            Chips to be presented.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Common.PropertyName":"Chips"}},{"Kind":"Components.Component","Name":"ChipBadgeSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ChipBadgeSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render chips.\r\n            Default brings <c>Color=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Secondary\" />\".</c>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"ChipBadgeSettings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"OnChipRemoveClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnChipRemoveClick\">\r\n            <summary>\r\n            Called when chip remove button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Common.PropertyName":"OnChipRemoveClick"}},{"Kind":"Components.Component","Name":"OnResetClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnResetClick\">\r\n            <summary>\r\n            Called when the reset button is clicked (when using the ready-made reset button, not the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate\" /> where you are expected to wire the event on your own).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem>","Common.PropertyName":"OnResetClick"}},{"Kind":"Components.Component","Name":"ShowResetButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ShowResetButton\">\r\n            <summary>\r\n            Enables/disables the reset button.\r\n            Default is <c>false</c> (can be changed with <code>HxChipList.Defaults.ShowResetButton</code>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowResetButton"}},{"Kind":"Components.Component","Name":"ResetButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonText\">\r\n            <summary>\r\n            Text of the reset button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ResetButtonText"}},{"Kind":"Components.Component","Name":"ResetButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate\">\r\n            <summary>\r\n            Template for the reset button.\r\n            If used, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonText\" /> is ignored and the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnResetClick\" /> callback is not triggered (you are expected to wire the reset logic on you own).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ResetButtonTemplate"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipList","Common.TypeNameIdentifier":"HxChipList"}},{"HashCode":1169910768,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate\">\r\n            <summary>\r\n            Template for the reset button.\r\n            If used, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonText\" /> is ignored and the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnResetClick\" /> callback is not triggered (you are expected to wire the reset logic on you own).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ResetButtonTemplate","ParentTag":"HxChipList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate","Common.TypeNameIdentifier":"HxChipList"}},{"HashCode":193947048,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate\">\r\n            <summary>\r\n            Template for the reset button.\r\n            If used, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonText\" /> is ignored and the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxChipList.OnResetClick\" /> callback is not triggered (you are expected to wire the reset logic on you own).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ResetButtonTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxChipList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxChipList.ResetButtonTemplate","Common.TypeNameIdentifier":"HxChipList"}},{"HashCode":2138298874,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/collapse/\">Bootstrap 5 Collapse</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCollapse\">https://havit.blazor.eu/components/HxCollapse</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Id\">\r\n            <summary>\r\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\r\n            (Autogenerated GUID if not set explicitly.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CollapseDirection","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CollapseDirection\">\r\n            <summary>\r\n            Direction of the animation.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","Common.PropertyName":"CollapseDirection"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Parent\">\r\n            <summary>\r\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\r\n            (Similar to traditional accordion behavior.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Parent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InitiallyExpanded","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.InitiallyExpanded\">\r\n            <summary>\r\n            Determines whether the collapse will be open or closed (expanded or collapsed) when first rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"InitiallyExpanded"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnShown\">\r\n            <summary>\r\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnHidden\">\r\n            <summary>\r\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnHidden"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse","Common.TypeNameIdentifier":"HxCollapse"}},{"HashCode":-1291765930,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/collapse/\">Bootstrap 5 Collapse</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCollapse\">https://havit.blazor.eu/components/HxCollapse</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Id\">\r\n            <summary>\r\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\r\n            (Autogenerated GUID if not set explicitly.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CollapseDirection","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CollapseDirection\">\r\n            <summary>\r\n            Direction of the animation.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","Common.PropertyName":"CollapseDirection"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Parent\">\r\n            <summary>\r\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\r\n            (Similar to traditional accordion behavior.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Parent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InitiallyExpanded","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.InitiallyExpanded\">\r\n            <summary>\r\n            Determines whether the collapse will be open or closed (expanded or collapsed) when first rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"InitiallyExpanded"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnShown\">\r\n            <summary>\r\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnHidden\">\r\n            <summary>\r\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnHidden"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse","Common.TypeNameIdentifier":"HxCollapse"}},{"HashCode":-994184492,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCollapse"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent","Common.TypeNameIdentifier":"HxCollapse"}},{"HashCode":-1900976878,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent","Common.TypeNameIdentifier":"HxCollapse"}},{"HashCode":-196560322,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton\">\r\n            <summary>\r\n            Bootstrap Collapse toggle (in form of button) which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\r\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (incl. <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> inheritance).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCollapseToggleButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CollapseTarget","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\">\r\n            <summary>\r\n            Target selector of the toggle.\r\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CollapseTarget"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton","Common.TypeNameIdentifier":"HxCollapseToggleButton"}},{"HashCode":-1090079014,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton\">\r\n            <summary>\r\n            Bootstrap Collapse toggle (in form of button) which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\r\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (incl. <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> inheritance).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CollapseTarget","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\">\r\n            <summary>\r\n            Target selector of the toggle.\r\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CollapseTarget"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton","Common.TypeNameIdentifier":"HxCollapseToggleButton"}},{"HashCode":604856357,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCollapseToggleButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent","Common.TypeNameIdentifier":"HxCollapseToggleButton"}},{"HashCode":967108762,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.ChildContent","Common.TypeNameIdentifier":"HxCollapseToggleButton"}},{"HashCode":1978251825,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement\">\r\n            <summary>\r\n            Bootstrap Collapse toggle triggering the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCollapseToggleElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ElementName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ElementName\">\r\n            <summary>\r\n            Gets or sets the name of the element to render. Default is <c>span</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ElementName"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the toggle element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"CollapseTarget","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.CollapseTarget\">\r\n            <summary>\r\n            Target selector of the toggle.\r\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CollapseTarget"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement","Common.TypeNameIdentifier":"HxCollapseToggleElement"}},{"HashCode":120245642,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement\">\r\n            <summary>\r\n            Bootstrap Collapse toggle triggering the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> to toggle.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ElementName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ElementName\">\r\n            <summary>\r\n            Gets or sets the name of the element to render. Default is <c>span</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ElementName"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the toggle element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"CollapseTarget","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.CollapseTarget\">\r\n            <summary>\r\n            Target selector of the toggle.\r\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CollapseTarget"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement","Common.TypeNameIdentifier":"HxCollapseToggleElement"}},{"HashCode":1109891477,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxCollapseToggleElement"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent","Common.TypeNameIdentifier":"HxCollapseToggleElement"}},{"HashCode":-681477483,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleElement.ChildContent","Common.TypeNameIdentifier":"HxCollapseToggleElement"}},{"HashCode":-1336146216,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu\">\r\n            <summary>\r\n            Ready-made context menu (based on <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap Dropdown</see>) with built-in support for confirmation messages after clicking on the menu items.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxContextMenu\">https://havit.blazor.eu/components/HxContextMenu</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ContextMenuSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ContextMenuSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DropdownCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.DropdownCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu dropdown (container).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownCssClass"}},{"Kind":"Components.Component","Name":"DropdownMenuCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.DropdownMenuCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu dropdown menu.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownMenuCssClass"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.Icon\">\r\n            <summary>\r\n            Icon carrying the menu (use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon\" /> or any other <see cref=\"T:Havit.Blazor.Components.Web.IconBase\" />).<br />\r\n            Default is <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon.ThreeDotsVertical\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.IconCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"DropdownMenuAlignment","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.DropdownMenuAlignment\">\r\n            <summary>\r\n            Alignment for the context menu dropdown menu.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment.End\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Common.PropertyName":"DropdownMenuAlignment"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent\">\r\n            <summary>\r\n            Items of the context menu. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem\" /> components.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu","Common.TypeNameIdentifier":"HxContextMenu"}},{"HashCode":1022630837,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu\">\r\n            <summary>\r\n            Ready-made context menu (based on <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap Dropdown</see>) with built-in support for confirmation messages after clicking on the menu items.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxContextMenu\">https://havit.blazor.eu/components/HxContextMenu</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ContextMenuSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ContextMenuSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DropdownCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.DropdownCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu dropdown (container).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownCssClass"}},{"Kind":"Components.Component","Name":"DropdownMenuCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.DropdownMenuCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu dropdown menu.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownMenuCssClass"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.Icon\">\r\n            <summary>\r\n            Icon carrying the menu (use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon\" /> or any other <see cref=\"T:Havit.Blazor.Components.Web.IconBase\" />).<br />\r\n            Default is <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon.ThreeDotsVertical\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.IconCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"DropdownMenuAlignment","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.DropdownMenuAlignment\">\r\n            <summary>\r\n            Alignment for the context menu dropdown menu.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment.End\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Common.PropertyName":"DropdownMenuAlignment"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent\">\r\n            <summary>\r\n            Items of the context menu. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem\" /> components.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu","Common.TypeNameIdentifier":"HxContextMenu"}},{"HashCode":549310154,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent\">\r\n            <summary>\r\n            Items of the context menu. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxContextMenu"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent","Common.TypeNameIdentifier":"HxContextMenu"}},{"HashCode":308608923,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent\">\r\n            <summary>\r\n            Items of the context menu. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenu.ChildContent","Common.TypeNameIdentifier":"HxContextMenu"}},{"HashCode":-97036175,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxContextMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.Text\">\r\n            <summary>\r\n            Item text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent\">\r\n            <summary>\r\n            Custom item content to be rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the menu item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.Icon\">\r\n            <summary>\r\n            Item icon (use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.IconCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu item icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"ConfirmationQuestion","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ConfirmationQuestion\">\r\n            <summary>\r\n            Displays <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox\" /> to get a confirmation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ConfirmationQuestion"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.OnClick\">\r\n            <summary>\r\n            Item clicked event.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem","Common.TypeNameIdentifier":"HxContextMenuItem"}},{"HashCode":1704404555,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.Text\">\r\n            <summary>\r\n            Item text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent\">\r\n            <summary>\r\n            Custom item content to be rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the menu item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.Icon\">\r\n            <summary>\r\n            Item icon (use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.BootstrapIcon\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.IconCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the context menu item icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"ConfirmationQuestion","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ConfirmationQuestion\">\r\n            <summary>\r\n            Displays <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox\" /> to get a confirmation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ConfirmationQuestion"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.OnClick\">\r\n            <summary>\r\n            Item clicked event.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem","Common.TypeNameIdentifier":"HxContextMenuItem"}},{"HashCode":1670152479,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent\">\r\n            <summary>\r\n            Custom item content to be rendered.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxContextMenuItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent","Common.TypeNameIdentifier":"HxContextMenuItem"}},{"HashCode":-268688493,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent\">\r\n            <summary>\r\n            Custom item content to be rendered.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuItem.ChildContent","Common.TypeNameIdentifier":"HxContextMenuItem"}},{"HashCode":-567535099,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap 5 Dropdown</see> generic component.<br />\r\n            For buttons with dropdowns use more specific <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxDropdown\">https://havit.blazor.eu/components/HxDropdown</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdown"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Direction","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.Direction\">\r\n            <summary>\r\n            Direction in which the dropdown is opened.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"AutoClose","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AutoClose\">\r\n            <summary>\r\n            By default, the dropdown menu is closed when clicking inside or outside the dropdown menu (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose.True\" />).\r\n            You can use the AutoClose parameter to change this behavior of the dropdown.\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior\">https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","Common.PropertyName":"AutoClose"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown","Common.TypeNameIdentifier":"HxDropdown"}},{"HashCode":1267467060,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap 5 Dropdown</see> generic component.<br />\r\n            For buttons with dropdowns use more specific <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxDropdown\">https://havit.blazor.eu/components/HxDropdown</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Direction","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.Direction\">\r\n            <summary>\r\n            Direction in which the dropdown is opened.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"AutoClose","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AutoClose\">\r\n            <summary>\r\n            By default, the dropdown menu is closed when clicking inside or outside the dropdown menu (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose.True\" />).\r\n            You can use the AutoClose parameter to change this behavior of the dropdown.\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior\">https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","Common.PropertyName":"AutoClose"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown","Common.TypeNameIdentifier":"HxDropdown"}},{"HashCode":-227277856,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdown"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent","Common.TypeNameIdentifier":"HxDropdown"}},{"HashCode":459050443,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdown.ChildContent","Common.TypeNameIdentifier":"HxDropdown"}},{"HashCode":1533816923,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap 5 Dropdown</see> component for dropdown-buttons.<br />\r\n            For generic dropdowns use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Split","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup.Split\">\r\n            <summary>\r\n            Set <c>true</c> to create a <a href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#split-button\">split dropdown</a>\r\n            (using a <c>btn-group</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Split"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.Direction\">\r\n            <summary>\r\n            Direction in which the dropdown is opened.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"AutoClose","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AutoClose\">\r\n            <summary>\r\n            By default, the dropdown menu is closed when clicking inside or outside the dropdown menu (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose.True\" />).\r\n            You can use the AutoClose parameter to change this behavior of the dropdown.\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior\">https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","Common.PropertyName":"AutoClose"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup","Common.TypeNameIdentifier":"HxDropdownButtonGroup"}},{"HashCode":-2041519963,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap 5 Dropdown</see> component for dropdown-buttons.<br />\r\n            For generic dropdowns use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Split","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup.Split\">\r\n            <summary>\r\n            Set <c>true</c> to create a <a href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#split-button\">split dropdown</a>\r\n            (using a <c>btn-group</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Split"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.Direction\">\r\n            <summary>\r\n            Direction in which the dropdown is opened.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownDirection","Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"AutoClose","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AutoClose\">\r\n            <summary>\r\n            By default, the dropdown menu is closed when clicking inside or outside the dropdown menu (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose.True\" />).\r\n            You can use the AutoClose parameter to change this behavior of the dropdown.\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior\">https://getbootstrap.com/docs/5.3/components/dropdowns/#auto-close-behavior</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownAutoClose","Common.PropertyName":"AutoClose"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdown.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup","Common.TypeNameIdentifier":"HxDropdownButtonGroup"}},{"HashCode":-970509813,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownButtonGroup"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup.ChildContent","Common.TypeNameIdentifier":"HxDropdownButtonGroup"}},{"HashCode":135470117,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup.ChildContent","Common.TypeNameIdentifier":"HxDropdownButtonGroup"}},{"HashCode":-1946407136,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent\">\r\n            <summary>\r\n            Custom dropdown content for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Alignment","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Common.PropertyName":"Alignment"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>ul</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent","Common.TypeNameIdentifier":"HxDropdownContent"}},{"HashCode":2029528555,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent\">\r\n            <summary>\r\n            Custom dropdown content for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Alignment","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Common.PropertyName":"Alignment"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>ul</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent","Common.TypeNameIdentifier":"HxDropdownContent"}},{"HashCode":-435328898,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownContent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent","Common.TypeNameIdentifier":"HxDropdownContent"}},{"HashCode":958107976,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownContent.ChildContent","Common.TypeNameIdentifier":"HxDropdownContent"}},{"HashCode":413898221,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider\">\r\n            <summary>\r\n            Divider for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownDivider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider.CssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li&gt;hr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>hr</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider","Common.TypeNameIdentifier":"HxDropdownDivider"}},{"HashCode":-920554131,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider\">\r\n            <summary>\r\n            Divider for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider.CssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li&gt;hr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>hr</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownDivider","Common.TypeNameIdentifier":"HxDropdownDivider"}},{"HashCode":-1044360929,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#headers\">Dropdown menu header</see> for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader","Common.TypeNameIdentifier":"HxDropdownHeader"}},{"HashCode":537341137,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/#headers\">Dropdown menu header</see> for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader","Common.TypeNameIdentifier":"HxDropdownHeader"}},{"HashCode":-319204053,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownHeader"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent","Common.TypeNameIdentifier":"HxDropdownHeader"}},{"HashCode":315088677,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownHeader.ChildContent","Common.TypeNameIdentifier":"HxDropdownHeader"}},{"HashCode":-2126152154,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem\">\r\n            <summary>\r\n            Generic item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li&gt;span</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>span</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>li&gt;span</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem","Common.TypeNameIdentifier":"HxDropdownItem"}},{"HashCode":-414890854,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem\">\r\n            <summary>\r\n            Generic item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li&gt;span</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>span</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>li&gt;span</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem","Common.TypeNameIdentifier":"HxDropdownItem"}},{"HashCode":-588644035,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent","Common.TypeNameIdentifier":"HxDropdownItem"}},{"HashCode":-2031990435,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItem.ChildContent","Common.TypeNameIdentifier":"HxDropdownItem"}},{"HashCode":1573453011,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownItemNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Href\">\r\n            <summary>\r\n            Navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Text\">\r\n            <summary>\r\n            Text of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            You can set the value to <c>null</c> to disable the matching.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>a</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink","Common.TypeNameIdentifier":"HxDropdownItemNavLink"}},{"HashCode":-1427819721,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Href\">\r\n            <summary>\r\n            Navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Text\">\r\n            <summary>\r\n            Text of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            You can set the value to <c>null</c> to disable the matching.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>a</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink","Common.TypeNameIdentifier":"HxDropdownItemNavLink"}},{"HashCode":-209007133,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownItemNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent","Common.TypeNameIdentifier":"HxDropdownItemNavLink"}},{"HashCode":165385421,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemNavLink.ChildContent","Common.TypeNameIdentifier":"HxDropdownItemNavLink"}},{"HashCode":1851385582,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText\">\r\n            <summary>\r\n            Text item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownItemText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>span</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText","Common.TypeNameIdentifier":"HxDropdownItemText"}},{"HashCode":-640930937,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText\">\r\n            <summary>\r\n            Text item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ContainerCssClass\">\r\n            <summary>\r\n            Additional CSS class for underlying <c>li</c> container (wrapping the main <c>span</c> inside).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText","Common.TypeNameIdentifier":"HxDropdownItemText"}},{"HashCode":-1082576744,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownItemText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent","Common.TypeNameIdentifier":"HxDropdownItemText"}},{"HashCode":928095444,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownItemText.ChildContent","Common.TypeNameIdentifier":"HxDropdownItemText"}},{"HashCode":-1710795448,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\">\r\n            <summary>\r\n            Bootstrap Dropdown menu which opens when triggered.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Alignment","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Common.PropertyName":"Alignment"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>ul</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu","Common.TypeNameIdentifier":"HxDropdownMenu"}},{"HashCode":1416911222,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu\">\r\n            <summary>\r\n            Bootstrap Dropdown menu which opens when triggered.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Alignment","TypeName":"Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.DropdownMenuAlignment?","Common.PropertyName":"Alignment"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>ul</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu","Common.TypeNameIdentifier":"HxDropdownMenu"}},{"HashCode":-1591442793,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownMenu"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent","Common.TypeNameIdentifier":"HxDropdownMenu"}},{"HashCode":80785800,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownMenu.ChildContent","Common.TypeNameIdentifier":"HxDropdownMenu"}},{"HashCode":1796158913,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup\" /> to open.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownToggleButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.DropdownOffset\">\r\n            <summary>\r\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\r\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)?","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"DropdownReference","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.DropdownReference\">\r\n            <summary>\r\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\r\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\r\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\r\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownReference"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.OnShown\">\r\n            <summary>\r\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.OnHidden\">\r\n            <summary>\r\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton","Common.TypeNameIdentifier":"HxDropdownToggleButton"}},{"HashCode":525729362,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownButtonGroup\" /> to open.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.DropdownOffset\">\r\n            <summary>\r\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\r\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)?","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"DropdownReference","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.DropdownReference\">\r\n            <summary>\r\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\r\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\r\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\r\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownReference"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.OnShown\">\r\n            <summary>\r\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.OnHidden\">\r\n            <summary>\r\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton","Common.TypeNameIdentifier":"HxDropdownToggleButton"}},{"HashCode":1626098256,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownToggleButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent","Common.TypeNameIdentifier":"HxDropdownToggleButton"}},{"HashCode":-1728416738,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleButton.ChildContent","Common.TypeNameIdentifier":"HxDropdownToggleButton"}},{"HashCode":-1553246366,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" /> to open.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDropdownToggleElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ElementName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ElementName\">\r\n            <summary>\r\n            Gets or sets the name of the element to render. Default is <c>span</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ElementName"}},{"Kind":"Components.Component","Name":"Caret","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.Caret\">\r\n            <summary>\r\n            Gets or sets whether to display caret in the toggle.<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Caret"}},{"Kind":"Components.Component","Name":"DropdownReference","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.DropdownReference\">\r\n            <summary>\r\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\r\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\r\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\r\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownReference"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.DropdownOffset\">\r\n            <summary>\r\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\r\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)?","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the toggle element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.OnShown\">\r\n            <summary>\r\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.OnHidden\">\r\n            <summary>\r\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement","Common.TypeNameIdentifier":"HxDropdownToggleElement"}},{"HashCode":-492501979,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/dropdowns/\">Bootstrap Dropdown</see> toggle button which triggers the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxDropdown\" /> to open.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ElementName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ElementName\">\r\n            <summary>\r\n            Gets or sets the name of the element to render. Default is <c>span</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ElementName"}},{"Kind":"Components.Component","Name":"Caret","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.Caret\">\r\n            <summary>\r\n            Gets or sets whether to display caret in the toggle.<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Caret"}},{"Kind":"Components.Component","Name":"DropdownReference","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.DropdownReference\">\r\n            <summary>\r\n            Reference element of the dropdown menu. Accepts the values of <c>toggle</c> (default), <c>parent</c>,\r\n            an HTMLElement reference (e.g. <c>#id</c>) or an object providing <c>getBoundingClientRect</c>.\r\n            For more information refer to Popper's <see href=\"https://popper.js.org/docs/v2/constructors/#createpopper\">constructor docs</see>\r\n            and <see href=\"https://popper.js.org/docs/v2/virtual-elements/\">virtual element docs</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DropdownReference"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.DropdownOffset\">\r\n            <summary>\r\n            Offset <c>(<see href=\"https://popper.js.org/docs/v2/modifiers/offset/#skidding-1\">skidding</see>, <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#distance-1\">distance</see>)</c>\r\n            of the dropdown relative to its target.  Default is <c>(0, 2)</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)?","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the toggle element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.OnShown\">\r\n            <summary>\r\n            Fired when the dropdown has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.OnHidden\">\r\n            <summary>\r\n            Fired when the dropdown has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement","Common.TypeNameIdentifier":"HxDropdownToggleElement"}},{"HashCode":-1780668626,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxDropdownToggleElement"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent","Common.TypeNameIdentifier":"HxDropdownToggleElement"}},{"HashCode":-2071249706,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxDropdownToggleElement.ChildContent","Common.TypeNameIdentifier":"HxDropdownToggleElement"}},{"HashCode":1616780417,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputFile\">\r\n            <summary>\r\n            Wraps <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> as Bootstrap form control (incl. <c>Label</c> etc.)<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputFile\">https://havit.blazor.eu/components/HxInputFile</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputFileSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputFileSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"UploadUrl","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.UploadUrl\">\r\n            <summary>\r\n            URL of the server endpoint receiving the files.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"UploadUrl"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"OnProgress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnProgress\">\r\n            <summary>\r\n            Raised during running file upload (the frequency depends on browser implementation).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadProgressEventArgs>","Common.PropertyName":"OnProgress"}},{"Kind":"Components.Component","Name":"OnFileUploaded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\">\r\n            <summary>\r\n            Raised after a file is uploaded (for every single file separately).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.FileUploadedEventArgs>","Common.PropertyName":"OnFileUploaded"}},{"Kind":"Components.Component","Name":"OnUploadCompleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnUploadCompleted\">\r\n            <summary>\r\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> events).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Common.PropertyName":"OnUploadCompleted"}},{"Kind":"Components.Component","Name":"Multiple","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Multiple\">\r\n            <summary>\r\n            Single <c>false</c> or multiple <c>true</c> files upload.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Multiple"}},{"Kind":"Components.Component","Name":"MaxParallelUploads","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.MaxParallelUploads\">\r\n            <summary>\r\n            Maximum number of concurrent uploads. Default is <c>6</c> (from <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxParallelUploads"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Accept\">\r\n            <summary>\r\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\r\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Int64?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.MaxFileSize\">\r\n            <summary>\r\n            The maximum files size in bytes.\r\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\r\n            Default is <c>null</c> (unlimited).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int64?","Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Label\">\r\n            <summary>\r\n            Label to render before input (or after input for Checkbox).\t\t\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate\">\r\n            <summary>\r\n            Label to render before input (or after input for Checkbox).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile","Common.TypeNameIdentifier":"HxInputFile"}},{"HashCode":-2146761935,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputFile\">\r\n            <summary>\r\n            Wraps <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> as Bootstrap form control (incl. <c>Label</c> etc.)<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputFile\">https://havit.blazor.eu/components/HxInputFile</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputFileSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputFileSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"UploadUrl","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.UploadUrl\">\r\n            <summary>\r\n            URL of the server endpoint receiving the files.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"UploadUrl"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"OnProgress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnProgress\">\r\n            <summary>\r\n            Raised during running file upload (the frequency depends on browser implementation).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadProgressEventArgs>","Common.PropertyName":"OnProgress"}},{"Kind":"Components.Component","Name":"OnFileUploaded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\">\r\n            <summary>\r\n            Raised after a file is uploaded (for every single file separately).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.FileUploadedEventArgs>","Common.PropertyName":"OnFileUploaded"}},{"Kind":"Components.Component","Name":"OnUploadCompleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnUploadCompleted\">\r\n            <summary>\r\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> events).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Common.PropertyName":"OnUploadCompleted"}},{"Kind":"Components.Component","Name":"Multiple","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Multiple\">\r\n            <summary>\r\n            Single <c>false</c> or multiple <c>true</c> files upload.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Multiple"}},{"Kind":"Components.Component","Name":"MaxParallelUploads","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.MaxParallelUploads\">\r\n            <summary>\r\n            Maximum number of concurrent uploads. Default is <c>6</c> (from <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxParallelUploads"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Accept\">\r\n            <summary>\r\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\r\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Int64?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.MaxFileSize\">\r\n            <summary>\r\n            The maximum files size in bytes.\r\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\r\n            Default is <c>null</c> (unlimited).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int64?","Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Label\">\r\n            <summary>\r\n            Label to render before input (or after input for Checkbox).\t\t\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate\">\r\n            <summary>\r\n            Label to render before input (or after input for Checkbox).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile","Common.TypeNameIdentifier":"HxInputFile"}},{"HashCode":-1182020634,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate\">\r\n            <summary>\r\n            Label to render before input (or after input for Checkbox).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputFile"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate","Common.TypeNameIdentifier":"HxInputFile"}},{"HashCode":2029463093,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate\">\r\n            <summary>\r\n            Label to render before input (or after input for Checkbox).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.LabelTemplate","Common.TypeNameIdentifier":"HxInputFile"}},{"HashCode":-1303490261,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputFile"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate","Common.TypeNameIdentifier":"HxInputFile"}},{"HashCode":-799706210,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFile.HintTemplate","Common.TypeNameIdentifier":"HxInputFile"}},{"HashCode":1999060308,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone\">\r\n            <summary>\r\n            Ready-made UX for drag&amp;drop file upload.\r\n            For custom drag&amp;drop UX, use <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> and <see href=\"https://github.com/havit/Havit.Blazor/blob/728567c9c83a0b4ab7fe2e031bf1ff378f1b1ce7/Havit.Blazor.Components.Web.Bootstrap/Files/HxInputFileDropZone.razor.css#L20-L26\">a little bit of HTML/CSS</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputFileDropZone\">https://havit.blazor.eu/components/HxInputFileDropZone</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputFileDropZone"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"UploadUrl","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.UploadUrl\">\r\n            <summary>\r\n            URL of the server endpoint receiving the files.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"UploadUrl"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"OnProgress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnProgress\">\r\n            <summary>\r\n            Raised during running file upload (the frequency depends on browser implementation).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadProgressEventArgs>","Common.PropertyName":"OnProgress"}},{"Kind":"Components.Component","Name":"OnFileUploaded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\">\r\n            <summary>\r\n            Raised after a file is uploaded (for every single file separately).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.FileUploadedEventArgs>","Common.PropertyName":"OnFileUploaded"}},{"Kind":"Components.Component","Name":"OnUploadCompleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnUploadCompleted\">\r\n            <summary>\r\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> events).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Common.PropertyName":"OnUploadCompleted"}},{"Kind":"Components.Component","Name":"Multiple","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.Multiple\">\r\n            <summary>\r\n            Single <c>false</c> or multiple <c>true</c> files upload.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Multiple"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Int64?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.MaxFileSize\">\r\n            <summary>\r\n            The maximum files size in bytes.\r\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\r\n            Default is <c>null</c> (unlimited).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int64?","Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.Accept\">\r\n            <summary>\r\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\r\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"NoFilesTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate\">\r\n            <summary>\r\n            Content to render when no files are picked. Default content is displayed when not set.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NoFilesTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone","Common.TypeNameIdentifier":"HxInputFileDropZone"}},{"HashCode":-783457340,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone\">\r\n            <summary>\r\n            Ready-made UX for drag&amp;drop file upload.\r\n            For custom drag&amp;drop UX, use <see cref=\"T:Havit.Blazor.Components.Web.HxInputFileCore\" /> and <see href=\"https://github.com/havit/Havit.Blazor/blob/728567c9c83a0b4ab7fe2e031bf1ff378f1b1ce7/Havit.Blazor.Components.Web.Bootstrap/Files/HxInputFileDropZone.razor.css#L20-L26\">a little bit of HTML/CSS</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputFileDropZone\">https://havit.blazor.eu/components/HxInputFileDropZone</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"UploadUrl","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.UploadUrl\">\r\n            <summary>\r\n            URL of the server endpoint receiving the files.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"UploadUrl"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"OnProgress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadProgressEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnProgress\">\r\n            <summary>\r\n            Raised during running file upload (the frequency depends on browser implementation).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadProgressEventArgs>","Common.PropertyName":"OnProgress"}},{"Kind":"Components.Component","Name":"OnFileUploaded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.FileUploadedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\">\r\n            <summary>\r\n            Raised after a file is uploaded (for every single file separately).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.FileUploadedEventArgs>","Common.PropertyName":"OnFileUploaded"}},{"Kind":"Components.Component","Name":"OnUploadCompleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnUploadCompleted\">\r\n            <summary>\r\n            Raised when all files are uploaded (after all <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> events).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.UploadCompletedEventArgs>","Common.PropertyName":"OnUploadCompleted"}},{"Kind":"Components.Component","Name":"Multiple","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.Multiple\">\r\n            <summary>\r\n            Single <c>false</c> or multiple <c>true</c> files upload.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Multiple"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Int64?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.MaxFileSize\">\r\n            <summary>\r\n            The maximum files size in bytes.\r\n            When exceeded, the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.OnFileUploaded\" /> returns <c>413-RequestEntityTooLarge</c> as <see cref=\"P:Havit.Blazor.Components.Web.FileUploadedEventArgs.ResponseStatus\" />.\r\n            Default is <c>null</c> (unlimited).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int64?","Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.Accept\">\r\n            <summary>\r\n            Takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.\r\n            <see href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept\">MDN Web Docs - HTML attribute: accept</see>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"NoFilesTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate\">\r\n            <summary>\r\n            Content to render when no files are picked. Default content is displayed when not set.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NoFilesTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone","Common.TypeNameIdentifier":"HxInputFileDropZone"}},{"HashCode":134717218,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate\">\r\n            <summary>\r\n            Content to render when no files are picked. Default content is displayed when not set.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoFilesTemplate","ParentTag":"HxInputFileDropZone"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate","Common.TypeNameIdentifier":"HxInputFileDropZone"}},{"HashCode":1116581855,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate\">\r\n            <summary>\r\n            Content to render when no files are picked. Default content is displayed when not set.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoFilesTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputFileDropZone.NoFilesTemplate","Common.TypeNameIdentifier":"HxInputFileDropZone"}},{"HashCode":1808093475,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFilterForm`1\">\r\n            <summary>\r\n            Edit form derived from HxModelEditForm with support for chip generators.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxFilterForm\">https://havit.blazor.eu/components/HxFilterForm</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxFilterForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TModel"}},{"Kind":"Components.Component","Name":"OnChipsUpdated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem[]>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem[]>","Common.PropertyName":"OnChipsUpdated"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Id\">\r\n            <summary>\r\n            Form element id.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Model","TypeName":"TModel","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Model\">\r\n            <summary>\r\n            Model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TModel","Components.GenericTyped":"True","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ModelChanged\">\r\n            <summary>\r\n            Model event callback. Invoked when valid form is updated.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ModelChanged"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxFilterForm"}},{"HashCode":1463335060,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFilterForm`1\">\r\n            <summary>\r\n            Edit form derived from HxModelEditForm with support for chip generators.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxFilterForm\">https://havit.blazor.eu/components/HxFilterForm</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TModel for the Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TModel"}},{"Kind":"Components.Component","Name":"OnChipsUpdated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.ChipItem[]>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.ChipItem[]>","Common.PropertyName":"OnChipsUpdated"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Id\">\r\n            <summary>\r\n            Form element id.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Model","TypeName":"TModel","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.Model\">\r\n            <summary>\r\n            Model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TModel","Components.GenericTyped":"True","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ModelChanged\">\r\n            <summary>\r\n            Model event callback. Invoked when valid form is updated.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ModelChanged"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TModel>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TModel>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxFilterForm"}},{"HashCode":-1071775322,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxFilterForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent","Common.TypeNameIdentifier":"HxFilterForm"}},{"HashCode":-317766550,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.HxModelEditForm`1.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>.ChildContent","Common.TypeNameIdentifier":"HxFilterForm"}},{"HashCode":1571540385,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2\">\r\n            <summary>\r\n            Component for single item selection with dynamic suggestions (based on typed characters).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAutosuggest\">https://havit.blazor.eu/components/HxAutosuggest</see>\r\n            </summary>\r\n            <remarks>\r\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest\" />.\r\n            </remarks>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAutosuggest"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AutosuggestSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AutosuggestSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.DataProvider\">\r\n            <summary>\r\n            Method (delegate) which provides data of the suggestions.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when <c>TValue</c> is same as  <c>TItem</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items are empty.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"SearchIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.SearchIcon\">\r\n            <summary>\r\n            Icon displayed in input when no item is selected.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SearchIcon"}},{"Kind":"Components.Component","Name":"ClearIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ClearIcon\">\r\n            <summary>\r\n            Icon displayed in input on selection clear button when item is selected.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ClearIcon"}},{"Kind":"Components.Component","Name":"MinimumLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.MinimumLength\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MinimumLength"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.Delay\">\r\n            <summary>\r\n            Debounce delay in milliseconds.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"ItemFromValueResolver","TypeName":"System.Func<TValue, System.Threading.Tasks.Task<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ItemFromValueResolver\">\r\n            <summary>\r\n            Returns corresponding item for (select) Value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TValue, global::System.Threading.Tasks.Task<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"ItemFromValueResolver"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":-600014344,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2\">\r\n            <summary>\r\n            Component for single item selection with dynamic suggestions (based on typed characters).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAutosuggest\">https://havit.blazor.eu/components/HxAutosuggest</see>\r\n            </summary>\r\n            <remarks>\r\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest\" />.\r\n            </remarks>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AutosuggestSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AutosuggestSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.DataProvider\">\r\n            <summary>\r\n            Method (delegate) which provides data of the suggestions.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when <c>TValue</c> is same as  <c>TItem</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items are empty.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"SearchIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.SearchIcon\">\r\n            <summary>\r\n            Icon displayed in input when no item is selected.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SearchIcon"}},{"Kind":"Components.Component","Name":"ClearIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ClearIcon\">\r\n            <summary>\r\n            Icon displayed in input on selection clear button when item is selected.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ClearIcon"}},{"Kind":"Components.Component","Name":"MinimumLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.MinimumLength\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MinimumLength"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.Delay\">\r\n            <summary>\r\n            Debounce delay in milliseconds.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"ItemFromValueResolver","TypeName":"System.Func<TValue, System.Threading.Tasks.Task<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ItemFromValueResolver\">\r\n            <summary>\r\n            Returns corresponding item for (select) Value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TValue, global::System.Threading.Tasks.Task<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"ItemFromValueResolver"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":362694474,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxAutosuggest"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":69912759,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.TextSelector\" /> is used.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ItemTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":1395767513,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items are empty.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":1488655820,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items are empty.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.EmptyTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":1843251636,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":-2106105134,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":-478602902,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":-1999289214,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":-1566493741,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":1500837074,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":-2038505392,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":209984264,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.HintTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":-63020943,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":98127778,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":1397469383,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\">\r\n            <summary>\r\n            Checkbox input.<br />\r\n            (Replaces the former <c>HxInputCheckbox</c> component which was dropped in v 4.0.0.)\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCheckbox\">https://havit.blazor.eu/components/HxCheckbox</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Text\">\r\n            <summary>\r\n            Text to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TextTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TextTemplate"}},{"Kind":"Components.Component","Name":"TextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextCssClass\">\r\n            <summary>\r\n            CSS class to apply to the text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TextCssClass"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Inline\">\r\n            <summary>\r\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\t\t\r\n            Works only when there is no label, no hint and no validation message.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Reverse","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Reverse\">\r\n            <summary>\r\n            Put the checkbox on the opposite side - first text, then checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Reverse"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":1261533570,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\">\r\n            <summary>\r\n            Checkbox input.<br />\r\n            (Replaces the former <c>HxInputCheckbox</c> component which was dropped in v 4.0.0.)\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCheckbox\">https://havit.blazor.eu/components/HxCheckbox</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Text\">\r\n            <summary>\r\n            Text to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TextTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TextTemplate"}},{"Kind":"Components.Component","Name":"TextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextCssClass\">\r\n            <summary>\r\n            CSS class to apply to the text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TextCssClass"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Inline\">\r\n            <summary>\r\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\t\t\r\n            Works only when there is no label, no hint and no validation message.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Reverse","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Reverse\">\r\n            <summary>\r\n            Put the checkbox on the opposite side - first text, then checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Reverse"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":1466950628,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextTemplate","ParentTag":"HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":-308778392,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":-1128276670,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.LabelTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":-2059625042,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.LabelTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":-679941224,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.HintTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":186653188,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.HintTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":901000702,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.ChipTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":-1259130540,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.ChipTemplate","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":1881054256,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2\">\r\n            <summary>\r\n            Renders a multi-selection list of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" /> controls.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCheckboxList\">https://havit.blazor.eu/components/HxCheckboxList</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCheckboxList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"ItemTextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set, <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextSelector"}},{"Kind":"Components.Component","Name":"ItemValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when TValue is same as TItem.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemValueSelector"}},{"Kind":"Components.Component","Name":"ItemSortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemSortKeySelector\">\r\n            <summary>\r\n            Selects value for items sorting. When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextSelector\" /> property will be used.\r\n            If you need complex sorting, pre-sort data manually or create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemSortKeySelector"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemInputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemInputCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the input element of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemInputCssClass"}},{"Kind":"Components.Component","Name":"ItemInputCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemInputCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the input element of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemInputCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemTextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemTextCssClass"}},{"Kind":"Components.Component","Name":"ItemTextCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextCssClassSelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.AutoSort\">\r\n            <summary>\r\n            When <c>true</c>, items are sorted before displaying in select.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.Inline\">\r\n            <summary>\r\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CheckboxListSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CheckboxListSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<TValue>>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Collections.Generic.List<TValue>>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":2086056867,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2\">\r\n            <summary>\r\n            Renders a multi-selection list of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" /> controls.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxCheckboxList\">https://havit.blazor.eu/components/HxCheckboxList</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"ItemTextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set, <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextSelector"}},{"Kind":"Components.Component","Name":"ItemValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when TValue is same as TItem.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemValueSelector"}},{"Kind":"Components.Component","Name":"ItemSortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemSortKeySelector\">\r\n            <summary>\r\n            Selects value for items sorting. When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextSelector\" /> property will be used.\r\n            If you need complex sorting, pre-sort data manually or create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemSortKeySelector"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemInputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemInputCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the input element of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemInputCssClass"}},{"Kind":"Components.Component","Name":"ItemInputCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemInputCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the input element of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemInputCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemTextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemTextCssClass"}},{"Kind":"Components.Component","Name":"ItemTextCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.ItemTextCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextCssClassSelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.AutoSort\">\r\n            <summary>\r\n            When <c>true</c>, items are sorted before displaying in select.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.Inline\">\r\n            <summary>\r\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CheckboxListSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CheckboxListSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<TValue>>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Collections.Generic.List<TValue>>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":404635756,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxCheckboxList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":657302455,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":738283151,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxCheckboxList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":1023610630,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":-81574568,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxCheckboxList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":-1723796350,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":-25835544,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFormValue\">\r\n            <summary>\r\n            Displays a read-only value in the form control visual (as <c>.form-control</c>, with label, border, etc.).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxFormValue\">https://havit.blazor.eu/components/HxFormValue</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxFormValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.FormValueSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.FormValueSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.CssClass\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.CssClass\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Label\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Label\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelCssClass\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelCssClass\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Hint\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Hint\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Value\">\r\n            <summary>\r\n            Value to be presented.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate\">\r\n            <summary>\r\n            Template to render value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ValueTemplate"}},{"Kind":"Components.Component","Name":"ValueCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ValueCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartText\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartText\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndText\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndText\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":1574556306,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxFormValue\">\r\n            <summary>\r\n            Displays a read-only value in the form control visual (as <c>.form-control</c>, with label, border, etc.).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxFormValue\">https://havit.blazor.eu/components/HxFormValue</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.FormValueSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.FormValueSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.CssClass\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.CssClass\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Label\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Label\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelCssClass\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelCssClass\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Hint\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.Hint\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.Value\">\r\n            <summary>\r\n            Value to be presented.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate\">\r\n            <summary>\r\n            Template to render value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ValueTemplate"}},{"Kind":"Components.Component","Name":"ValueCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ValueCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartText\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartText\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndText\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndText\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":-1257443747,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":-1237979048,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.LabelTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.LabelTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":41210106,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":-1067633961,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent.HintTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.HintTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":902378466,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate\">\r\n            <summary>\r\n            Template to render value.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":1652241394,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate\">\r\n            <summary>\r\n            Template to render value.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.ValueTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":483664006,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":-1928479417,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupStartTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":1143682245,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":-642231074,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponentWithInputGroups.InputGroupEndTemplate\" />\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFormValue.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxFormValue"}},{"HashCode":-1070022974,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1\">\r\n            <summary>\r\n            Date picker. Form input component for entering a date.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputDate\">https://havit.blazor.eu/components/HxInputDate</see>\r\n            </summary>\r\n            <remarks>\r\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate\" />.\r\n            </remarks>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputDateSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputDateSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ShowPredefinedDates","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.ShowPredefinedDates\">\r\n            <summary>\r\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.PredefinedDates\" />, e.g. Today).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowPredefinedDates"}},{"Kind":"Components.Component","Name":"PredefinedDates","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.PredefinedDates\">\r\n            <summary>\r\n            Predefined dates to be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Common.PropertyName":"PredefinedDates"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying a parsing error.\r\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by <c>Label</c> property, <c>{1}</c> name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.Placeholder\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IInputWithPlaceholder.Placeholder\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"CalendarIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.CalendarIcon\">\r\n            <summary>\r\n            Optional icon to display within the input. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" /> to set the icon for the whole project.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CalendarIcon"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.ShowClearButton\">\r\n            <summary>\r\n            Indicates whether the <i>Clear</i> button in dropdown calendar should be visible.<br />\r\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"MinDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.MinDate\">\r\n            <summary>\r\n            First date selectable from the dropdown calendar.<br />\r\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MinDate"}},{"Kind":"Components.Component","Name":"MaxDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.MaxDate\">\r\n            <summary>\r\n            Last date selectable from the dropdown calendar.<br />\r\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MaxDate"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.CalendarDateCustomizationProvider\">\r\n            <summary>\r\n            Allows customization of the dates in dropdown calendar.<br />\r\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProvider"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":1394127357,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1\">\r\n            <summary>\r\n            Date picker. Form input component for entering a date.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputDate\">https://havit.blazor.eu/components/HxInputDate</see>\r\n            </summary>\r\n            <remarks>\r\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDate\" />.\r\n            </remarks>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputDateSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputDateSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ShowPredefinedDates","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.ShowPredefinedDates\">\r\n            <summary>\r\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.PredefinedDates\" />, e.g. Today).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowPredefinedDates"}},{"Kind":"Components.Component","Name":"PredefinedDates","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.PredefinedDates\">\r\n            <summary>\r\n            Predefined dates to be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Common.PropertyName":"PredefinedDates"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying a parsing error.\r\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by <c>Label</c> property, <c>{1}</c> name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.Placeholder\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.IInputWithPlaceholder.Placeholder\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"CalendarIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.CalendarIcon\">\r\n            <summary>\r\n            Optional icon to display within the input. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" /> to set the icon for the whole project.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CalendarIcon"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.ShowClearButton\">\r\n            <summary>\r\n            Indicates whether the <i>Clear</i> button in dropdown calendar should be visible.<br />\r\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"MinDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.MinDate\">\r\n            <summary>\r\n            First date selectable from the dropdown calendar.<br />\r\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MinDate"}},{"Kind":"Components.Component","Name":"MaxDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.MaxDate\">\r\n            <summary>\r\n            Last date selectable from the dropdown calendar.<br />\r\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MaxDate"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.CalendarDateCustomizationProvider\">\r\n            <summary>\r\n            Allows customization of the dates in dropdown calendar.<br />\r\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProvider"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":-963079314,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":2059877052,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":-972982697,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":1046482942,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":1312111898,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":-1908010541,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":2000867088,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":1109028082,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":-1795985380,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":-1669096190,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":-762897393,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange\">\r\n            <summary>\r\n            Date range picker. Form input component for entering start date and end date.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputDateRange\">https://havit.blazor.eu/components/HxInputDateRange</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDateRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputDateRangeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputDateRangeSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ShowPredefinedDateRanges","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ShowPredefinedDateRanges\">\r\n            <summary>\r\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.PredefinedDateRanges\" />, e.g. Today).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowPredefinedDateRanges"}},{"Kind":"Components.Component","Name":"PredefinedDateRanges","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.PredefinedDateRanges\">\r\n            <summary>\r\n            Predefined dates to be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Common.PropertyName":"PredefinedDateRanges"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"FromParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.FromParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a \"from\" parsing error.\r\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FromParsingErrorMessage"}},{"Kind":"Components.Component","Name":"ToParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ToParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a \"to\" parsing error.\r\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ToParsingErrorMessage"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ShowClearButton\">\r\n            <summary>\r\n            Indicates whether the <i>Clear</i> button in dropdown calendar should be visible.<br />\r\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"MinDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.MinDate\">\r\n            <summary>\r\n            First date selectable from the dropdown calendar.<br />\r\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MinDate"}},{"Kind":"Components.Component","Name":"MaxDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.MaxDate\">\r\n            <summary>\r\n            Last date selectable from the dropdown calendar.<br />\r\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MaxDate"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.CalendarDateCustomizationProvider\">\r\n            <summary>\r\n            Allows customization of the dates in dropdown calendars.<br />\r\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProvider"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"Havit.DateTimeRange","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.DateTimeRange","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.DateTimeRange>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<Havit.DateTimeRange>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::Havit.DateTimeRange>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":-583114564,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange\">\r\n            <summary>\r\n            Date range picker. Form input component for entering start date and end date.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputDateRange\">https://havit.blazor.eu/components/HxInputDateRange</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputDateRangeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputDateRangeSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ShowPredefinedDateRanges","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ShowPredefinedDateRanges\">\r\n            <summary>\r\n            When enabled (default is <c>true</c>), shows predefined days (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.PredefinedDateRanges\" />, e.g. Today).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowPredefinedDateRanges"}},{"Kind":"Components.Component","Name":"PredefinedDateRanges","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.PredefinedDateRanges\">\r\n            <summary>\r\n            Predefined dates to be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Common.PropertyName":"PredefinedDateRanges"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"FromParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.FromParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a \"from\" parsing error.\r\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FromParsingErrorMessage"}},{"Kind":"Components.Component","Name":"ToParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ToParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a \"to\" parsing error.\r\n            Used with <c>String.Format(...)</c>, <c>{0}</c> is replaced by Label property, <c>{1}</c> name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ToParsingErrorMessage"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ShowClearButton\">\r\n            <summary>\r\n            Indicates whether the <i>Clear</i> button in dropdown calendar should be visible.<br />\r\n            Default is <c>true</c> (configurable in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"MinDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.MinDate\">\r\n            <summary>\r\n            First date selectable from the dropdown calendar.<br />\r\n            Default is <c>1.1.1900</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MinDate"}},{"Kind":"Components.Component","Name":"MaxDate","TypeName":"System.DateTime?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.MaxDate\">\r\n            <summary>\r\n            Last date selectable from the dropdown calendar.<br />\r\n            Default is <c>31.12.2099</c> (configurable from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime?","Common.PropertyName":"MaxDate"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.CalendarDateCustomizationProvider\">\r\n            <summary>\r\n            Allows customization of the dates in dropdown calendars.<br />\r\n            Default customization is configurable with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProvider"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"Havit.DateTimeRange","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.DateTimeRange","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.DateTimeRange>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<Havit.DateTimeRange>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::Havit.DateTimeRange>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":-418831140,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputDateRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":1205994570,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.LabelTemplate","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":-1430108904,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputDateRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":-1342097876,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.HintTemplate","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":601393286,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputDateRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":210044953,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange.ChipTemplate","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":1674164500,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1\">\r\n            <summary>\r\n            Numeric input.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputNumber\">https://havit.blazor.eu/components/HxInputNumber</see>\r\n            </summary>\r\n            <remarks>\r\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber\" />.\r\n            </remarks>\r\n            <typeparam name=\"TValue\">Supported values: <c>byte (Byte), sbyte (SByte), short (Int16), ushort(UInt16), int (Int32), uint(UInt32), long (Int64), ulong(UInt64), float (Single), double (Double) and decimal (Decimal)</c>.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\r\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\r\n            </summary>\r\n            <remarks>\r\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\r\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\r\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\r\n            Feel free to set the InputMode on your own as needed.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\">\r\n            <summary>\r\n            Gets or sets the number of decimal digits.\r\n            Can be used only for floating point types, for integer types throws exception (for values other than 0).\r\n            When not set, 2 decimal digits are used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Decimals"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":1963118810,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1\">\r\n            <summary>\r\n            Numeric input.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputNumber\">https://havit.blazor.eu/components/HxInputNumber</see>\r\n            </summary>\r\n            <remarks>\r\n            Defaults located in separate non-generic type <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber\" />.\r\n            </remarks>\r\n            <typeparam name=\"TValue\">Supported values: <c>byte (Byte), sbyte (SByte), short (Int16), ushort(UInt16), int (Int32), uint(UInt32), long (Int64), ulong(UInt64), float (Single), double (Double) and decimal (Decimal)</c>.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\r\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\r\n            </summary>\r\n            <remarks>\r\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\r\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\r\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\r\n            Feel free to set the InputMode on your own as needed.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\">\r\n            <summary>\r\n            Gets or sets the number of decimal digits.\r\n            Can be used only for floating point types, for integer types throws exception (for values other than 0).\r\n            When not set, 2 decimal digits are used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Decimals"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":-782356369,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":355536766,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":88901513,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":1400527147,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":558880754,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":1428698120,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":880780098,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":-1587659984,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":-1675072784,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":345567020,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":1829365656,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputPercent`1\">\r\n            <summary>\r\n            Numeric input in percentages with value normalization (0% = 0, 100% = 1.0).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputPercent\">https://havit.blazor.eu/components/HxInputPercent</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputPercent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\r\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\r\n            </summary>\r\n            <remarks>\r\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\r\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\r\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\r\n            Feel free to set the InputMode on your own as needed.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\">\r\n            <summary>\r\n            Gets or sets the number of decimal digits.\r\n            Can be used only for floating point types, for integer types throws exception (for values other than 0).\r\n            When not set, 2 decimal digits are used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Decimals"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":169991311,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputPercent`1\">\r\n            <summary>\r\n            Numeric input in percentages with value normalization (0% = 0, 100% = 1.0).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputPercent\">https://havit.blazor.eu/components/HxInputPercent</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputNumberSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            Used with String.Format(...), {0} is replaced by Label property, {1} name of bounded property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            If not set (neither with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Settings\" /> nor <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber.Defaults\" />, i.e. <c>null</c>),\r\n            the <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Numeric\" />\twill be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> equal to <c>0</c>.\r\n            </summary>\r\n            <remarks>\r\n            We cannot set <see cref=\"F:Havit.Blazor.Components.Web.InputMode.Decimal\" /> for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\" /> greater that <c>0</c>\r\n            as the users with keyboard locale not matching the application locale won't be able to enter decimal point\r\n            (is <kbd>,</kbd> in some locales and <kbd>.</kbd> in others).<br />\r\n            Feel free to set the InputMode on your own as needed.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputNumber`1.Decimals\">\r\n            <summary>\r\n            Gets or sets the number of decimal digits.\r\n            Can be used only for floating point types, for integer types throws exception (for values other than 0).\r\n            When not set, 2 decimal digits are used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Decimals"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":886658744,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":-1893476462,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1753325879,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1233617104,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1687391258,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1012985271,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1771363535,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1508102703,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":-835402315,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1241562939,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":1503574101,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1\">\r\n            <summary>\r\n            Allows the user to select a number in a specified range using a slider.\r\n            </summary>\r\n            <typeparam name=\"TValue\">Supported values: <c>byte (Byte), sbyte (SByte), short (Int16), ushort(UInt16), int (Int32), uint(UInt32), long (Int64), ulong(UInt64), float (Single), double (Double) and decimal (Decimal)</c>.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputRangeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputRangeSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Step\">\r\n            <summary>\r\n            By default, <code>HxInputRange</code> snaps to integer values. To change this, you can specify a step value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Min\">\r\n            <summary>\r\n            Minimum value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Max\">\r\n            <summary>\r\n            Maximum value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"BindEvent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BindEvent?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.BindEvent\">\r\n            <summary>\r\n            Instructs whether the <c>Value</c> is going to be updated <c>oninput</c> (immediately), or <c>onchange</c> (usually <c>onmouseup</c>).<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.BindEvent.OnChange\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BindEvent?","Common.PropertyName":"BindEvent"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":229326493,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1\">\r\n            <summary>\r\n            Allows the user to select a number in a specified range using a slider.\r\n            </summary>\r\n            <typeparam name=\"TValue\">Supported values: <c>byte (Byte), sbyte (SByte), short (Int16), ushort(UInt16), int (Int32), uint(UInt32), long (Int64), ulong(UInt64), float (Single), double (Double) and decimal (Decimal)</c>.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputRangeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputRangeSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Step\">\r\n            <summary>\r\n            By default, <code>HxInputRange</code> snaps to integer values. To change this, you can specify a step value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Min\">\r\n            <summary>\r\n            Minimum value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.Max\">\r\n            <summary>\r\n            Maximum value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"BindEvent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BindEvent?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputRange`1.BindEvent\">\r\n            <summary>\r\n            Instructs whether the <c>Value</c> is going to be updated <c>oninput</c> (immediately), or <c>onchange</c> (usually <c>onmouseup</c>).<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.BindEvent.OnChange\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BindEvent?","Common.PropertyName":"BindEvent"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":929172664,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":1601088477,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.LabelTemplate","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":1179851149,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":-770024116,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.HintTemplate","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":-995907418,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":1798460738,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>.ChipTemplate","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":863955692,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputText\">\r\n            <summary>\r\n            Text input (also password, search, etc.)\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.InputType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Type\">\r\n            <summary>\r\n            Input type.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"MaxLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.MaxLength\">\r\n            <summary>\r\n            The maximum number of characters (UTF-16 code units) that the user can enter.<br />\r\n            If parameter value isn't specified, <see cref=\"T:System.ComponentModel.DataAnnotations.MaxLengthAttribute\" /> of the <c>Value</c> is checked and used.<br />\r\n            If not specified either, the user can enter an unlimited number of characters.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxLength"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            Default is <c>null</c> (not set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"BindEvent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BindEvent","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.BindEvent\">\r\n            <summary>\r\n            Gets or sets the behavior when the model is updated from then input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BindEvent","Common.PropertyName":"BindEvent"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":-426018047,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputText\">\r\n            <summary>\r\n            Text input (also password, search, etc.)\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.InputType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Type\">\r\n            <summary>\r\n            Input type.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"MaxLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.MaxLength\">\r\n            <summary>\r\n            The maximum number of characters (UTF-16 code units) that the user can enter.<br />\r\n            If parameter value isn't specified, <see cref=\"T:System.ComponentModel.DataAnnotations.MaxLengthAttribute\" /> of the <c>Value</c> is checked and used.<br />\r\n            If not specified either, the user can enter an unlimited number of characters.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxLength"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            Default is <c>null</c> (not set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"BindEvent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BindEvent","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.BindEvent\">\r\n            <summary>\r\n            Gets or sets the behavior when the model is updated from then input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BindEvent","Common.PropertyName":"BindEvent"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":-1570738714,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":-48411130,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":225990019,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":2096281520,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":-160417952,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":-1438967805,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.LabelTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":1494256076,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":543370313,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.HintTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":-747367977,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":-1416326110,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText.ChipTemplate","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":156800470,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/forms/floating-labels/#textareas\" target=\"_blank\">Textarea</see>.\r\n            To set a custom height, do not use the rows attribute. Instead, set an explicit height (either inline or via custom CSS).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputTextArea\">https://havit.blazor.eu/components/HxInputTextArea</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.InputType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Type\">\r\n            <summary>\r\n            Input type.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"MaxLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.MaxLength\">\r\n            <summary>\r\n            The maximum number of characters (UTF-16 code units) that the user can enter.<br />\r\n            If parameter value isn't specified, <see cref=\"T:System.ComponentModel.DataAnnotations.MaxLengthAttribute\" /> of the <c>Value</c> is checked and used.<br />\r\n            If not specified either, the user can enter an unlimited number of characters.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxLength"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            Default is <c>null</c> (not set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"BindEvent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BindEvent","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.BindEvent\">\r\n            <summary>\r\n            Gets or sets the behavior when the model is updated from then input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BindEvent","Common.PropertyName":"BindEvent"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":640034361,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/forms/floating-labels/#textareas\" target=\"_blank\">Textarea</see>.\r\n            To set a custom height, do not use the rows attribute. Instead, set an explicit height (either inline or via custom CSS).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputTextArea\">https://havit.blazor.eu/components/HxInputTextArea</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.InputType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Type\">\r\n            <summary>\r\n            Input type.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputText.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTextSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"MaxLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.MaxLength\">\r\n            <summary>\r\n            The maximum number of characters (UTF-16 code units) that the user can enter.<br />\r\n            If parameter value isn't specified, <see cref=\"T:System.ComponentModel.DataAnnotations.MaxLengthAttribute\" /> of the <c>Value</c> is checked and used.<br />\r\n            If not specified either, the user can enter an unlimited number of characters.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MaxLength"}},{"Kind":"Components.Component","Name":"InputMode","TypeName":"Havit.Blazor.Components.Web.InputMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputMode\">\r\n            <summary>\r\n            Hint to browsers as to the type of virtual keyboard configuration to use when editing.<br />\r\n            Default is <c>null</c> (not set).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.InputMode?","Common.PropertyName":"InputMode"}},{"Kind":"Components.Component","Name":"BindEvent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BindEvent","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.BindEvent\">\r\n            <summary>\r\n            Gets or sets the behavior when the model is updated from then input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BindEvent","Common.PropertyName":"BindEvent"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.Placeholder\">\r\n            <summary>\r\n            Placeholder for the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTextBase.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.LabelType\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":-1046161604,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":1462506963,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":-1179799065,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":-1350627908,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":1408767706,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":524892429,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.LabelTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":1593272273,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":-1502104642,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.HintTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":934182041,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":709633746,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea.ChipTemplate","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":-376636678,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2\">\r\n            <summary>\r\n            MultiSelect. Unlike a normal select, multiselect allows the user to select multiple options at once.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxMultiSelect\">https://havit.blazor.eu/components/HxMultiSelect</see>\r\n            </summary>\r\n            <typeparam name=\"TValue\">Type of values.</typeparam>\r\n            <typeparam name=\"TItem\">Type of items.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.MultiSelectSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.MultiSelectSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.<br />\r\n            When not set, <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.<br />\r\n            Not required when <c>TValue</c> is same as <c>TItem</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"SortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.SortKeySelector\">\r\n            <summary>\r\n            Selects value for items sorting. When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.TextSelector\" /> property will be used.<br />\r\n            If you need complex sorting, pre-sort data manually or create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"SortKeySelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.AutoSort\">\r\n            <summary>\r\n            When set to <c>false</c>, items will no longer be sorted.<br />\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"EmptyText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.EmptyText\">\r\n            <summary>\r\n            Text to display when the selection is empty (the <c>Value</c> property is <c>null</c> or empty).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"EmptyText"}},{"Kind":"Components.Component","Name":"NullDataText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.NullDataText\">\r\n            <summary>\r\n            Text to display when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.Data\" /> is <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullDataText"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputText\">\r\n            <summary>\r\n            Text to display in the input (default is a list of selected values).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputText"}},{"Kind":"Components.Component","Name":"InputTextSelector","TypeName":"System.Func<System.Collections.Generic.IEnumerable<TItem>, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputTextSelector\">\r\n            <summary>\r\n            Function to build the text to be displayed in the input from selected items (default is a list of selected values).\r\n            </summary>\r\n            <remarks>Currently does not affect the chip being generated. Override <c>RenderChipValue()</c> method to influence the chip.</remarks>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<global::System.Collections.Generic.IEnumerable<TItem>, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"InputTextSelector"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<TValue>>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Collections.Generic.List<TValue>>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":1492268713,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2\">\r\n            <summary>\r\n            MultiSelect. Unlike a normal select, multiselect allows the user to select multiple options at once.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxMultiSelect\">https://havit.blazor.eu/components/HxMultiSelect</see>\r\n            </summary>\r\n            <typeparam name=\"TValue\">Type of values.</typeparam>\r\n            <typeparam name=\"TItem\">Type of items.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.MultiSelectSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.MultiSelectSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.<br />\r\n            When not set, <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.<br />\r\n            Not required when <c>TValue</c> is same as <c>TItem</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"SortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.SortKeySelector\">\r\n            <summary>\r\n            Selects value for items sorting. When not set, <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.TextSelector\" /> property will be used.<br />\r\n            If you need complex sorting, pre-sort data manually or create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"SortKeySelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.AutoSort\">\r\n            <summary>\r\n            When set to <c>false</c>, items will no longer be sorted.<br />\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"EmptyText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.EmptyText\">\r\n            <summary>\r\n            Text to display when the selection is empty (the <c>Value</c> property is <c>null</c> or empty).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"EmptyText"}},{"Kind":"Components.Component","Name":"NullDataText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.NullDataText\">\r\n            <summary>\r\n            Text to display when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.Data\" /> is <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullDataText"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputText\">\r\n            <summary>\r\n            Text to display in the input (default is a list of selected values).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputText"}},{"Kind":"Components.Component","Name":"InputTextSelector","TypeName":"System.Func<System.Collections.Generic.IEnumerable<TItem>, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputTextSelector\">\r\n            <summary>\r\n            Function to build the text to be displayed in the input from selected items (default is a list of selected values).\r\n            </summary>\r\n            <remarks>Currently does not affect the chip being generated. Override <c>RenderChipValue()</c> method to influence the chip.</remarks>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<global::System.Collections.Generic.IEnumerable<TItem>, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"InputTextSelector"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<TValue>>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Collections.Generic.List<TValue>>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-1790463316,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-123240733,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":1519815779,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-179899513,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":1890255175,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":295611617,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-2088529428,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-577351550,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":924210752,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-538170327,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-1524496519,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2\">\r\n            <summary>\r\n            Data-based list of radio buttons. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxRadioButtonList\">https://havit.blazor.eu/components/HxRadioButtonList</see>\r\n            </summary>\r\n            <typeparam name=\"TValue\">Type of value.</typeparam>\r\n            <typeparam name=\"TItem\">Type of items.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxRadioButtonList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"ItemValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when <c>TValue</c> is same as <c>TItem</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemValueSelector"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"ItemTextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\">\r\n            <summary>\r\n            Selects text to display from item. Also used for chip text.\r\n            When not set <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTemplate\">\r\n            <summary>\r\n            Gets html to display from item.\r\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\" /> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"ItemSortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemSortKeySelector\">\r\n            <summary>\r\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\" /> property when not set.\r\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemSortKeySelector"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for underlying radio-buttons (wrapping <c>div</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for underlying radio-buttons (wrapping <c>div</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemInputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemInputCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the <c>input</c> element of underlying radio-buttons.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemInputCssClass"}},{"Kind":"Components.Component","Name":"ItemInputCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemInputCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the <c>input</c> element of underlying radio-button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemInputCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemTextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the underlying radio-buttons.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemTextCssClass"}},{"Kind":"Components.Component","Name":"ItemTextCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the underlying radio-buttons.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextCssClassSelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.AutoSort\">\r\n            <summary>\r\n            When <c>true</c>, items are sorted before displaying in select.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2.Inline\">\r\n            <summary>\r\n            Allows grouping radios on the same horizontal row by rendering them inline. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.RadioButtonListSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.RadioButtonListSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":925606303,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2\">\r\n            <summary>\r\n            Data-based list of radio buttons. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxRadioButtonList\">https://havit.blazor.eu/components/HxRadioButtonList</see>\r\n            </summary>\r\n            <typeparam name=\"TValue\">Type of value.</typeparam>\r\n            <typeparam name=\"TItem\">Type of items.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"ItemValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when <c>TValue</c> is same as <c>TItem</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemValueSelector"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"ItemTextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\">\r\n            <summary>\r\n            Selects text to display from item. Also used for chip text.\r\n            When not set <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTemplate\">\r\n            <summary>\r\n            Gets html to display from item.\r\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\" /> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"ItemSortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemSortKeySelector\">\r\n            <summary>\r\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\" /> property when not set.\r\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemSortKeySelector"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for underlying radio-buttons (wrapping <c>div</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for underlying radio-buttons (wrapping <c>div</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemInputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemInputCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the <c>input</c> element of underlying radio-buttons.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemInputCssClass"}},{"Kind":"Components.Component","Name":"ItemInputCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemInputCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the <c>input</c> element of underlying radio-button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemInputCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemTextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the underlying radio-buttons.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemTextCssClass"}},{"Kind":"Components.Component","Name":"ItemTextCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextCssClassSelector\">\r\n            <summary>\r\n            Additional CSS class(es) for the text of the underlying radio-buttons.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextCssClassSelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.AutoSort\">\r\n            <summary>\r\n            When <c>true</c>, items are sorted before displaying in select.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2.Inline\">\r\n            <summary>\r\n            Allows grouping radios on the same horizontal row by rendering them inline. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.RadioButtonListSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonListBase`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputDate.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.RadioButtonListSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-1425968640,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTemplate\">\r\n            <summary>\r\n            Gets html to display from item.\r\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\" /> is used.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxRadioButtonList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-448293722,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTemplate\">\r\n            <summary>\r\n            Gets html to display from item.\r\n            When not set <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList`2.ItemTextSelector\" /> is used.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":56389005,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxRadioButtonList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-2085210757,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-1816281023,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxRadioButtonList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-1804323686,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-432122012,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxRadioButtonList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-802999092,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":527034004,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2\">\r\n            <summary>\r\n            Select - DropDownList - single-item picker. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSelect\">https://havit.blazor.eu/components/HxSelect</see>\r\n            </summary>\r\n            <typeparam name=\"TValue\">Type of value.</typeparam>\r\n            <typeparam name=\"TItem\">Type of items.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Nullable","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Nullable\">\r\n            <summary>\r\n            Indicates whether <c>null</c> is a valid value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Nullable"}},{"Kind":"Components.Component","Name":"NullText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.NullText\">\r\n            <summary>\r\n            Text to display for <c>null</c> value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullText"}},{"Kind":"Components.Component","Name":"NullDataText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.NullDataText\">\r\n            <summary>\r\n            Text to display when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Data\" /> is <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullDataText"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when <c>TValueType</c> is same as <c>TItemTime</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"SortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.SortKeySelector\">\r\n            <summary>\r\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.TextSelector\" /> property when not set.\r\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"SortKeySelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.AutoSort\">\r\n            <summary>\r\n            When <c>true</c>, items are sorted before displaying in select.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SelectSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SelectSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":407476436,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2\">\r\n            <summary>\r\n            Select - DropDownList - single-item picker. Consider creating custom picker derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSelect\">https://havit.blazor.eu/components/HxSelect</see>\r\n            </summary>\r\n            <typeparam name=\"TValue\">Type of value.</typeparam>\r\n            <typeparam name=\"TItem\">Type of items.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Nullable","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Nullable\">\r\n            <summary>\r\n            Indicates whether <c>null</c> is a valid value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Nullable"}},{"Kind":"Components.Component","Name":"NullText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.NullText\">\r\n            <summary>\r\n            Text to display for <c>null</c> value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullText"}},{"Kind":"Components.Component","Name":"NullDataText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.NullDataText\">\r\n            <summary>\r\n            Text to display when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Data\" /> is <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullDataText"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when <c>TValueType</c> is same as <c>TItemTime</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.Data\">\r\n            <summary>\r\n            Items to display. \r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set <c>ToString()</c> is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"SortKeySelector","TypeName":"System.Func<TItem, System.IComparable>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.SortKeySelector\">\r\n            <summary>\r\n            Selects value to sort items. Uses <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.TextSelector\" /> property when not set.\r\n            When complex sorting required, sort data manually and don't let sort them by this component. Alternatively create a custom comparable property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.IComparable>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"SortKeySelector"}},{"Kind":"Components.Component","Name":"AutoSort","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect`2.AutoSort\">\r\n            <summary>\r\n            When <c>true</c>, items are sorted before displaying in select.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AutoSort"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SelectSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelect.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SelectSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSelectBase`2.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-1864715499,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-1099096611,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":1218167544,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-360768634,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBaseWithInputGroups`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-1354345125,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-1129977032,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.LabelTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":1232630875,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-782501374,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.HintTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-975200841,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":152589975,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSelect"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>.ChipTemplate","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-1176953051,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSwitch\">\r\n            <summary>\r\n            Switch input.<br />\r\n            (Replaces the former <c>HxInputSwitch</c> component which was dropped in v4.0.0.)<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSwitch\">https://havit.blazor.eu/components/HxSwitch</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Text\">\r\n            <summary>\r\n            Text to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TextTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TextTemplate"}},{"Kind":"Components.Component","Name":"TextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextCssClass\">\r\n            <summary>\r\n            CSS class to apply to the text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TextCssClass"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Inline\">\r\n            <summary>\r\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\t\t\r\n            Works only when there is no label, no hint and no validation message.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Reverse","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Reverse\">\r\n            <summary>\r\n            Put the checkbox on the opposite side - first text, then checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Reverse"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":-1512795704,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSwitch\">\r\n            <summary>\r\n            Switch input.<br />\r\n            (Replaces the former <c>HxInputSwitch</c> component which was dropped in v4.0.0.)<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSwitch\">https://havit.blazor.eu/components/HxSwitch</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CheckboxSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Text\">\r\n            <summary>\r\n            Text to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TextTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TextTemplate"}},{"Kind":"Components.Component","Name":"TextCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextCssClass\">\r\n            <summary>\r\n            CSS class to apply to the text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TextCssClass"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Inline\">\r\n            <summary>\r\n            Allows grouping checkboxes on the same horizontal row by rendering them inline. Default is <c>false</c>.\t\t\r\n            Works only when there is no label, no hint and no validation message.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Reverse","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.Reverse\">\r\n            <summary>\r\n            Put the checkbox on the opposite side - first text, then checkbox.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Reverse"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":-1584008621,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.TextTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextTemplate","ParentTag":"HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.TextTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":-143759742,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.TextTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCheckbox.TextTemplate\">\r\n            <summary>\r\n            Content to display next to the checkbox.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.TextTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":647101009,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.LabelTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":-67249295,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.LabelTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":73876720,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.HintTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":-1175353921,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.HintTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":57365110,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.ChipTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":-1350578077,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch.ChipTemplate","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":1239347614,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.EditContext\" />.<br />\r\n            Reimplementation of Blazor <see cref=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\" /> as <see href=\"https://getbootstrap.com/docs/5.3/forms/validation/\">Bootstrap 5 validation</see>.<br />\r\n            Used by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" /> and derived components.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxValidationMessage\">https://havit.blazor.eu/components/HxValidationMessage</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.EditContext\">\r\n            <summary>\r\n            EditContext. For exceptional use where EditContext is not used as a CascadingParameter.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"For"}},{"Kind":"Components.Component","Name":"ForFieldName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ForFieldName"}},{"Kind":"Components.Component","Name":"ForFieldNames","TypeName":"System.String[]","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String[]","Common.PropertyName":"ForFieldNames"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.Mode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","Common.PropertyName":"Mode"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxValidationMessage"}},{"HashCode":318368718,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.EditContext\" />.<br />\r\n            Reimplementation of Blazor <see cref=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\" /> as <see href=\"https://getbootstrap.com/docs/5.3/forms/validation/\">Bootstrap 5 validation</see>.<br />\r\n            Used by <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" /> and derived components.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxValidationMessage\">https://havit.blazor.eu/components/HxValidationMessage</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.EditContext\">\r\n            <summary>\r\n            EditContext. For exceptional use where EditContext is not used as a CascadingParameter.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"For"}},{"Kind":"Components.Component","Name":"ForFieldName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ForFieldName"}},{"Kind":"Components.Component","Name":"ForFieldNames","TypeName":"System.String[]","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldNames\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            Mutual exclusive with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.For\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.ForFieldName\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String[]","Common.PropertyName":"ForFieldNames"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage`1.Mode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","Common.PropertyName":"Mode"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxValidationMessage<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxValidationMessage"}},{"HashCode":-1239734464,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1\">\r\n            <summary>\r\n            A search input component witch automatic suggestions, initial dropdown template and free-text queries support.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSearchBox\">https://havit.blazor.eu/components/HxSearchBox</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\"></typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSearchBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SearchBoxSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SearchBoxSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SearchBoxDataProviderDelegate<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DataProvider\">\r\n            <summary>\r\n            Method (delegate) which provides data of the suggestions.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SearchBoxDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Enabled\">\r\n            <summary>\r\n            Allows you to disable the input. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"TextQuery","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.TextQuery\">\r\n            <summary>\r\n            Text written by the user (input text).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TextQuery"}},{"Kind":"Components.Component","Name":"TextQueryChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"TextQueryChanged"}},{"Kind":"Components.Component","Name":"OnTextQueryTriggered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.OnTextQueryTriggered\">\r\n            <summary>\r\n            Raised, when the enter key is pressed or when the text-query item is selected in the dropdown menu.\r\n            (Does not trigger when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\" /> is <c>false</c>.)\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnTextQueryTriggered"}},{"Kind":"Components.Component","Name":"OnItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.OnItemSelected\">\r\n            <summary>\r\n            Occurs, when any of suggested items (other than plain text-query) is selected.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnItemSelected"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Placeholder\">\r\n            <summary>\r\n            Placeholder text for the search input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"ItemTitleSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemTitleSelector\">\r\n            <summary>\r\n            Selector to display item title from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTitleSelector"}},{"Kind":"Components.Component","Name":"ItemSubtitleSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemSubtitleSelector\">\r\n            <summary>\r\n            Selector to display item subtitle from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemSubtitleSelector"}},{"Kind":"Components.Component","Name":"ItemIconSelector","TypeName":"System.Func<TItem, Havit.Blazor.Components.Web.IconBase>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemIconSelector\">\r\n            <summary>\r\n            Selector to display icon from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::Havit.Blazor.Components.Web.IconBase>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemIconSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"TextQueryItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.TextQueryItemTemplate\">\r\n            <summary>\r\n            Template for the text-query item content (requires <c><see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\" />=\"true\"</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.String>","Common.PropertyName":"TextQueryItemTemplate"}},{"Kind":"Components.Component","Name":"NotFoundTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.NotFoundTemplate\">\r\n            <summary>\r\n            Rendered when the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DataProvider\" /> doesn't return any data.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NotFoundTemplate"}},{"Kind":"Components.Component","Name":"DefaultContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DefaultContentTemplate\">\r\n            <summary>\r\n            Rendered when no input is entered (i.e. initial state).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"DefaultContentTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.CssClass\">\r\n            <summary>\r\n            Additional css classes for the dropdown.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemCssClass\">\r\n            <summary>\r\n            Additional CSS classes for the items in the dropdown menu.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputCssClass\">\r\n            <summary>\r\n            Additional CSS classes for the search box input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"SearchIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.SearchIcon\">\r\n            <summary>\r\n            Icon of the input, when no text is written.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SearchIcon"}},{"Kind":"Components.Component","Name":"ClearIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ClearIcon\">\r\n            <summary>\r\n            Icon of the input, when text is written allowing the user to clear the text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ClearIcon"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DropdownOffset\">\r\n            <summary>\r\n            Offset between the dropdown and the input.\r\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Label\">\r\n            <summary>\r\n            Label of the input field.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.LabelType\">\r\n            <summary>\r\n            Label type of the input field.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputSize\">\r\n            <summary>\r\n            Input size of the input field.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"MinimumLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.MinimumLength\">\r\n            <summary>\r\n            Minimum length to call the data provider (display any results). Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MinimumLength"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Delay\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300</c> ms.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"AllowTextQuery","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\">\r\n            <summary>\r\n            Indicates whether text-query mode is enabled (accepts free text in addition to suggested items).<br />\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllowTextQuery"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":651849474,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1\">\r\n            <summary>\r\n            A search input component witch automatic suggestions, initial dropdown template and free-text queries support.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSearchBox\">https://havit.blazor.eu/components/HxSearchBox</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\"></typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SearchBoxSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SearchBoxSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SearchBoxDataProviderDelegate<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DataProvider\">\r\n            <summary>\r\n            Method (delegate) which provides data of the suggestions.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SearchBoxDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Enabled\">\r\n            <summary>\r\n            Allows you to disable the input. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"TextQuery","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.TextQuery\">\r\n            <summary>\r\n            Text written by the user (input text).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TextQuery"}},{"Kind":"Components.Component","Name":"TextQueryChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"TextQueryChanged"}},{"Kind":"Components.Component","Name":"OnTextQueryTriggered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.OnTextQueryTriggered\">\r\n            <summary>\r\n            Raised, when the enter key is pressed or when the text-query item is selected in the dropdown menu.\r\n            (Does not trigger when <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\" /> is <c>false</c>.)\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnTextQueryTriggered"}},{"Kind":"Components.Component","Name":"OnItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.OnItemSelected\">\r\n            <summary>\r\n            Occurs, when any of suggested items (other than plain text-query) is selected.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnItemSelected"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Placeholder\">\r\n            <summary>\r\n            Placeholder text for the search input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"ItemTitleSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemTitleSelector\">\r\n            <summary>\r\n            Selector to display item title from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTitleSelector"}},{"Kind":"Components.Component","Name":"ItemSubtitleSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemSubtitleSelector\">\r\n            <summary>\r\n            Selector to display item subtitle from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemSubtitleSelector"}},{"Kind":"Components.Component","Name":"ItemIconSelector","TypeName":"System.Func<TItem, Havit.Blazor.Components.Web.IconBase>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemIconSelector\">\r\n            <summary>\r\n            Selector to display icon from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::Havit.Blazor.Components.Web.IconBase>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemIconSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"TextQueryItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.TextQueryItemTemplate\">\r\n            <summary>\r\n            Template for the text-query item content (requires <c><see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\" />=\"true\"</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.String>","Common.PropertyName":"TextQueryItemTemplate"}},{"Kind":"Components.Component","Name":"NotFoundTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.NotFoundTemplate\">\r\n            <summary>\r\n            Rendered when the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DataProvider\" /> doesn't return any data.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NotFoundTemplate"}},{"Kind":"Components.Component","Name":"DefaultContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DefaultContentTemplate\">\r\n            <summary>\r\n            Rendered when no input is entered (i.e. initial state).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"DefaultContentTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.CssClass\">\r\n            <summary>\r\n            Additional css classes for the dropdown.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemCssClass\">\r\n            <summary>\r\n            Additional CSS classes for the items in the dropdown menu.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputCssClass\">\r\n            <summary>\r\n            Additional CSS classes for the search box input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"SearchIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.SearchIcon\">\r\n            <summary>\r\n            Icon of the input, when no text is written.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SearchIcon"}},{"Kind":"Components.Component","Name":"ClearIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ClearIcon\">\r\n            <summary>\r\n            Icon of the input, when text is written allowing the user to clear the text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ClearIcon"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DropdownOffset\">\r\n            <summary>\r\n            Offset between the dropdown and the input.\r\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Label\">\r\n            <summary>\r\n            Label of the input field.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.LabelType\">\r\n            <summary>\r\n            Label type of the input field.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputSize\">\r\n            <summary>\r\n            Input size of the input field.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"MinimumLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.MinimumLength\">\r\n            <summary>\r\n            Minimum length to call the data provider (display any results). Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"MinimumLength"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.Delay\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300</c> ms.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"AllowTextQuery","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\">\r\n            <summary>\r\n            Indicates whether text-query mode is enabled (accepts free text in addition to suggested items).<br />\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllowTextQuery"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":-1979820527,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxSearchBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":-839474,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":-520700897,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.TextQueryItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.TextQueryItemTemplate\">\r\n            <summary>\r\n            Template for the text-query item content (requires <c><see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\" />=\"true\"</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextQueryItemTemplate","ParentTag":"HxSearchBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TextQueryItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.TextQueryItemTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":-529624362,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.TextQueryItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.TextQueryItemTemplate\">\r\n            <summary>\r\n            Template for the text-query item content (requires <c><see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.AllowTextQuery\" />=\"true\"</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextQueryItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TextQueryItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.TextQueryItemTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":1842170295,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.NotFoundTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.NotFoundTemplate\">\r\n            <summary>\r\n            Rendered when the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DataProvider\" /> doesn't return any data.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFoundTemplate","ParentTag":"HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.NotFoundTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":850488521,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.NotFoundTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.NotFoundTemplate\">\r\n            <summary>\r\n            Rendered when the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DataProvider\" /> doesn't return any data.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFoundTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.NotFoundTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":-652283881,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.DefaultContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DefaultContentTemplate\">\r\n            <summary>\r\n            Rendered when no input is entered (i.e. initial state).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DefaultContentTemplate","ParentTag":"HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.DefaultContentTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":-484934939,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.DefaultContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.DefaultContentTemplate\">\r\n            <summary>\r\n            Rendered when no input is entered (i.e. initial state).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DefaultContentTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.DefaultContentTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":208913908,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":-1483988358,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":130822538,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":1411961387,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSearchBox`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.<br />\r\n            Hides the search icon when used!\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":2143995904,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1\">\r\n            <summary>\r\n            Column for displaying the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu\" /> in the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxContextMenuGridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Order","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.Order\">\r\n            <summary>\r\n            The order (display index) of the column.\r\n            Columns are displayed in the order of this property.\r\n            Columns with the same value are displayed in the order of appearance in the code (when the columns are not conditionally displayed using @if).\r\n            </summary>\r\n            <exception cref=\"T:System.ArgumentException\">Value is <c>Int32.MinValue</c> or <c>Int32.MaxValue</c>.</exception>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Order"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ItemCssClass\">\r\n            <summary>\r\n            Returns item css class (not dependent on data).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ItemCssClassSelector\">\r\n            <summary>\r\n            Returns item css class for the specific date item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ChildContent\">\r\n            <summary>\r\n            Context menu template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxContextMenuGridColumn"}},{"HashCode":284696239,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1\">\r\n            <summary>\r\n            Column for displaying the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxContextMenu\" /> in the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Order","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.Order\">\r\n            <summary>\r\n            The order (display index) of the column.\r\n            Columns are displayed in the order of this property.\r\n            Columns with the same value are displayed in the order of appearance in the code (when the columns are not conditionally displayed using @if).\r\n            </summary>\r\n            <exception cref=\"T:System.ArgumentException\">Value is <c>Int32.MinValue</c> or <c>Int32.MaxValue</c>.</exception>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Order"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ItemCssClass\">\r\n            <summary>\r\n            Returns item css class (not dependent on data).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ItemCssClassSelector\">\r\n            <summary>\r\n            Returns item css class for the specific date item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ChildContent\">\r\n            <summary>\r\n            Context menu template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxContextMenuGridColumn"}},{"HashCode":1618051200,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ChildContent\">\r\n            <summary>\r\n            Context menu template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxContextMenuGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>.ChildContent","Common.TypeNameIdentifier":"HxContextMenuGridColumn"}},{"HashCode":-1690076511,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn`1.ChildContent\">\r\n            <summary>\r\n            Context menu template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxContextMenuGridColumn<TItem>.ChildContent","Common.TypeNameIdentifier":"HxContextMenuGridColumn"}},{"HashCode":452533470,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1\">\r\n            <summary>\r\n            Grid to display tabular data from data source. Includes support for client-side and server-side paging &amp; sorting (or virtualized scrolling as needed).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxGrid\">https://havit.blazor.eu/components/HxGrid</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\">Type of row data item.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxGrid"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"True","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridDataProviderDelegate<TItem>","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.DataProvider\">\r\n            <summary>\r\n            Data provider for items to render.<br />\r\n            The provider should always return instance of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.GridDataProviderResult`1\" />, <c>null</c> is not allowed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"SelectionEnabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectionEnabled\">\r\n            <summary>\r\n            Indicates whether single data item selection is enabled. \r\n            Selection is performed by click on the item row.\r\n            Can be combined with multiselection.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SelectionEnabled"}},{"Kind":"Components.Component","Name":"MultiSelectionEnabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.MultiSelectionEnabled\">\r\n            <summary>\r\n            Indicates whether multi data items selection is enabled. \r\n            Selection is performed by checkboxes in the first column.\r\n            Can be combined with (single) selection.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"MultiSelectionEnabled"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Columns\">\r\n            <summary>\r\n            Columns template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"LoadingDataTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\">\r\n            <summary>\r\n            Template to render when \"first\" data are loading.\r\n            This template is not used when loading data for sorting or paging operations.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LoadingDataTemplate"}},{"Kind":"Components.Component","Name":"EmptyDataTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.EmptyDataTemplate\">\r\n            <summary>\r\n            Template to render when there is empty Data (but not <c>null</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyDataTemplate"}},{"Kind":"Components.Component","Name":"LoadMoreTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridLoadMoreTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreTemplate\">\r\n            <summary>\r\n            Template to render \"load more\" button (or other UI element).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridLoadMoreTemplateContext>","Common.PropertyName":"LoadMoreTemplate"}},{"Kind":"Components.Component","Name":"SelectedDataItem","TypeName":"TItem","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItem\">\r\n            <summary>\r\n            Selected data item.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TItem","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItem"}},{"Kind":"Components.Component","Name":"SelectedDataItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItemChanged\">\r\n            <summary>\r\n            Event fires when selected data item changes.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItemChanged"}},{"Kind":"Components.Component","Name":"SelectedDataItems","TypeName":"System.Collections.Generic.HashSet<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItems\">\r\n            <summary>\r\n            Selected data items.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.HashSet<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItems"}},{"Kind":"Components.Component","Name":"SelectedDataItemsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItemsChanged\">\r\n            <summary>\r\n            Event fires when selected data items changes.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.HashSet<TItem>>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItemsChanged"}},{"Kind":"Components.Component","Name":"ContentNavigationMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ContentNavigationMode\">\r\n            <summary>\r\n            Strategy how data are displayed in the grid (and loaded to the grid).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode?","Common.PropertyName":"ContentNavigationMode"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.PageSize\">\r\n            <summary>\r\n            Page size for <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.Pagination\" />, <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.LoadMore\" /> and <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.PaginationAndLoadMore\" />. Set <c>0</c> to disable paging.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"PageSize"}},{"Kind":"Components.Component","Name":"ShowFooterWhenEmptyData","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ShowFooterWhenEmptyData\">\r\n            <summary>\r\n            Indicates whether to render footer when data are empty.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowFooterWhenEmptyData"}},{"Kind":"Components.Component","Name":"PagerSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.PagerSettings\">\r\n            <summary>\r\n            Pager settings.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Common.PropertyName":"PagerSettings"}},{"Kind":"Components.Component","Name":"LoadMoreButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreButtonText\">\r\n            <summary>\r\n            Text of the \"Load more\" navigation button (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.LoadMore\" />).\r\n            (Default is taken from the localization resources.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LoadMoreButtonText"}},{"Kind":"Components.Component","Name":"LoadMoreButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreButtonSettings\">\r\n            <summary>\r\n            Settings for the \"Load more\" navigation button (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.LoadMore\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"LoadMoreButtonSettings"}},{"Kind":"Components.Component","Name":"CurrentUserState","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridUserState","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.CurrentUserState\">\r\n            <summary>\r\n            Current grid state (page, sorting).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridUserState","Common.PropertyName":"CurrentUserState"}},{"Kind":"Components.Component","Name":"CurrentUserStateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.CurrentUserStateChanged\">\r\n            <summary>\r\n            Event fires when grid state is changed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.GridUserState>","Common.PropertyName":"CurrentUserStateChanged"}},{"Kind":"Components.Component","Name":"InProgress","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.InProgress\">\r\n            <summary>\r\n            Indicates when the grid should be displayed as \"in progress\".\r\n            When not set (<c>null</c>), grid progress is automatically tracked when retrieving data by data provider.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"InProgress"}},{"Kind":"Components.Component","Name":"TableContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.TableContainerCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with <c>div</c> element wrapping the main <c>table</c> (<see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPager\" /> is not wrapped in this <c>div</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TableContainerCssClass"}},{"Kind":"Components.Component","Name":"TableCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.TableCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with main <c>table</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TableCssClass"}},{"Kind":"Components.Component","Name":"HeaderRowCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.HeaderRowCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with header <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderRowCssClass"}},{"Kind":"Components.Component","Name":"ItemRowCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ItemRowCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with data <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemRowCssClass"}},{"Kind":"Components.Component","Name":"ItemRowHeight","TypeName":"System.Single?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ItemRowHeight\">\r\n            <summary>\r\n            Height of the item row used for infinite scroll calculations.\r\n            Default value is <c>41px</c> (row-height of regular table-row within Bootstrap 5 default theme).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single?","Common.PropertyName":"ItemRowHeight"}},{"Kind":"Components.Component","Name":"ItemRowCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ItemRowCssClassSelector\">\r\n            <summary>\r\n            Returns custom CSS class to render with data <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemRowCssClassSelector"}},{"Kind":"Components.Component","Name":"FooterRowCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.FooterRowCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with footer <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterRowCssClass"}},{"Kind":"Components.Component","Name":"PlaceholdersRowCount","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.PlaceholdersRowCount\">\r\n            <summary>\r\n            Number of rows with placeholders to render.\r\n            When value is zero, placeholders are not used.\r\n            When <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\" /> is set, placeholder are not used.\r\n            Default is <c>5</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"PlaceholdersRowCount"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.OverscanCount\">\r\n            <summary>\r\n            Infinite scroll:\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.<br />\r\n            Default is <c>50</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"OverscanCount"}},{"Kind":"Components.Component","Name":"Responsive","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Responsive\">\r\n            <summary>\r\n            Allows the table to be scrolled horizontally with ease across any breakpoint (adds the <c>table-responsive</c> class to the table).<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Responsive"}},{"Kind":"Components.Component","Name":"Hover","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Hover\">\r\n            <summary>\r\n            Enables hover state on table rows within a <c>&lt;tbody&gt;</c> (sets the <c>table-hover</c> class on the table).<br />\r\n            If not set (default) the table is hoverable when selection is enabled.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Hover"}},{"Kind":"Components.Component","Name":"Striped","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Striped\">\r\n            <summary>\r\n            Adds zebra-striping to any table row within the <c>&lt;tbody&gt;</c> (alternating rows).<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Striped"}},{"Kind":"Components.Component","Name":"SortAscendingIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SortAscendingIcon\">\r\n            <summary>\r\n            Icon to indicate ascending sort direction in column header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SortAscendingIcon"}},{"Kind":"Components.Component","Name":"SortDescendingIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SortDescendingIcon\">\r\n            <summary>\r\n            Icon to indicate descending sort direction in column header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SortDescendingIcon"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":983855677,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1\">\r\n            <summary>\r\n            Grid to display tabular data from data source. Includes support for client-side and server-side paging &amp; sorting (or virtualized scrolling as needed).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxGrid\">https://havit.blazor.eu/components/HxGrid</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\">Type of row data item.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"True","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridDataProviderDelegate<TItem>","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.DataProvider\">\r\n            <summary>\r\n            Data provider for items to render.<br />\r\n            The provider should always return instance of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.GridDataProviderResult`1\" />, <c>null</c> is not allowed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"SelectionEnabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectionEnabled\">\r\n            <summary>\r\n            Indicates whether single data item selection is enabled. \r\n            Selection is performed by click on the item row.\r\n            Can be combined with multiselection.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SelectionEnabled"}},{"Kind":"Components.Component","Name":"MultiSelectionEnabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.MultiSelectionEnabled\">\r\n            <summary>\r\n            Indicates whether multi data items selection is enabled. \r\n            Selection is performed by checkboxes in the first column.\r\n            Can be combined with (single) selection.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"MultiSelectionEnabled"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Columns\">\r\n            <summary>\r\n            Columns template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"LoadingDataTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\">\r\n            <summary>\r\n            Template to render when \"first\" data are loading.\r\n            This template is not used when loading data for sorting or paging operations.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LoadingDataTemplate"}},{"Kind":"Components.Component","Name":"EmptyDataTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.EmptyDataTemplate\">\r\n            <summary>\r\n            Template to render when there is empty Data (but not <c>null</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyDataTemplate"}},{"Kind":"Components.Component","Name":"LoadMoreTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridLoadMoreTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreTemplate\">\r\n            <summary>\r\n            Template to render \"load more\" button (or other UI element).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridLoadMoreTemplateContext>","Common.PropertyName":"LoadMoreTemplate"}},{"Kind":"Components.Component","Name":"SelectedDataItem","TypeName":"TItem","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItem\">\r\n            <summary>\r\n            Selected data item.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TItem","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItem"}},{"Kind":"Components.Component","Name":"SelectedDataItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItemChanged\">\r\n            <summary>\r\n            Event fires when selected data item changes.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItemChanged"}},{"Kind":"Components.Component","Name":"SelectedDataItems","TypeName":"System.Collections.Generic.HashSet<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItems\">\r\n            <summary>\r\n            Selected data items.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.HashSet<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItems"}},{"Kind":"Components.Component","Name":"SelectedDataItemsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SelectedDataItemsChanged\">\r\n            <summary>\r\n            Event fires when selected data items changes.\r\n            Intended for data binding.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.HashSet<TItem>>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItemsChanged"}},{"Kind":"Components.Component","Name":"ContentNavigationMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ContentNavigationMode\">\r\n            <summary>\r\n            Strategy how data are displayed in the grid (and loaded to the grid).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode?","Common.PropertyName":"ContentNavigationMode"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.PageSize\">\r\n            <summary>\r\n            Page size for <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.Pagination\" />, <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.LoadMore\" /> and <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.PaginationAndLoadMore\" />. Set <c>0</c> to disable paging.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"PageSize"}},{"Kind":"Components.Component","Name":"ShowFooterWhenEmptyData","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ShowFooterWhenEmptyData\">\r\n            <summary>\r\n            Indicates whether to render footer when data are empty.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowFooterWhenEmptyData"}},{"Kind":"Components.Component","Name":"PagerSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.PagerSettings\">\r\n            <summary>\r\n            Pager settings.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Common.PropertyName":"PagerSettings"}},{"Kind":"Components.Component","Name":"LoadMoreButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreButtonText\">\r\n            <summary>\r\n            Text of the \"Load more\" navigation button (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.LoadMore\" />).\r\n            (Default is taken from the localization resources.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LoadMoreButtonText"}},{"Kind":"Components.Component","Name":"LoadMoreButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreButtonSettings\">\r\n            <summary>\r\n            Settings for the \"Load more\" navigation button (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.GridContentNavigationMode.LoadMore\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"LoadMoreButtonSettings"}},{"Kind":"Components.Component","Name":"CurrentUserState","TypeName":"Havit.Blazor.Components.Web.Bootstrap.GridUserState","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.CurrentUserState\">\r\n            <summary>\r\n            Current grid state (page, sorting).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.GridUserState","Common.PropertyName":"CurrentUserState"}},{"Kind":"Components.Component","Name":"CurrentUserStateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.CurrentUserStateChanged\">\r\n            <summary>\r\n            Event fires when grid state is changed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.GridUserState>","Common.PropertyName":"CurrentUserStateChanged"}},{"Kind":"Components.Component","Name":"InProgress","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.InProgress\">\r\n            <summary>\r\n            Indicates when the grid should be displayed as \"in progress\".\r\n            When not set (<c>null</c>), grid progress is automatically tracked when retrieving data by data provider.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"InProgress"}},{"Kind":"Components.Component","Name":"TableContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.TableContainerCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with <c>div</c> element wrapping the main <c>table</c> (<see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPager\" /> is not wrapped in this <c>div</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TableContainerCssClass"}},{"Kind":"Components.Component","Name":"TableCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.TableCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with main <c>table</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TableCssClass"}},{"Kind":"Components.Component","Name":"HeaderRowCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.HeaderRowCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with header <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderRowCssClass"}},{"Kind":"Components.Component","Name":"ItemRowCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ItemRowCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with data <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemRowCssClass"}},{"Kind":"Components.Component","Name":"ItemRowHeight","TypeName":"System.Single?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ItemRowHeight\">\r\n            <summary>\r\n            Height of the item row used for infinite scroll calculations.\r\n            Default value is <c>41px</c> (row-height of regular table-row within Bootstrap 5 default theme).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single?","Common.PropertyName":"ItemRowHeight"}},{"Kind":"Components.Component","Name":"ItemRowCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.ItemRowCssClassSelector\">\r\n            <summary>\r\n            Returns custom CSS class to render with data <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemRowCssClassSelector"}},{"Kind":"Components.Component","Name":"FooterRowCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.FooterRowCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with footer <c>tr</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterRowCssClass"}},{"Kind":"Components.Component","Name":"PlaceholdersRowCount","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.PlaceholdersRowCount\">\r\n            <summary>\r\n            Number of rows with placeholders to render.\r\n            When value is zero, placeholders are not used.\r\n            When <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\" /> is set, placeholder are not used.\r\n            Default is <c>5</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"PlaceholdersRowCount"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.OverscanCount\">\r\n            <summary>\r\n            Infinite scroll:\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.<br />\r\n            Default is <c>50</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"OverscanCount"}},{"Kind":"Components.Component","Name":"Responsive","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Responsive\">\r\n            <summary>\r\n            Allows the table to be scrolled horizontally with ease across any breakpoint (adds the <c>table-responsive</c> class to the table).<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Responsive"}},{"Kind":"Components.Component","Name":"Hover","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Hover\">\r\n            <summary>\r\n            Enables hover state on table rows within a <c>&lt;tbody&gt;</c> (sets the <c>table-hover</c> class on the table).<br />\r\n            If not set (default) the table is hoverable when selection is enabled.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Hover"}},{"Kind":"Components.Component","Name":"Striped","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Striped\">\r\n            <summary>\r\n            Adds zebra-striping to any table row within the <c>&lt;tbody&gt;</c> (alternating rows).<br />\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Striped"}},{"Kind":"Components.Component","Name":"SortAscendingIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SortAscendingIcon\">\r\n            <summary>\r\n            Icon to indicate ascending sort direction in column header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SortAscendingIcon"}},{"Kind":"Components.Component","Name":"SortDescendingIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.SortDescendingIcon\">\r\n            <summary>\r\n            Icon to indicate descending sort direction in column header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SortDescendingIcon"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":-355675664,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Columns\">\r\n            <summary>\r\n            Columns template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Columns","ParentTag":"HxGrid"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":-225652837,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.Columns\">\r\n            <summary>\r\n            Columns template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Columns","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGrid"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.Columns","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":782474542,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\">\r\n            <summary>\r\n            Template to render when \"first\" data are loading.\r\n            This template is not used when loading data for sorting or paging operations.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LoadingDataTemplate","ParentTag":"HxGrid"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":979372824,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadingDataTemplate\">\r\n            <summary>\r\n            Template to render when \"first\" data are loading.\r\n            This template is not used when loading data for sorting or paging operations.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LoadingDataTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGrid"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadingDataTemplate","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":-221851627,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.EmptyDataTemplate\">\r\n            <summary>\r\n            Template to render when there is empty Data (but not <c>null</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyDataTemplate","ParentTag":"HxGrid"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":-1258397117,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.EmptyDataTemplate\">\r\n            <summary>\r\n            Template to render when there is empty Data (but not <c>null</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyDataTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGrid"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.EmptyDataTemplate","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":408943822,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadMoreTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreTemplate\">\r\n            <summary>\r\n            Template to render \"load more\" button (or other UI element).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LoadMoreTemplate","ParentTag":"HxGrid"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LoadMoreTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadMoreTemplate","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":1140173201,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadMoreTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGrid`1.LoadMoreTemplate\">\r\n            <summary>\r\n            Template to render \"load more\" button (or other UI element).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LoadMoreTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGrid"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LoadMoreTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>.LoadMoreTemplate","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":428944581,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1\">\r\n            <summary>\r\n            Grid column.\r\n            </summary>\r\n            <typeparam name=\"TItem\">Grid row data type.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.Id\">\r\n            <summary>\r\n            Column unique identifier.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.Visible\">\r\n            <summary>\r\n            Indicates whether the column is visible (otherwise the column is hidden).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Order","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.Order\">\r\n            <summary>\r\n            The order (display index) of the column.\r\n            Columns are displayed in the order of this property.\r\n            Columns with the same value are displayed in the order of appearance in the code (when the columns are not conditionally displayed using @if).\r\n            </summary>\r\n            <exception cref=\"T:System.ArgumentException\">Value is <c>Int32.MinValue</c> or <c>Int32.MaxValue</c>.</exception>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Order"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderText\">\r\n            <summary>\r\n            Header cell text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridHeaderCellContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderTemplate\">\r\n            <summary>\r\n            Header cell template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridHeaderCellContext>","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderCssClass\">\r\n            <summary>\r\n            Header cell css class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"ItemTextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemTextSelector\">\r\n            <summary>\r\n            Returns text for the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemTemplate\">\r\n            <summary>\r\n            Returns template for the item.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemCssClass\">\r\n            <summary>\r\n            Returns item css class (not dependent on data).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemCssClassSelector\">\r\n            <summary>\r\n            Returns item css class for the specific date item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"PlaceholderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridPlaceholderCellContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.PlaceholderTemplate\">\r\n            <summary>\r\n            Placeholder cell template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridPlaceholderCellContext>","Common.PropertyName":"PlaceholderTemplate"}},{"Kind":"Components.Component","Name":"FooterText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterText\">\r\n            <summary>\r\n            Footer cell text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterText"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridFooterCellContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterTemplate\">\r\n            <summary>\r\n            Footer cell template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridFooterCellContext>","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterCssClass\">\r\n            <summary>\r\n            Footer cell css class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"SortString","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.SortString\">\r\n            <summary>\r\n            Returns column sorting as string.\r\n            Use to set sorting as a string, ie. to get value to pass to backend.\r\n            Ignored for client-side sorting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"SortString"}},{"Kind":"Components.Component","Name":"SortKeySelector","TypeName":"System.Linq.Expressions.Expression<System.Func<TItem, System.IComparable>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.SortKeySelector\">\r\n            <summary>\r\n            Returns column sorting expression for automatic grid sorting.\r\n            To be used for \"strongly typed\" setting of sorting, required for client-side sorting.\r\n            Must be <see cref=\"T:System.IComparable\" />.\r\n            Sorting of the column does not support multiple expressions. Create an artificial property and implement <see cref=\"T:System.IComparable\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TItem, global::System.IComparable>>","Components.GenericTyped":"True","Common.PropertyName":"SortKeySelector"}},{"Kind":"Components.Component","Name":"SortDirection","TypeName":"Havit.Collections.SortDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.SortDirection\">\r\n            <summary>\r\n            Initial sorting direction. Default is <see cref=\"F:Havit.Collections.SortDirection.Ascending\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Collections.SortDirection","Common.PropertyName":"SortDirection"}},{"Kind":"Components.Component","Name":"IsDefaultSortColumn","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.IsDefaultSortColumn\">\r\n            <summary>\r\n            Indicates the sorting on the column is default (primary) on the grid.\r\n            Set <c>true</c> for the column which is to be used for default sorting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"IsDefaultSortColumn"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":-1423545260,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1\">\r\n            <summary>\r\n            Grid column.\r\n            </summary>\r\n            <typeparam name=\"TItem\">Grid row data type.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.Id\">\r\n            <summary>\r\n            Column unique identifier.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.Visible\">\r\n            <summary>\r\n            Indicates whether the column is visible (otherwise the column is hidden).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Order","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.Order\">\r\n            <summary>\r\n            The order (display index) of the column.\r\n            Columns are displayed in the order of this property.\r\n            Columns with the same value are displayed in the order of appearance in the code (when the columns are not conditionally displayed using @if).\r\n            </summary>\r\n            <exception cref=\"T:System.ArgumentException\">Value is <c>Int32.MinValue</c> or <c>Int32.MaxValue</c>.</exception>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Order"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderText\">\r\n            <summary>\r\n            Header cell text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridHeaderCellContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderTemplate\">\r\n            <summary>\r\n            Header cell template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridHeaderCellContext>","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderCssClass\">\r\n            <summary>\r\n            Header cell css class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"ItemTextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemTextSelector\">\r\n            <summary>\r\n            Returns text for the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemTemplate\">\r\n            <summary>\r\n            Returns template for the item.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemCssClass\">\r\n            <summary>\r\n            Returns item css class (not dependent on data).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemCssClassSelector\">\r\n            <summary>\r\n            Returns item css class for the specific date item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"PlaceholderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridPlaceholderCellContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.PlaceholderTemplate\">\r\n            <summary>\r\n            Placeholder cell template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridPlaceholderCellContext>","Common.PropertyName":"PlaceholderTemplate"}},{"Kind":"Components.Component","Name":"FooterText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterText\">\r\n            <summary>\r\n            Footer cell text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterText"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.GridFooterCellContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterTemplate\">\r\n            <summary>\r\n            Footer cell template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.GridFooterCellContext>","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterCssClass\">\r\n            <summary>\r\n            Footer cell css class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"SortString","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.SortString\">\r\n            <summary>\r\n            Returns column sorting as string.\r\n            Use to set sorting as a string, ie. to get value to pass to backend.\r\n            Ignored for client-side sorting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"SortString"}},{"Kind":"Components.Component","Name":"SortKeySelector","TypeName":"System.Linq.Expressions.Expression<System.Func<TItem, System.IComparable>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.SortKeySelector\">\r\n            <summary>\r\n            Returns column sorting expression for automatic grid sorting.\r\n            To be used for \"strongly typed\" setting of sorting, required for client-side sorting.\r\n            Must be <see cref=\"T:System.IComparable\" />.\r\n            Sorting of the column does not support multiple expressions. Create an artificial property and implement <see cref=\"T:System.IComparable\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TItem, global::System.IComparable>>","Components.GenericTyped":"True","Common.PropertyName":"SortKeySelector"}},{"Kind":"Components.Component","Name":"SortDirection","TypeName":"Havit.Collections.SortDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.SortDirection\">\r\n            <summary>\r\n            Initial sorting direction. Default is <see cref=\"F:Havit.Collections.SortDirection.Ascending\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Collections.SortDirection","Common.PropertyName":"SortDirection"}},{"Kind":"Components.Component","Name":"IsDefaultSortColumn","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.IsDefaultSortColumn\">\r\n            <summary>\r\n            Indicates the sorting on the column is default (primary) on the grid.\r\n            Set <c>true</c> for the column which is to be used for default sorting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"IsDefaultSortColumn"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":-939366090,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderTemplate\">\r\n            <summary>\r\n            Header cell template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":-379624413,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.HeaderTemplate\">\r\n            <summary>\r\n            Header cell template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.HeaderTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":1494517275,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemTemplate\">\r\n            <summary>\r\n            Returns template for the item.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":-1198085279,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.ItemTemplate\">\r\n            <summary>\r\n            Returns template for the item.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":-203678866,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.PlaceholderTemplate\">\r\n            <summary>\r\n            Placeholder cell template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PlaceholderTemplate","ParentTag":"HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'PlaceholderTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":929656749,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.PlaceholderTemplate\">\r\n            <summary>\r\n            Placeholder cell template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PlaceholderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'PlaceholderTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.PlaceholderTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":1176991097,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterTemplate\">\r\n            <summary>\r\n            Footer cell template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":-553036971,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxGridColumn`1.FooterTemplate\">\r\n            <summary>\r\n            Footer cell template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridColumn<TItem>.FooterTemplate","Common.TypeNameIdentifier":"HxGridColumn"}},{"HashCode":-662779792,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxGridEmptyDataTemplateDefaultContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent","Common.TypeNameIdentifier":"HxGridEmptyDataTemplateDefaultContent"}},{"HashCode":-418167586,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent","Common.TypeNameIdentifier":"HxGridEmptyDataTemplateDefaultContent"}},{"HashCode":1388668452,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxGridEmptyDataTemplateDefaultContent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent.ChildContent","Common.TypeNameIdentifier":"HxGridEmptyDataTemplateDefaultContent"}},{"HashCode":-206299560,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGridEmptyDataTemplateDefaultContent.ChildContent","Common.TypeNameIdentifier":"HxGridEmptyDataTemplateDefaultContent"}},{"HashCode":680782790,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPager","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPager\">\r\n            <summary>\r\n            Pager.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxPager\">https://havit.blazor.eu/components/HxPager</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxPager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"TotalPages","TypeName":"System.Int32","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.TotalPages\">\r\n            <summary>\r\n            Total pages of data items.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"TotalPages"}},{"Kind":"Components.Component","Name":"CurrentPageIndex","TypeName":"System.Int32","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.CurrentPageIndex\">\r\n            <summary>\r\n            Current page index. Zero based.\r\n            Displayed numbers start with 1 which is page index 0.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"CurrentPageIndex"}},{"Kind":"Components.Component","Name":"CurrentPageIndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.CurrentPageIndexChanged\">\r\n            <summary>\r\n            Event raised where page index is changed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32>","Common.PropertyName":"CurrentPageIndexChanged"}},{"Kind":"Components.Component","Name":"FirstPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.FirstPageIcon\">\r\n            <summary>\r\n            Icon for the \"First page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"FirstPageIcon"}},{"Kind":"Components.Component","Name":"LastPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.LastPageIcon\">\r\n            <summary>\r\n            Icon for the \"Last page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"LastPageIcon"}},{"Kind":"Components.Component","Name":"PreviousPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.PreviousPageIcon\">\r\n            <summary>\r\n            Icon for the \"Previous page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"PreviousPageIcon"}},{"Kind":"Components.Component","Name":"NextPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.NextPageIcon\">\r\n            <summary>\r\n            Icon for the \"Next page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"NextPageIcon"}},{"Kind":"Components.Component","Name":"NumericButtonsCount","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.NumericButtonsCount\">\r\n            <summary>\r\n            Count of numbers to display. Default value is 10.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"NumericButtonsCount"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPager","Common.TypeNameIdentifier":"HxPager"}},{"HashCode":-1126703096,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPager","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPager\">\r\n            <summary>\r\n            Pager.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxPager\">https://havit.blazor.eu/components/HxPager</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxPager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PagerSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"TotalPages","TypeName":"System.Int32","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.TotalPages\">\r\n            <summary>\r\n            Total pages of data items.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"TotalPages"}},{"Kind":"Components.Component","Name":"CurrentPageIndex","TypeName":"System.Int32","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.CurrentPageIndex\">\r\n            <summary>\r\n            Current page index. Zero based.\r\n            Displayed numbers start with 1 which is page index 0.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"CurrentPageIndex"}},{"Kind":"Components.Component","Name":"CurrentPageIndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.CurrentPageIndexChanged\">\r\n            <summary>\r\n            Event raised where page index is changed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32>","Common.PropertyName":"CurrentPageIndexChanged"}},{"Kind":"Components.Component","Name":"FirstPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.FirstPageIcon\">\r\n            <summary>\r\n            Icon for the \"First page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"FirstPageIcon"}},{"Kind":"Components.Component","Name":"LastPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.LastPageIcon\">\r\n            <summary>\r\n            Icon for the \"Last page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"LastPageIcon"}},{"Kind":"Components.Component","Name":"PreviousPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.PreviousPageIcon\">\r\n            <summary>\r\n            Icon for the \"Previous page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"PreviousPageIcon"}},{"Kind":"Components.Component","Name":"NextPageIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.NextPageIcon\">\r\n            <summary>\r\n            Icon for the \"Next page\" button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"NextPageIcon"}},{"Kind":"Components.Component","Name":"NumericButtonsCount","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.NumericButtonsCount\">\r\n            <summary>\r\n            Count of numbers to display. Default value is 10.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"NumericButtonsCount"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPager.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPager","Common.TypeNameIdentifier":"HxPager"}},{"HashCode":1425873357,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1\">\r\n            <summary>\r\n            Data presentation component composed of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" /> for data, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> for manual filtering and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList`1\" /> for pre-defined filters.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxListLayout\">https://havit.blazor.eu/components/HxListLayout</see>\r\n            </summary>\r\n            <typeparam name=\"TFilterModel\"></typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxListLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TFilterModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TFilterModel"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ListLayoutSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ListLayoutSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"TitleTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TitleTemplate"}},{"Kind":"Components.Component","Name":"NamedViewsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NamedViewsTemplate"}},{"Kind":"Components.Component","Name":"SearchTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"SearchTemplate"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TFilterModel>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TFilterModel>","Components.GenericTyped":"True","Common.PropertyName":"FilterTemplate"}},{"Kind":"Components.Component","Name":"FilterModel","TypeName":"TFilterModel","Metadata":{"Common.GloballyQualifiedTypeName":"TFilterModel","Components.GenericTyped":"True","Common.PropertyName":"FilterModel"}},{"Kind":"Components.Component","Name":"FilterModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Components.GenericTyped":"True","Common.PropertyName":"FilterModelChanged"}},{"Kind":"Components.Component","Name":"DataTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"DataTemplate"}},{"Kind":"Components.Component","Name":"DetailTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"DetailTemplate"}},{"Kind":"Components.Component","Name":"CommandsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"CommandsTemplate"}},{"Kind":"Components.Component","Name":"CardSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.CardSettings\">\r\n            <summary>\r\n            Settings for the wrapping <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCard\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardSettings","Common.PropertyName":"CardSettings"}},{"Kind":"Components.Component","Name":"FilterOpenButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.FilterOpenButtonSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> opening filtering offcanvas.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"FilterOpenButtonSettings"}},{"Kind":"Components.Component","Name":"FilterSubmitButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.FilterSubmitButtonSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> submitting the filter.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"FilterSubmitButtonSettings"}},{"Kind":"Components.Component","Name":"FilterOffcanvasSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.FilterOffcanvasSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> with the filter.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Common.PropertyName":"FilterOffcanvasSettings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the wrapping <c>div</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":1919519128,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1\">\r\n            <summary>\r\n            Data presentation component composed of <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxGrid\" /> for data, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> for manual filtering and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList`1\" /> for pre-defined filters.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxListLayout\">https://havit.blazor.eu/components/HxListLayout</see>\r\n            </summary>\r\n            <typeparam name=\"TFilterModel\"></typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TFilterModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TFilterModel"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ListLayoutSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ListLayoutSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"TitleTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TitleTemplate"}},{"Kind":"Components.Component","Name":"NamedViewsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NamedViewsTemplate"}},{"Kind":"Components.Component","Name":"SearchTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"SearchTemplate"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TFilterModel>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TFilterModel>","Components.GenericTyped":"True","Common.PropertyName":"FilterTemplate"}},{"Kind":"Components.Component","Name":"FilterModel","TypeName":"TFilterModel","Metadata":{"Common.GloballyQualifiedTypeName":"TFilterModel","Components.GenericTyped":"True","Common.PropertyName":"FilterModel"}},{"Kind":"Components.Component","Name":"FilterModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Components.GenericTyped":"True","Common.PropertyName":"FilterModelChanged"}},{"Kind":"Components.Component","Name":"DataTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"DataTemplate"}},{"Kind":"Components.Component","Name":"DetailTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"DetailTemplate"}},{"Kind":"Components.Component","Name":"CommandsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"CommandsTemplate"}},{"Kind":"Components.Component","Name":"CardSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.CardSettings\">\r\n            <summary>\r\n            Settings for the wrapping <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCard\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardSettings","Common.PropertyName":"CardSettings"}},{"Kind":"Components.Component","Name":"FilterOpenButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.FilterOpenButtonSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> opening filtering offcanvas.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"FilterOpenButtonSettings"}},{"Kind":"Components.Component","Name":"FilterSubmitButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.FilterSubmitButtonSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> submitting the filter.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"FilterSubmitButtonSettings"}},{"Kind":"Components.Component","Name":"FilterOffcanvasSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.FilterOffcanvasSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\" /> with the filter.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Common.PropertyName":"FilterOffcanvasSettings"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the wrapping <c>div</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":1166514754,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TitleTemplate","ParentTag":"HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":-1072879281,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TitleTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.TitleTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":1213164573,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NamedViewsTemplate","ParentTag":"HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":627393864,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NamedViewsTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.NamedViewsTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":-763912470,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SearchTemplate","ParentTag":"HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":-873685796,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SearchTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.SearchTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":601087993,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"HxListLayout"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":935398436,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.FilterTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":1566549776,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataTemplate","ParentTag":"HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":-1358714736,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DataTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":1700820555,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailTemplate","ParentTag":"HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":1285147697,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.DetailTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":706547081,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CommandsTemplate","ParentTag":"HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":432787232,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CommandsTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>.CommandsTemplate","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":2133273492,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/list-group/\">Bootstrap 5 List group</see> component.<br />\r\n            List groups are a flexible and powerful component for displaying a series of content.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxListGroup\">https://havit.blazor.eu/components/HxListGroup</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxListGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent\">\r\n            <summary>\r\n            Content of the list group component.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Flush","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Flush\">\r\n            <summary>\r\n            If set to <c>true</c>, removes borders and rounded corners to render list group items edge-to-edge.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Flush"}},{"Kind":"Components.Component","Name":"Numbered","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Numbered\">\r\n            <summary>\r\n            Set to <c>true</c> to opt into numbered list group items. The list group changes from an unordered list to an ordered list.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Numbered"}},{"Kind":"Components.Component","Name":"Horizontal","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ListGroupHorizontal","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Horizontal\">\r\n            <summary>\r\n            Changes the layout of the list group items from vertical to horizontal. Cannot be combined with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Flush\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ListGroupHorizontal","Common.PropertyName":"Horizontal"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup","Common.TypeNameIdentifier":"HxListGroup"}},{"HashCode":395545622,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/list-group/\">Bootstrap 5 List group</see> component.<br />\r\n            List groups are a flexible and powerful component for displaying a series of content.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxListGroup\">https://havit.blazor.eu/components/HxListGroup</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent\">\r\n            <summary>\r\n            Content of the list group component.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Flush","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Flush\">\r\n            <summary>\r\n            If set to <c>true</c>, removes borders and rounded corners to render list group items edge-to-edge.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Flush"}},{"Kind":"Components.Component","Name":"Numbered","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Numbered\">\r\n            <summary>\r\n            Set to <c>true</c> to opt into numbered list group items. The list group changes from an unordered list to an ordered list.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Numbered"}},{"Kind":"Components.Component","Name":"Horizontal","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ListGroupHorizontal","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Horizontal\">\r\n            <summary>\r\n            Changes the layout of the list group items from vertical to horizontal. Cannot be combined with <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.Flush\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ListGroupHorizontal","Common.PropertyName":"Horizontal"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup","Common.TypeNameIdentifier":"HxListGroup"}},{"HashCode":246351791,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent\">\r\n            <summary>\r\n            Content of the list group component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxListGroup"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent","Common.TypeNameIdentifier":"HxListGroup"}},{"HashCode":-2038953943,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent\">\r\n            <summary>\r\n            Content of the list group component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroup.ChildContent","Common.TypeNameIdentifier":"HxListGroup"}},{"HashCode":-1568211107,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem\">\r\n            <summary>\r\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxListGroupItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent\">\r\n            <summary>\r\n            Content of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.Active\">\r\n            <summary>\r\n            Indicates the current active selection.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.Enabled\">\r\n            <summary>\r\n            Make the item appear disabled by setting to <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.Color\">\r\n            <summary>\r\n            Color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.OnClick\">\r\n            <summary>\r\n            An event that is fired when the <c>HxListGroupItem</c> is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem","Common.TypeNameIdentifier":"HxListGroupItem"}},{"HashCode":2079341723,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem\">\r\n            <summary>\r\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroup\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent\">\r\n            <summary>\r\n            Content of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.Active\">\r\n            <summary>\r\n            Indicates the current active selection.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.Enabled\">\r\n            <summary>\r\n            Make the item appear disabled by setting to <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.Color\">\r\n            <summary>\r\n            Color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.OnClick\">\r\n            <summary>\r\n            An event that is fired when the <c>HxListGroupItem</c> is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem","Common.TypeNameIdentifier":"HxListGroupItem"}},{"HashCode":-2075261090,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent\">\r\n            <summary>\r\n            Content of the item.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxListGroupItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent","Common.TypeNameIdentifier":"HxListGroupItem"}},{"HashCode":1776581602,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent\">\r\n            <summary>\r\n            Content of the item.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItem.ChildContent","Common.TypeNameIdentifier":"HxListGroupItem"}},{"HashCode":-1683184192,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/list-group/#links-and-buttons\">Bootstrap 5 List group link item</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxListGroupItemNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Href\">\r\n            <summary>\r\n            Navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Text\">\r\n            <summary>\r\n            Text of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            You can set the value to <c>null</c> to disable the matching.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Active\">\r\n            <summary>\r\n            Indicates the current active selection.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink","Common.TypeNameIdentifier":"HxListGroupItemNavLink"}},{"HashCode":313987216,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/list-group/#links-and-buttons\">Bootstrap 5 List group link item</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Href\">\r\n            <summary>\r\n            Navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Text\">\r\n            <summary>\r\n            Text of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            You can set the value to <c>null</c> to disable the matching.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Active\">\r\n            <summary>\r\n            Indicates the current active selection.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink","Common.TypeNameIdentifier":"HxListGroupItemNavLink"}},{"HashCode":1108617541,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxListGroupItemNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent","Common.TypeNameIdentifier":"HxListGroupItemNavLink"}},{"HashCode":1806391997,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListGroupItemNavLink.ChildContent","Common.TypeNameIdentifier":"HxListGroupItemNavLink"}},{"HashCode":-1796060839,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox\">\r\n            <summary>\r\n            Component to display message-boxes.<br />\r\n            Usually used via <see cref=\"T:Havit.Blazor.Components.Web.HxMessageBoxService\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxMessageBox\">https://havit.blazor.eu/components/HxMessageBox</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxMessageBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.Title\">\r\n            <summary>\r\n            Title text (Header).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate\">\r\n            <summary>\r\n            Header template (Header).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.Text\">\r\n            <summary>\r\n            Content (body) text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate\">\r\n            <summary>\r\n            Body (content) template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether to show the close button.\r\n            Default is taken from the underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> (<c>true</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"Havit.Blazor.Components.Web.MessageBoxButtons","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.Buttons\">\r\n            <summary>\r\n            Buttons to show. Default is <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Ok\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.MessageBoxButtons","Common.PropertyName":"Buttons"}},{"Kind":"Components.Component","Name":"PrimaryButton","TypeName":"Havit.Blazor.Components.Web.MessageBoxButtons?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.PrimaryButton\">\r\n            <summary>\r\n            Primary button (if you want to override the default).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.MessageBoxButtons?","Common.PropertyName":"PrimaryButton"}},{"Kind":"Components.Component","Name":"CustomButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.CustomButtonText\">\r\n            <summary>\r\n            Text for <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Custom\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CustomButtonText"}},{"Kind":"Components.Component","Name":"PrimaryButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.PrimaryButtonSettings\">\r\n            <summary>\r\n            Settings for the dialog primary button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"PrimaryButtonSettings"}},{"Kind":"Components.Component","Name":"SecondaryButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.SecondaryButtonSettings\">\r\n            <summary>\r\n            Settings for dialog secondary button(s).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"SecondaryButtonSettings"}},{"Kind":"Components.Component","Name":"ModalSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.ModalSettings\">\r\n            <summary>\r\n            Settings for underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Common.PropertyName":"ModalSettings"}},{"Kind":"Components.Component","Name":"OnClosed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.MessageBoxButtons>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.OnClosed\">\r\n            <summary>\r\n            Raised when the message box gets closed. Returns the button clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.MessageBoxButtons>","Common.PropertyName":"OnClosed"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox","Common.TypeNameIdentifier":"HxMessageBox"}},{"HashCode":-1786239513,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox\">\r\n            <summary>\r\n            Component to display message-boxes.<br />\r\n            Usually used via <see cref=\"T:Havit.Blazor.Components.Web.HxMessageBoxService\" /> and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxMessageBox\">https://havit.blazor.eu/components/HxMessageBox</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.Title\">\r\n            <summary>\r\n            Title text (Header).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate\">\r\n            <summary>\r\n            Header template (Header).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.Text\">\r\n            <summary>\r\n            Content (body) text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate\">\r\n            <summary>\r\n            Body (content) template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether to show the close button.\r\n            Default is taken from the underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> (<c>true</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"Havit.Blazor.Components.Web.MessageBoxButtons","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.Buttons\">\r\n            <summary>\r\n            Buttons to show. Default is <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Ok\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.MessageBoxButtons","Common.PropertyName":"Buttons"}},{"Kind":"Components.Component","Name":"PrimaryButton","TypeName":"Havit.Blazor.Components.Web.MessageBoxButtons?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.PrimaryButton\">\r\n            <summary>\r\n            Primary button (if you want to override the default).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.MessageBoxButtons?","Common.PropertyName":"PrimaryButton"}},{"Kind":"Components.Component","Name":"CustomButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.CustomButtonText\">\r\n            <summary>\r\n            Text for <see cref=\"F:Havit.Blazor.Components.Web.MessageBoxButtons.Custom\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CustomButtonText"}},{"Kind":"Components.Component","Name":"PrimaryButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.PrimaryButtonSettings\">\r\n            <summary>\r\n            Settings for the dialog primary button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"PrimaryButtonSettings"}},{"Kind":"Components.Component","Name":"SecondaryButtonSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.SecondaryButtonSettings\">\r\n            <summary>\r\n            Settings for dialog secondary button(s).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"SecondaryButtonSettings"}},{"Kind":"Components.Component","Name":"ModalSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.ModalSettings\">\r\n            <summary>\r\n            Settings for underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Common.PropertyName":"ModalSettings"}},{"Kind":"Components.Component","Name":"OnClosed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.MessageBoxButtons>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.OnClosed\">\r\n            <summary>\r\n            Raised when the message box gets closed. Returns the button clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.MessageBoxButtons>","Common.PropertyName":"OnClosed"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox","Common.TypeNameIdentifier":"HxMessageBox"}},{"HashCode":-183608414,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate\">\r\n            <summary>\r\n            Header template (Header).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxMessageBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate","Common.TypeNameIdentifier":"HxMessageBox"}},{"HashCode":-816235289,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate\">\r\n            <summary>\r\n            Header template (Header).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.HeaderTemplate","Common.TypeNameIdentifier":"HxMessageBox"}},{"HashCode":-1581621646,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate\">\r\n            <summary>\r\n            Body (content) template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"HxMessageBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate","Common.TypeNameIdentifier":"HxMessageBox"}},{"HashCode":1594438231,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate\">\r\n            <summary>\r\n            Body (content) template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBox.BodyTemplate","Common.TypeNameIdentifier":"HxMessageBox"}},{"HashCode":-1530087892,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost\">\r\n            <summary>\r\n            Displays message boxes initiated through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessageBoxService\" />.\r\n            To be placed in root application component / main layout.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxMessageBoxHost"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost","Common.TypeNameIdentifier":"HxMessageBoxHost"}},{"HashCode":-510932099,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost\">\r\n            <summary>\r\n            Displays message boxes initiated through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessageBoxService\" />.\r\n            To be placed in root application component / main layout.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessageBoxHost","Common.TypeNameIdentifier":"HxMessageBoxHost"}},{"HashCode":-925064629,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\">\r\n            <summary>\r\n            Component to render modal dialog as a <see href=\"https://getbootstrap.com/docs/5.3/components/modal/\">Bootstrap Modal</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxModal\">https://havit.blazor.eu/components/HxModal</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxModal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Animated","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Animated\">\r\n            <summary>\r\n            For modals that simply appear rather than fade in to view, setting <c>false</c> removes the <c>.fade</c> class from your modal markup.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animated"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Title\">\r\n            <summary>\r\n            Title in modal header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate\">\r\n            <summary>\r\n            Body template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate\">\r\n            <summary>\r\n            Footer template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Size\">\r\n            <summary>\r\n            Size of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Fullscreen","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Fullscreen\">\r\n            <summary>\r\n            Fullscreen behavior of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen.Disabled\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen?","Common.PropertyName":"Fullscreen"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether the modal shows close button in header.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"CloseButtonIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.CloseButtonIcon\">\r\n            <summary>\r\n            Close icon to be used in header.\r\n            If set to <c>null</c>, Bootstrap default close-button will be used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CloseButtonIcon"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.CloseOnEscape\">\r\n            <summary>\r\n            Indicates whether the modal closes when escape key is pressed.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"CloseOnEscape"}},{"Kind":"Components.Component","Name":"Backdrop","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Backdrop\">\r\n            <summary>\r\n            Indicates whether to apply a backdrop on body while the modal is open.\r\n            If set to <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop.Static\" />, the modal cannot be closed by clicking on the backdrop.\r\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Defaults\" />) is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop.True\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop?","Common.PropertyName":"Backdrop"}},{"Kind":"Components.Component","Name":"Scrollable","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Scrollable\">\r\n            <summary>\r\n            Allows scrolling the modal body. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Scrollable"}},{"Kind":"Components.Component","Name":"Centered","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Centered\">\r\n            <summary>\r\n            Allows vertical centering of the modal.<br />\r\n            Default is <c>false</c> (horizontal only).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Centered"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.CssClass\">\r\n            <summary>\r\n            Additional CSS class for the main element (<c>div.modal</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DialogCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.DialogCssClass\">\r\n            <summary>\r\n            Additional CSS class for the dialog (<c>div.modal-dialog</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DialogCssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderCssClass\">\r\n            <summary>\r\n            Additional header CSS class (<c>div.modal-header</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyCssClass\">\r\n            <summary>\r\n            Additional body CSS class (<c>div.modal-body</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}},{"Kind":"Components.Component","Name":"ContentCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.ContentCssClass\">\r\n            <summary>\r\n            Additional content CSS class (<c>div.modal-content</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContentCssClass"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterCssClass\">\r\n            <summary>\r\n            Additional footer CSS class (<c>div.modal-footer</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"OnClosed","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.OnClosed\">\r\n            <summary>\r\n            This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).<br />\r\n            This can be caused by <see cref=\"M:Havit.Blazor.Components.Web.Bootstrap.HxModal.HideAsync\" />, close-button, <kbd>Esc</kbd> key or other interaction.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnClosed"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.OnShown\">\r\n            <summary>\r\n            This event is fired when an modal element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":1979898284,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxModal\">\r\n            <summary>\r\n            Component to render modal dialog as a <see href=\"https://getbootstrap.com/docs/5.3/components/modal/\">Bootstrap Modal</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxModal\">https://havit.blazor.eu/components/HxModal</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxModal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Animated","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Animated\">\r\n            <summary>\r\n            For modals that simply appear rather than fade in to view, setting <c>false</c> removes the <c>.fade</c> class from your modal markup.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animated"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Title\">\r\n            <summary>\r\n            Title in modal header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate\">\r\n            <summary>\r\n            Body template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate\">\r\n            <summary>\r\n            Footer template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Size\">\r\n            <summary>\r\n            Size of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Fullscreen","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Fullscreen\">\r\n            <summary>\r\n            Fullscreen behavior of the modal. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen.Disabled\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalFullscreen?","Common.PropertyName":"Fullscreen"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether the modal shows close button in header.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"CloseButtonIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.CloseButtonIcon\">\r\n            <summary>\r\n            Close icon to be used in header.\r\n            If set to <c>null</c>, Bootstrap default close-button will be used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CloseButtonIcon"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.CloseOnEscape\">\r\n            <summary>\r\n            Indicates whether the modal closes when escape key is pressed.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"CloseOnEscape"}},{"Kind":"Components.Component","Name":"Backdrop","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Backdrop\">\r\n            <summary>\r\n            Indicates whether to apply a backdrop on body while the modal is open.\r\n            If set to <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop.Static\" />, the modal cannot be closed by clicking on the backdrop.\r\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Defaults\" />) is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop.True\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ModalBackdrop?","Common.PropertyName":"Backdrop"}},{"Kind":"Components.Component","Name":"Scrollable","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Scrollable\">\r\n            <summary>\r\n            Allows scrolling the modal body. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Scrollable"}},{"Kind":"Components.Component","Name":"Centered","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.Centered\">\r\n            <summary>\r\n            Allows vertical centering of the modal.<br />\r\n            Default is <c>false</c> (horizontal only).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Centered"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.CssClass\">\r\n            <summary>\r\n            Additional CSS class for the main element (<c>div.modal</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DialogCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.DialogCssClass\">\r\n            <summary>\r\n            Additional CSS class for the dialog (<c>div.modal-dialog</c> element).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DialogCssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderCssClass\">\r\n            <summary>\r\n            Additional header CSS class (<c>div.modal-header</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyCssClass\">\r\n            <summary>\r\n            Additional body CSS class (<c>div.modal-body</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}},{"Kind":"Components.Component","Name":"ContentCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.ContentCssClass\">\r\n            <summary>\r\n            Additional content CSS class (<c>div.modal-content</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContentCssClass"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterCssClass\">\r\n            <summary>\r\n            Additional footer CSS class (<c>div.modal-footer</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"OnClosed","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.OnClosed\">\r\n            <summary>\r\n            This event is fired when the modal has finished being hidden from the user (will wait for CSS transitions to complete).<br />\r\n            This can be caused by <see cref=\"M:Havit.Blazor.Components.Web.Bootstrap.HxModal.HideAsync\" />, close-button, <kbd>Esc</kbd> key or other interaction.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnClosed"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.OnShown\">\r\n            <summary>\r\n            This event is fired when an modal element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":426095939,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxModal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":2110599904,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxModal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal.HeaderTemplate","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":-1562170938,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate\">\r\n            <summary>\r\n            Body template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"HxModal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":-1314100440,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate\">\r\n            <summary>\r\n            Body template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxModal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal.BodyTemplate","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":555867100,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate\">\r\n            <summary>\r\n            Footer template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"HxModal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":588219456,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate\">\r\n            <summary>\r\n            Footer template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxModal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxModal.FooterTemplate","Common.TypeNameIdentifier":"HxModal"}},{"HashCode":704020109,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList`1\">\r\n            <summary>\r\n            List of named-views for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNamedViewList\">https://havit.blazor.eu/components/HxNamedViewList</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNamedViewList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TFilterModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TFilterModel"}},{"Kind":"Components.Component","Name":"NamedViews","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Components.GenericTyped":"True","Common.PropertyName":"NamedViews"}},{"Kind":"Components.Component","Name":"FilterModel","TypeName":"TFilterModel","Metadata":{"Common.GloballyQualifiedTypeName":"TFilterModel","Components.GenericTyped":"True","Common.PropertyName":"FilterModel"}},{"Kind":"Components.Component","Name":"FilterModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Components.GenericTyped":"True","Common.PropertyName":"FilterModelChanged"}},{"Kind":"Components.Component","Name":"OnNamedViewSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Components.GenericTyped":"True","Common.PropertyName":"OnNamedViewSelected"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxNamedViewList"}},{"HashCode":-1924794783,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList`1\">\r\n            <summary>\r\n            List of named-views for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxListLayout`1\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNamedViewList\">https://havit.blazor.eu/components/HxNamedViewList</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TFilterModel","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TFilterModel for the Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TFilterModel"}},{"Kind":"Components.Component","Name":"NamedViews","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Components.GenericTyped":"True","Common.PropertyName":"NamedViews"}},{"Kind":"Components.Component","Name":"FilterModel","TypeName":"TFilterModel","Metadata":{"Common.GloballyQualifiedTypeName":"TFilterModel","Components.GenericTyped":"True","Common.PropertyName":"FilterModel"}},{"Kind":"Components.Component","Name":"FilterModelChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Components.GenericTyped":"True","Common.PropertyName":"FilterModelChanged"}},{"Kind":"Components.Component","Name":"OnNamedViewSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.NamedView<TFilterModel>>","Components.GenericTyped":"True","Common.PropertyName":"OnNamedViewSelected"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxNamedViewList"}},{"HashCode":-402615698,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation\">\r\n            <summary>\r\n            Temporarily (?) compensates Blazor deficiency in anchor-fragments (scrolling to <c>page#id</c> URLs). Supports navigation with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> component.\r\n            <see href=\"https://github.com/dotnet/aspnetcore/issues/8393\">GitHub Issue: Blazor 0.8.0: hash routing to named element #8393</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAnchorFragmentNavigation\">https://havit.blazor.eu/components/HxAnchorFragmentNavigation</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAnchorFragmentNavigation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Automation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation.Automation\">\r\n            <summary>\r\n            Level of automation.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode.Full\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode","Common.PropertyName":"Automation"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation","Common.TypeNameIdentifier":"HxAnchorFragmentNavigation"}},{"HashCode":256175089,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation\">\r\n            <summary>\r\n            Temporarily (?) compensates Blazor deficiency in anchor-fragments (scrolling to <c>page#id</c> URLs). Supports navigation with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> component.\r\n            <see href=\"https://github.com/dotnet/aspnetcore/issues/8393\">GitHub Issue: Blazor 0.8.0: hash routing to named element #8393</see>.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxAnchorFragmentNavigation\">https://havit.blazor.eu/components/HxAnchorFragmentNavigation</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Automation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation.Automation\">\r\n            <summary>\r\n            Level of automation.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode.Full\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AnchorFragmentNavigationAutomationMode","Common.PropertyName":"Automation"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAnchorFragmentNavigation","Common.TypeNameIdentifier":"HxAnchorFragmentNavigation"}},{"HashCode":463274418,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/breadcrumb/\">Bootstrap 5 Breadcrumb</see> component.<br />\r\n            Indicates the current page’s location within a navigational hierarchy.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxBreadcrumb\">https://havit.blazor.eu/components/HxBreadcrumb</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxBreadcrumb"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Divider","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.Divider\">\r\n            <summary>\r\n            Breadcrumb divider. Default is <c>/</c>.\r\n            Enter either a character (such as <c>&gt;</c>) or use an embedded SVG icon.\r\n            Disable the divider with <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Divider"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb","Common.TypeNameIdentifier":"HxBreadcrumb"}},{"HashCode":1529402927,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/breadcrumb/\">Bootstrap 5 Breadcrumb</see> component.<br />\r\n            Indicates the current page’s location within a navigational hierarchy.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxBreadcrumb\">https://havit.blazor.eu/components/HxBreadcrumb</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Divider","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.Divider\">\r\n            <summary>\r\n            Breadcrumb divider. Default is <c>/</c>.\r\n            Enter either a character (such as <c>&gt;</c>) or use an embedded SVG icon.\r\n            Disable the divider with <c>null</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Divider"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb","Common.TypeNameIdentifier":"HxBreadcrumb"}},{"HashCode":-1679190313,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxBreadcrumb"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent","Common.TypeNameIdentifier":"HxBreadcrumb"}},{"HashCode":-975991608,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent\">\r\n            <summary>\r\n            Child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb.ChildContent","Common.TypeNameIdentifier":"HxBreadcrumb"}},{"HashCode":-371036631,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem\">\r\n            <summary>\r\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxBreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.Text\">\r\n            <summary>\r\n            Item text (usually a name of the page).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.Href\">\r\n            <summary>\r\n            The link of the breadcrumb (a page where the user will be led on click).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.Active\">\r\n            <summary>\r\n            Determines whether the <c>HxBreadcrumbItem</c> is active (use for a page that the user is currently on).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent\">\r\n            <summary>\r\n            Item content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem","Common.TypeNameIdentifier":"HxBreadcrumbItem"}},{"HashCode":-601312198,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem\">\r\n            <summary>\r\n            Item for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumb\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.Text\">\r\n            <summary>\r\n            Item text (usually a name of the page).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.Href\">\r\n            <summary>\r\n            The link of the breadcrumb (a page where the user will be led on click).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Active","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.Active\">\r\n            <summary>\r\n            Determines whether the <c>HxBreadcrumbItem</c> is active (use for a page that the user is currently on).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Active"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent\">\r\n            <summary>\r\n            Item content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem","Common.TypeNameIdentifier":"HxBreadcrumbItem"}},{"HashCode":-1299107581,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent\">\r\n            <summary>\r\n            Item content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxBreadcrumbItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent","Common.TypeNameIdentifier":"HxBreadcrumbItem"}},{"HashCode":2011441589,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent\">\r\n            <summary>\r\n            Item content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxBreadcrumbItem.ChildContent","Common.TypeNameIdentifier":"HxBreadcrumbItem"}},{"HashCode":1491560039,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNav","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/navs-tabs/\">Bootstrap Nav</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNav\">https://havit.blazor.eu/components/HxNav</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNav"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Orientation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavOrientation","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.Orientation\">\r\n            <summary>\r\n            Orientation of the nav.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavOrientation.Horizontal\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavOrientation","Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"Variant","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavVariant","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.Variant\">\r\n            <summary>\r\n            The visual variant of the nav items.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Standard\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavVariant","Common.PropertyName":"Variant"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.Id\">\r\n            <summary>\r\n            ID of the nav which can be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.TargetId\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent\">\r\n            <summary>\r\n            Content of the nav.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNav","Common.TypeNameIdentifier":"HxNav"}},{"HashCode":1685805657,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNav","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/navs-tabs/\">Bootstrap Nav</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNav\">https://havit.blazor.eu/components/HxNav</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNav"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Orientation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavOrientation","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.Orientation\">\r\n            <summary>\r\n            Orientation of the nav.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavOrientation.Horizontal\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavOrientation","Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"Variant","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavVariant","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.Variant\">\r\n            <summary>\r\n            The visual variant of the nav items.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Standard\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavVariant","Common.PropertyName":"Variant"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.Id\">\r\n            <summary>\r\n            ID of the nav which can be used for <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.TargetId\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent\">\r\n            <summary>\r\n            Content of the nav.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNav","Common.TypeNameIdentifier":"HxNav"}},{"HashCode":-1579847397,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent\">\r\n            <summary>\r\n            Content of the nav.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNav"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent","Common.TypeNameIdentifier":"HxNav"}},{"HashCode":2028701187,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent\">\r\n            <summary>\r\n            Content of the nav.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxNav"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNav.ChildContent","Common.TypeNameIdentifier":"HxNav"}},{"HashCode":-655715318,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/\">Bootstrap 5 Navbar</see> component - responsive navigation header.<br />\r\n            With support for branding, navigation, and more, including support for the collapse plugin.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNavbar\">https://havit.blazor.eu/components/HxNavbar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNavbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.Color\">\r\n            <summary>\r\n            Color (background).\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"ColorMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ColorMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ColorMode\">\r\n            <summary>\r\n            Bootstrap theme (color mode) applied to the navbar.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ColorMode.Auto\" /> (none).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ColorMode","Common.PropertyName":"ColorMode"}},{"Kind":"Components.Component","Name":"Expand","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavbarExpand","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.Expand\">\r\n            <summary>\r\n            Responsive expand setting (breakpoint) for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavbarExpand.LargeUp\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavbarExpand","Common.PropertyName":"Expand"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.Id\">\r\n            <summary>\r\n            Element ID.\r\n            (Autogenerated GUID if not set explicitly.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ContainerCssClass\">\r\n            <summary>\r\n            Container CSS class. Default is <c>container-fluid</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent\">\r\n            <summary>\r\n            Content of the navbar.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar","Common.TypeNameIdentifier":"HxNavbar"}},{"HashCode":-1300584952,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/\">Bootstrap 5 Navbar</see> component - responsive navigation header.<br />\r\n            With support for branding, navigation, and more, including support for the collapse plugin.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNavbar\">https://havit.blazor.eu/components/HxNavbar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.Color\">\r\n            <summary>\r\n            Color (background).\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"ColorMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ColorMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ColorMode\">\r\n            <summary>\r\n            Bootstrap theme (color mode) applied to the navbar.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ColorMode.Auto\" /> (none).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ColorMode","Common.PropertyName":"ColorMode"}},{"Kind":"Components.Component","Name":"Expand","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavbarExpand","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.Expand\">\r\n            <summary>\r\n            Responsive expand setting (breakpoint) for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavbarExpand.LargeUp\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavbarExpand","Common.PropertyName":"Expand"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.Id\">\r\n            <summary>\r\n            Element ID.\r\n            (Autogenerated GUID if not set explicitly.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContainerCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ContainerCssClass\">\r\n            <summary>\r\n            Container CSS class. Default is <c>container-fluid</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContainerCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent\">\r\n            <summary>\r\n            Content of the navbar.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar","Common.TypeNameIdentifier":"HxNavbar"}},{"HashCode":1325423735,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent\">\r\n            <summary>\r\n            Content of the navbar.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNavbar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent","Common.TypeNameIdentifier":"HxNavbar"}},{"HashCode":-237596815,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent\">\r\n            <summary>\r\n            Content of the navbar.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbar.ChildContent","Common.TypeNameIdentifier":"HxNavbar"}},{"HashCode":1992941479,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/#brand\">navbar-brand</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNavbarBrand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.Href\">\r\n            <summary>\r\n            The navigation target. Default is <c>\"/\"</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent\">\r\n            <summary>\r\n            Content of the navbar-brand.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand","Common.TypeNameIdentifier":"HxNavbarBrand"}},{"HashCode":406608368,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/#brand\">navbar-brand</see> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.Href\">\r\n            <summary>\r\n            The navigation target. Default is <c>\"/\"</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent\">\r\n            <summary>\r\n            Content of the navbar-brand.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand","Common.TypeNameIdentifier":"HxNavbarBrand"}},{"HashCode":142438618,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent\">\r\n            <summary>\r\n            Content of the navbar-brand.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNavbarBrand"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent","Common.TypeNameIdentifier":"HxNavbarBrand"}},{"HashCode":-1628779036,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent\">\r\n            <summary>\r\n            Content of the navbar-brand.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarBrand.ChildContent","Common.TypeNameIdentifier":"HxNavbarBrand"}},{"HashCode":-1513564099,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse\">\r\n            <summary>\r\n            Collapse section for Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/\">navbar</see> component.\r\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNavbarCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Id\">\r\n            <summary>\r\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\r\n            (Autogenerated GUID if not set explicitly.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CollapseDirection","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CollapseDirection\">\r\n            <summary>\r\n            Direction of the animation.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","Common.PropertyName":"CollapseDirection"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Parent\">\r\n            <summary>\r\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\r\n            (Similar to traditional accordion behavior.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Parent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InitiallyExpanded","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.InitiallyExpanded\">\r\n            <summary>\r\n            Determines whether the collapse will be open or closed (expanded or collapsed) when first rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"InitiallyExpanded"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnShown\">\r\n            <summary>\r\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnHidden\">\r\n            <summary>\r\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnHidden"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse","Common.TypeNameIdentifier":"HxNavbarCollapse"}},{"HashCode":-1133823512,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse\">\r\n            <summary>\r\n            Collapse section for Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/\">navbar</see> component.\r\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Id\">\r\n            <summary>\r\n            Element ID. To be referenced by <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\" />.\r\n            (Autogenerated GUID if not set explicitly.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"CollapseDirection","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CollapseDirection\">\r\n            <summary>\r\n            Direction of the animation.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.CollapseDirection.Vertical\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CollapseDirection","Common.PropertyName":"CollapseDirection"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.Parent\">\r\n            <summary>\r\n            If parent is provided, then all collapsible elements under the specified parent will be closed when this collapsible item is shown.\r\n            (Similar to traditional accordion behavior.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Parent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InitiallyExpanded","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.InitiallyExpanded\">\r\n            <summary>\r\n            Determines whether the collapse will be open or closed (expanded or collapsed) when first rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"InitiallyExpanded"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnShown\">\r\n            <summary>\r\n            This event is fired when a collapse element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.OnHidden\">\r\n            <summary>\r\n            This event is fired when a collapse element has been hidden from the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnHidden"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse","Common.TypeNameIdentifier":"HxNavbarCollapse"}},{"HashCode":-1068867511,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNavbarCollapse"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent","Common.TypeNameIdentifier":"HxNavbarCollapse"}},{"HashCode":512341022,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapse.ChildContent\">\r\n            <summary>\r\n            Content of the collapse.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarCollapse.ChildContent","Common.TypeNameIdentifier":"HxNavbarCollapse"}},{"HashCode":992897598,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarText\">\r\n            <summary>\r\n            Text content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNavbarText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText","Common.TypeNameIdentifier":"HxNavbarText"}},{"HashCode":1770079366,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarText\">\r\n            <summary>\r\n            Text content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbar\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText","Common.TypeNameIdentifier":"HxNavbarText"}},{"HashCode":-2084310581,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNavbarText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent","Common.TypeNameIdentifier":"HxNavbarText"}},{"HashCode":1180516106,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarText.ChildContent","Common.TypeNameIdentifier":"HxNavbarText"}},{"HashCode":14610715,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler\">\r\n            <summary>\r\n            Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/#toggler\">navbar-toggler</see> component.\r\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNavbarToggler"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CollapseTarget","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\">\r\n            <summary>\r\n            Target selector of the toggle.\r\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CollapseTarget"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler","Common.TypeNameIdentifier":"HxNavbarToggler"}},{"HashCode":-2082416025,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler\">\r\n            <summary>\r\n            Bootstrap 5 <see href=\"https://getbootstrap.com/docs/5.3/components/navbar/#toggler\">navbar-toggler</see> component.\r\n            Derived from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CollapseTarget","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxCollapseToggleButton.CollapseTarget\">\r\n            <summary>\r\n            Target selector of the toggle.\r\n            Use <c>#id</c> to reference single <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" /> or <c>.class</c> for multiple <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxCollapse\" />s.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CollapseTarget"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler","Common.TypeNameIdentifier":"HxNavbarToggler"}},{"HashCode":-17397445,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNavbarToggler"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent","Common.TypeNameIdentifier":"HxNavbarToggler"}},{"HashCode":303445192,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavbarToggler.ChildContent","Common.TypeNameIdentifier":"HxNavbarToggler"}},{"HashCode":292279592,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavLink\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/navs-tabs/\">Bootstrap nav-link</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNavLink#HxNavLink\">https://havit.blazor.eu/components/HxNavLink#HxNavLink</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\">\r\n            <summary>\r\n            Navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Text\">\r\n            <summary>\r\n            Text of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            You can set the value to <c>null</c> to disable the matching.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink","Common.TypeNameIdentifier":"HxNavLink"}},{"HashCode":703205773,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavLink\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/navs-tabs/\">Bootstrap nav-link</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxNavLink#HxNavLink\">https://havit.blazor.eu/components/HxNavLink#HxNavLink</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\">\r\n            <summary>\r\n            Navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Text\">\r\n            <summary>\r\n            Text of the item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            You can set the value to <c>null</c> to disable the matching.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink","Common.TypeNameIdentifier":"HxNavLink"}},{"HashCode":-396010817,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent","Common.TypeNameIdentifier":"HxNavLink"}},{"HashCode":91410686,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent\">\r\n            <summary>\r\n            Content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNavLink.ChildContent","Common.TypeNameIdentifier":"HxNavLink"}},{"HashCode":-1333637366,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/scrollspy/\">Bootstrap Scrollspy</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxScrollspy\">https://havit.blazor.eu/components/HxScrollspy</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxScrollspy"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TargetId","TypeName":"System.String","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.TargetId\">\r\n            <summary>\r\n            ID of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> or list-group with scrollspy navigation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TargetId"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.CssClass\">\r\n            <summary>\r\n            Scrollspy additional CSS class. Added to main div (.hx-scrollspy).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent\">\r\n            <summary>\r\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy","Common.TypeNameIdentifier":"HxScrollspy"}},{"HashCode":-1658250373,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/scrollspy/\">Bootstrap Scrollspy</see> component.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxScrollspy\">https://havit.blazor.eu/components/HxScrollspy</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TargetId","TypeName":"System.String","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.TargetId\">\r\n            <summary>\r\n            ID of the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> or list-group with scrollspy navigation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TargetId"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.CssClass\">\r\n            <summary>\r\n            Scrollspy additional CSS class. Added to main div (.hx-scrollspy).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent\">\r\n            <summary>\r\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy","Common.TypeNameIdentifier":"HxScrollspy"}},{"HashCode":706204541,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent\">\r\n            <summary>\r\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxScrollspy"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent","Common.TypeNameIdentifier":"HxScrollspy"}},{"HashCode":-1846342377,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent\">\r\n            <summary>\r\n            Content to be spied. Elements with IDs are required (corresponding IDs to be used in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxNavLink.Href\" />).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspy.ChildContent","Common.TypeNameIdentifier":"HxScrollspy"}},{"HashCode":15698489,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink\">\r\n            <summary>\r\n            Temporary (?) NavLink component to be used with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> where <c>#id</c> anchors are required and <c>page-route#id</c> cannot be used.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxScrollspyNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.Href\">\r\n            <summary>\r\n            The navigation target in <c>#id</c> form.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked (before the navigation location is changed to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.Href\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;a&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink","Common.TypeNameIdentifier":"HxScrollspyNavLink"}},{"HashCode":1955432418,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink\">\r\n            <summary>\r\n            Temporary (?) NavLink component to be used with <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxScrollspy\" /> where <c>#id</c> anchors are required and <c>page-route#id</c> cannot be used.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.Href\">\r\n            <summary>\r\n            The navigation target in <c>#id</c> form.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked (before the navigation location is changed to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.Href\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;a&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink","Common.TypeNameIdentifier":"HxScrollspyNavLink"}},{"HashCode":1236345003,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxScrollspyNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent","Common.TypeNameIdentifier":"HxScrollspyNavLink"}},{"HashCode":-2004144936,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxScrollspyNavLink.ChildContent","Common.TypeNameIdentifier":"HxScrollspyNavLink"}},{"HashCode":-138044832,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\">\r\n            <summary>\r\n            Sidebar component - responsive navigation sidebar.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSidebar\">https://havit.blazor.eu/components/HxSidebar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSidebar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\">\r\n            <summary>\r\n            Sidebar header.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"ItemsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate\">\r\n            <summary>\r\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ItemsTemplate"}},{"Kind":"Components.Component","Name":"ExpandIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ExpandIcon\">\r\n            <summary>\r\n            Icon for expanding the desktop version. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\" /> for more specific customization.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ExpandIcon"}},{"Kind":"Components.Component","Name":"CollapseIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapseIcon\">\r\n            <summary>\r\n            Icon for collapsing the desktop version. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\" /> for more specific customization.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CollapseIcon"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarFooterTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate\">\r\n            <summary>\r\n            Sidebar footer (e.g. logged user, language switch, ...).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarFooterTemplateContext>","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"TogglerTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarTogglerTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\">\r\n            <summary>\r\n            Vertical toggler (desktop version) to be rendered instead of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ExpandIcon\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapseIcon\" /> icon.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarTogglerTemplateContext>","Common.PropertyName":"TogglerTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.Id\">\r\n            <summary>\r\n            ID of the root sidebar HTML element.\r\n            (Autogenerated if not set.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Collapsed","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.Collapsed\">\r\n            <summary>\r\n            Indicates whether the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" /> is collapsed, can be used to alter the state (expand or collapse the sidebar).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Collapsed"}},{"Kind":"Components.Component","Name":"CollapsedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapsedChanged\">\r\n            <summary>\r\n            Fires when the sidebar is expanded or collapsed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"CollapsedChanged"}},{"Kind":"Components.Component","Name":"MultipleItemsExpansion","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.MultipleItemsExpansion\">\r\n            <summary>\r\n            Whether multiple items can be in expanded state at once.\r\n            If set to <c>false</c>, upon item expansion, all other items are collapsed.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"MultipleItemsExpansion"}},{"Kind":"Components.Component","Name":"ResponsiveBreakpoint","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SidebarResponsiveBreakpoint","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ResponsiveBreakpoint\">\r\n            <summary>\r\n            Breakpoint below which the sidebar switches to mobile version (exclusive).<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.SidebarResponsiveBreakpoint.Medium\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SidebarResponsiveBreakpoint","Common.PropertyName":"ResponsiveBreakpoint"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":1843474415,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\">\r\n            <summary>\r\n            Sidebar component - responsive navigation sidebar.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSidebar\">https://havit.blazor.eu/components/HxSidebar</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\">\r\n            <summary>\r\n            Sidebar header.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"ItemsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate\">\r\n            <summary>\r\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ItemsTemplate"}},{"Kind":"Components.Component","Name":"ExpandIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ExpandIcon\">\r\n            <summary>\r\n            Icon for expanding the desktop version. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\" /> for more specific customization.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ExpandIcon"}},{"Kind":"Components.Component","Name":"CollapseIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapseIcon\">\r\n            <summary>\r\n            Icon for collapsing the desktop version. Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\" /> for more specific customization.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CollapseIcon"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarFooterTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate\">\r\n            <summary>\r\n            Sidebar footer (e.g. logged user, language switch, ...).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarFooterTemplateContext>","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"TogglerTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarTogglerTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\">\r\n            <summary>\r\n            Vertical toggler (desktop version) to be rendered instead of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ExpandIcon\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapseIcon\" /> icon.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarTogglerTemplateContext>","Common.PropertyName":"TogglerTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.Id\">\r\n            <summary>\r\n            ID of the root sidebar HTML element.\r\n            (Autogenerated if not set.)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Collapsed","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.Collapsed\">\r\n            <summary>\r\n            Indicates whether the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" /> is collapsed, can be used to alter the state (expand or collapse the sidebar).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Collapsed"}},{"Kind":"Components.Component","Name":"CollapsedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapsedChanged\">\r\n            <summary>\r\n            Fires when the sidebar is expanded or collapsed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"CollapsedChanged"}},{"Kind":"Components.Component","Name":"MultipleItemsExpansion","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.MultipleItemsExpansion\">\r\n            <summary>\r\n            Whether multiple items can be in expanded state at once.\r\n            If set to <c>false</c>, upon item expansion, all other items are collapsed.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"MultipleItemsExpansion"}},{"Kind":"Components.Component","Name":"ResponsiveBreakpoint","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SidebarResponsiveBreakpoint","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ResponsiveBreakpoint\">\r\n            <summary>\r\n            Breakpoint below which the sidebar switches to mobile version (exclusive).<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.SidebarResponsiveBreakpoint.Medium\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SidebarResponsiveBreakpoint","Common.PropertyName":"ResponsiveBreakpoint"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":1057963710,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\">\r\n            <summary>\r\n            Sidebar header.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxSidebar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":1465302438,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\">\r\n            <summary>\r\n            Sidebar header.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":-491760916,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate\">\r\n            <summary>\r\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemsTemplate","ParentTag":"HxSidebar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":1181774045,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate\">\r\n            <summary>\r\n            Sidebar items. Use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemsTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ItemsTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":-1908786127,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate\">\r\n            <summary>\r\n            Sidebar footer (e.g. logged user, language switch, ...).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"HxSidebar"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":-272305272,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate\">\r\n            <summary>\r\n            Sidebar footer (e.g. logged user, language switch, ...).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.FooterTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":-936772502,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\">\r\n            <summary>\r\n            Vertical toggler (desktop version) to be rendered instead of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ExpandIcon\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapseIcon\" /> icon.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TogglerTemplate","ParentTag":"HxSidebar"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TogglerTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":781075602,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate\">\r\n            <summary>\r\n            Vertical toggler (desktop version) to be rendered instead of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.ExpandIcon\" /> and <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.CollapseIcon\" /> icon.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TogglerTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TogglerTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar.TogglerTemplate","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":-807265496,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand\">\r\n            <summary>\r\n            Brand for the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSidebarBrand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"BrandName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.BrandName\">\r\n            <summary>\r\n            Brand long name.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BrandName"}},{"Kind":"Components.Component","Name":"LogoTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarBrandLogoTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate\">\r\n            <summary>\r\n            Brand logo.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarBrandLogoTemplateContext>","Common.PropertyName":"LogoTemplate"}},{"Kind":"Components.Component","Name":"BrandNameShort","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.BrandNameShort\">\r\n            <summary>\r\n            Brand short name.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BrandNameShort"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand","Common.TypeNameIdentifier":"HxSidebarBrand"}},{"HashCode":121206473,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand\">\r\n            <summary>\r\n            Brand for the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebar.HeaderTemplate\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"BrandName","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.BrandName\">\r\n            <summary>\r\n            Brand long name.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BrandName"}},{"Kind":"Components.Component","Name":"LogoTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarBrandLogoTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate\">\r\n            <summary>\r\n            Brand logo.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarBrandLogoTemplateContext>","Common.PropertyName":"LogoTemplate"}},{"Kind":"Components.Component","Name":"BrandNameShort","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.BrandNameShort\">\r\n            <summary>\r\n            Brand short name.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BrandNameShort"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand","Common.TypeNameIdentifier":"HxSidebarBrand"}},{"HashCode":1458736612,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate\">\r\n            <summary>\r\n            Brand logo.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LogoTemplate","ParentTag":"HxSidebarBrand"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LogoTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate","Common.TypeNameIdentifier":"HxSidebarBrand"}},{"HashCode":689358802,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate\">\r\n            <summary>\r\n            Brand logo.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LogoTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LogoTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarBrand.LogoTemplate","Common.TypeNameIdentifier":"HxSidebarBrand"}},{"HashCode":-47589064,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter\">\r\n            <summary>\r\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSidebarFooter"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Text\">\r\n            <summary>\r\n            Item text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Icon\">\r\n            <summary>\r\n            Item icon (optional).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Href\">\r\n            <summary>\r\n            Item navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.CssClass\">\r\n            <summary>\r\n            Allows you to disable the item with <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter","Common.TypeNameIdentifier":"HxSidebarFooter"}},{"HashCode":1605131427,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter\">\r\n            <summary>\r\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Text\">\r\n            <summary>\r\n            Item text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Icon\">\r\n            <summary>\r\n            Item icon (optional).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Href\">\r\n            <summary>\r\n            Item navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.CssClass\">\r\n            <summary>\r\n            Allows you to disable the item with <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter","Common.TypeNameIdentifier":"HxSidebarFooter"}},{"HashCode":1793686857,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxSidebarFooter"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent","Common.TypeNameIdentifier":"HxSidebarFooter"}},{"HashCode":2093552237,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarFooter.ChildContent","Common.TypeNameIdentifier":"HxSidebarFooter"}},{"HashCode":-1747487544,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\">\r\n            <summary>\r\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSidebarItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Text\">\r\n            <summary>\r\n            Item text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Icon\">\r\n            <summary>\r\n            Item icon (optional).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Href\">\r\n            <summary>\r\n            Item navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"ExpandOnMatch","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ExpandOnMatch\">\r\n            <summary>\r\n            Set to <c>false</c> if you don't want to expand the sidebar if URL matches.<br />\r\n            Default is <c>true</c>.\r\n            NOTE: The expansion is only applied on initial load, the sidebar does not track the URL changes (this may change in the future).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ExpandOnMatch"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Enabled\">\r\n            <summary>\r\n            Allows you to disable the item with <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to add.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarItemContentTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate\">\r\n            <summary>\r\n            Inner custom content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarItemContentTemplateContext>","Common.PropertyName":"ContentTemplate"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem","Common.TypeNameIdentifier":"HxSidebarItem"}},{"HashCode":1215353554,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\">\r\n            <summary>\r\n            Item for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebar\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Text\">\r\n            <summary>\r\n            Item text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Icon\">\r\n            <summary>\r\n            Item icon (optional).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"Href","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Href\">\r\n            <summary>\r\n            Item navigation target.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Href"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Match\">\r\n            <summary>\r\n            URL matching behavior for the underlying <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" />.\r\n            Default is <see cref=\"F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch?","Common.PropertyName":"Match"}},{"Kind":"Components.Component","Name":"ExpandOnMatch","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ExpandOnMatch\">\r\n            <summary>\r\n            Set to <c>false</c> if you don't want to expand the sidebar if URL matches.<br />\r\n            Default is <c>true</c>.\r\n            NOTE: The expansion is only applied on initial load, the sidebar does not track the URL changes (this may change in the future).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ExpandOnMatch"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.Enabled\">\r\n            <summary>\r\n            Allows you to disable the item with <c>false</c>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to add.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Havit.Blazor.Components.Web.Bootstrap.SidebarItemContentTemplateContext>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate\">\r\n            <summary>\r\n            Inner custom content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Havit.Blazor.Components.Web.Bootstrap.SidebarItemContentTemplateContext>","Common.PropertyName":"ContentTemplate"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem","Common.TypeNameIdentifier":"HxSidebarItem"}},{"HashCode":-1416376780,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate\">\r\n            <summary>\r\n            Inner custom content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"HxSidebarItem"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ContentTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate","Common.TypeNameIdentifier":"HxSidebarItem"}},{"HashCode":1281299972,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate\">\r\n            <summary>\r\n            Inner custom content for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ContentTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ContentTemplate","Common.TypeNameIdentifier":"HxSidebarItem"}},{"HashCode":-1669258061,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxSidebarItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent","Common.TypeNameIdentifier":"HxSidebarItem"}},{"HashCode":-991964855,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent\">\r\n            <summary>\r\n            Sub-items (not intended to be used for any other purpose).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebarItem.ChildContent","Common.TypeNameIdentifier":"HxSidebarItem"}},{"HashCode":-1455621025,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/offcanvas/\">Bootstrap Offcanvas</see> component (aka Drawer).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxOffcanvas\">https://havit.blazor.eu/components/HxOffcanvas</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxOffcanvas"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\">\r\n            <summary>\r\n            Text for the title in header.\r\n            (Is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\" /> which is rendered directly into <c>offcanvas-header</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\">\r\n            <summary>\r\n            Content for the header.\r\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Placement\">\r\n            <summary>\r\n            Placement of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement.End\" /> (right).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement?","Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"ResponsiveBreakpoint","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasResponsiveBreakpoint?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.ResponsiveBreakpoint\">\r\n            <summary>\r\n            Breakpoint below which the contents are rendered outside the viewport in an offcanvas (above this breakpoint, the offcanvas body is rendered inside the viewport).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasResponsiveBreakpoint?","Common.PropertyName":"ResponsiveBreakpoint"}},{"Kind":"Components.Component","Name":"RenderMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.RenderMode\">\r\n            <summary>\r\n            Determines whether the content is always rendered or only if the offcanvas is open.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode.OpenOnly\" />.<br />\r\n            Please note, this setting applies only when <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasResponsiveBreakpoint.None\" /> is set. For all other values, the content is always rendered (to be available for the mobile version).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode","Common.PropertyName":"RenderMode"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Size\">\r\n            <summary>\r\n            Size of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether the modal shows close button in header.\r\n            Default value is <c>true</c>.\r\n            Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseButtonIcon\" /> to change shape of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseOnEscape\">\r\n            <summary>\r\n            Indicates whether the offcanvas closes when escape key is pressed.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"CloseOnEscape"}},{"Kind":"Components.Component","Name":"CloseButtonIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseButtonIcon\">\r\n            <summary>\r\n            Close icon to be used in header.\r\n            If set to <c>null</c>, Bootstrap default close-button will be used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CloseButtonIcon"}},{"Kind":"Components.Component","Name":"Backdrop","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Backdrop\">\r\n            <summary>\r\n            Indicates whether to apply a backdrop on body while offcanvas is open.\r\n            If set to <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop.Static\" />, the offcanvas cannot be closed by clicking on the backdrop.\r\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop.True\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop?","Common.PropertyName":"Backdrop"}},{"Kind":"Components.Component","Name":"ScrollingEnabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.ScrollingEnabled\">\r\n            <summary>\r\n            Indicates whether body (page) scrolling is allowed while offcanvas is open.\r\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ScrollingEnabled"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CssClass\">\r\n            <summary>\r\n            Offcanvas additional CSS class. Added to root <c>div</c> (<c>.offcanvas</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderCssClass\">\r\n            <summary>\r\n            Additional header CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyCssClass\">\r\n            <summary>\r\n            Additional body CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterCssClass\">\r\n            <summary>\r\n            Additional footer CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"OnClosed","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.OnClosed\">\r\n            <summary>\r\n            This event is fired when an offcanvas element has been hidden from the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnClosed"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.OnShown\">\r\n            <summary>\r\n            This event is fired when an offcanvas element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":-6992016,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/offcanvas/\">Bootstrap Offcanvas</see> component (aka Drawer).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxOffcanvas\">https://havit.blazor.eu/components/HxOffcanvas</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\">\r\n            <summary>\r\n            Text for the title in header.\r\n            (Is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\" /> which is rendered directly into <c>offcanvas-header</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\">\r\n            <summary>\r\n            Content for the header.\r\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"BodyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"BodyTemplate"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Placement\">\r\n            <summary>\r\n            Placement of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement.End\" /> (right).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasPlacement?","Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"ResponsiveBreakpoint","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasResponsiveBreakpoint?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.ResponsiveBreakpoint\">\r\n            <summary>\r\n            Breakpoint below which the contents are rendered outside the viewport in an offcanvas (above this breakpoint, the offcanvas body is rendered inside the viewport).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasResponsiveBreakpoint?","Common.PropertyName":"ResponsiveBreakpoint"}},{"Kind":"Components.Component","Name":"RenderMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.RenderMode\">\r\n            <summary>\r\n            Determines whether the content is always rendered or only if the offcanvas is open.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode.OpenOnly\" />.<br />\r\n            Please note, this setting applies only when <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasResponsiveBreakpoint.None\" /> is set. For all other values, the content is always rendered (to be available for the mobile version).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasRenderMode","Common.PropertyName":"RenderMode"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Size\">\r\n            <summary>\r\n            Size of the offcanvas. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether the modal shows close button in header.\r\n            Default value is <c>true</c>.\r\n            Use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseButtonIcon\" /> to change shape of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseOnEscape\">\r\n            <summary>\r\n            Indicates whether the offcanvas closes when escape key is pressed.\r\n            Default value is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"CloseOnEscape"}},{"Kind":"Components.Component","Name":"CloseButtonIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CloseButtonIcon\">\r\n            <summary>\r\n            Close icon to be used in header.\r\n            If set to <c>null</c>, Bootstrap default close-button will be used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CloseButtonIcon"}},{"Kind":"Components.Component","Name":"Backdrop","TypeName":"Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Backdrop\">\r\n            <summary>\r\n            Indicates whether to apply a backdrop on body while offcanvas is open.\r\n            If set to <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop.Static\" />, the offcanvas cannot be closed by clicking on the backdrop.\r\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop.True\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.OffcanvasBackdrop?","Common.PropertyName":"Backdrop"}},{"Kind":"Components.Component","Name":"ScrollingEnabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.ScrollingEnabled\">\r\n            <summary>\r\n            Indicates whether body (page) scrolling is allowed while offcanvas is open.\r\n            Default value (from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Defaults\" />) is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ScrollingEnabled"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.CssClass\">\r\n            <summary>\r\n            Offcanvas additional CSS class. Added to root <c>div</c> (<c>.offcanvas</c>).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderCssClass\">\r\n            <summary>\r\n            Additional header CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderCssClass"}},{"Kind":"Components.Component","Name":"BodyCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyCssClass\">\r\n            <summary>\r\n            Additional body CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"BodyCssClass"}},{"Kind":"Components.Component","Name":"FooterCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterCssClass\">\r\n            <summary>\r\n            Additional footer CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FooterCssClass"}},{"Kind":"Components.Component","Name":"OnClosed","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.OnClosed\">\r\n            <summary>\r\n            This event is fired when an offcanvas element has been hidden from the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnClosed"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.OnShown\">\r\n            <summary>\r\n            This event is fired when an offcanvas element has been made visible to the user (will wait for CSS transitions to complete).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":806250642,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\">\r\n            <summary>\r\n            Content for the header.\r\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxOffcanvas"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":-183588320,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate\">\r\n            <summary>\r\n            Content for the header.\r\n            (Is rendered directly into <c>offcanvas-header</c> - in opposite to <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.Title\" /> which is rendered into <c>&lt;h5 class=\"offcanvas-title\"&gt;</c>).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.HeaderTemplate","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":1145134831,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"HxOffcanvas"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":-1618799247,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate\">\r\n            <summary>\r\n            Body content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BodyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.BodyTemplate","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":-603678683,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"HxOffcanvas"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":1130046303,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate\">\r\n            <summary>\r\n            Footer content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxOffcanvas.FooterTemplate","Common.TypeNameIdentifier":"HxOffcanvas"}},{"HashCode":646409710,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/placeholders/\">Bootstrap 5 Placeholder</see> component, aka Skeleton.<br />\r\n            Use loading placeholders for your components or pages to indicate something may still be loading.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxPlaceholder\">https://havit.blazor.eu/components/HxPlaceholder</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Columns\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.Columns\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"ColumnsSmallUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsSmallUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsSmallUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsSmallUp"}},{"Kind":"Components.Component","Name":"ColumnsMediumUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsMediumUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsMediumUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsMediumUp"}},{"Kind":"Components.Component","Name":"ColumnsLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsExtraLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsExtraLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsExtraLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsXxlUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsXxlUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsXxlUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsXxlUp"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Size\">\r\n            <summary>\r\n            Size of the placeholder.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Color\">\r\n            <summary>\r\n            Color of the placeholder.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent\">\r\n            <summary>\r\n            Optional content of the placeholder (usually not used).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder","Common.TypeNameIdentifier":"HxPlaceholder"}},{"HashCode":-1139035025,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/placeholders/\">Bootstrap 5 Placeholder</see> component, aka Skeleton.<br />\r\n            Use loading placeholders for your components or pages to indicate something may still be loading.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxPlaceholder\">https://havit.blazor.eu/components/HxPlaceholder</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Columns\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.Columns\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"ColumnsSmallUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsSmallUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsSmallUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsSmallUp"}},{"Kind":"Components.Component","Name":"ColumnsMediumUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsMediumUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsMediumUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsMediumUp"}},{"Kind":"Components.Component","Name":"ColumnsLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsExtraLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsExtraLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsExtraLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsXxlUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ColumnsXxlUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsXxlUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsXxlUp"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Size\">\r\n            <summary>\r\n            Size of the placeholder.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.Color\">\r\n            <summary>\r\n            Color of the placeholder.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent\">\r\n            <summary>\r\n            Optional content of the placeholder (usually not used).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder","Common.TypeNameIdentifier":"HxPlaceholder"}},{"HashCode":-1559332931,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent\">\r\n            <summary>\r\n            Optional content of the placeholder (usually not used).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxPlaceholder"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent","Common.TypeNameIdentifier":"HxPlaceholder"}},{"HashCode":1165099297,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent\">\r\n            <summary>\r\n            Optional content of the placeholder (usually not used).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder.ChildContent","Common.TypeNameIdentifier":"HxPlaceholder"}},{"HashCode":-872750098,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/placeholders/\">Bootstrap 5 placeholder</see> in form of a button.<br />\r\n            Derives from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (adds <c>placeholder</c> class and changes <c>Enabled</c> default to <c>false</c>).<br />\r\n            Set the size of the button by using the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.Columns\" /> parameter.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxPlaceholderButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.Columns\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.Columns\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"ColumnsSmallUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsSmallUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsSmallUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsSmallUp"}},{"Kind":"Components.Component","Name":"ColumnsMediumUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsMediumUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsMediumUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsMediumUp"}},{"Kind":"Components.Component","Name":"ColumnsLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsExtraLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsExtraLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsExtraLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsXxlUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsXxlUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsXxlUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsXxlUp"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton","Common.TypeNameIdentifier":"HxPlaceholderButton"}},{"HashCode":356828738,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/placeholders/\">Bootstrap 5 placeholder</see> in form of a button.<br />\r\n            Derives from <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxButton\" /> (adds <c>placeholder</c> class and changes <c>Enabled</c> default to <c>false</c>).<br />\r\n            Set the size of the button by using the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.Columns\" /> parameter.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.Columns\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.Columns\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"ColumnsSmallUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsSmallUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsSmallUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsSmallUp"}},{"Kind":"Components.Component","Name":"ColumnsMediumUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsMediumUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsMediumUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsMediumUp"}},{"Kind":"Components.Component","Name":"ColumnsLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsExtraLargeUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsExtraLargeUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsExtraLargeUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsExtraLargeUp"}},{"Kind":"Components.Component","Name":"ColumnsXxlUp","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ColumnsXxlUp\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Bootstrap.ILayoutColumnComponent.ColumnsXxlUp\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ColumnsXxlUp"}},{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Text\">\r\n            <summary>\r\n            Text of the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Icon\">\r\n            <summary>\r\n            Icon to render into the button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}},{"Kind":"Components.Component","Name":"IconPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconPlacement\">\r\n            <summary>\r\n            Position of the icon within the button. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement.Start\" /> (configurable through <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" />).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonIconPlacement?","Common.PropertyName":"IconPlacement"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Color\">\r\n            <summary>\r\n            Bootstrap button style - theme color.<br />\r\n            Default is taken from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Defaults\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.None\" /> if not customized).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Size\">\r\n            <summary>\r\n            Button size. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ButtonSize.Regular\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ButtonSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Outline","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Outline\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/buttons/#outline-buttons\">Bootstrap \"outline\" button</see> style.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Outline"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>&lt;button /&gt;</c>.<br />\r\n            When using <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> you might want to use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" /> to get the desired result.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.IconCssClass\">\r\n            <summary>\r\n            CSS class to be rendered with the button icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"IconCssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Enabled\">\r\n            <inheritdoc cref=\"P:Havit.Blazor.Components.Web.Infrastructure.ICascadeEnabledComponent.Enabled\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\">\r\n            <summary>\r\n            Associated <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"FormId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.FormId\">\r\n            <summary>\r\n            Specifies the form the button belongs to.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FormId"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\">\r\n            <summary>\r\n            Tooltip text.<br />\r\n            If set, a <c>span</c> wrapper will be rendered around the <c>&lt;button /&gt;</c>. For most scenarios you will then use <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\" /> instead of <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.CssClass\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"TooltipPlacement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipPlacement\">\r\n            <summary>\r\n            Tooltip placement.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"TooltipPlacement"}},{"Kind":"Components.Component","Name":"TooltipCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipCssClass"}},{"Kind":"Components.Component","Name":"TooltipWrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.TooltipWrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the tooltip <c>span</c> wrapper of the <c>&lt;button /&gt;</c>.<br />\r\n            If set, the <c>span</c> wrapper will be rendered no matter the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Tooltip\" /> text is set or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TooltipWrapperCssClass"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\">\r\n            <summary>\r\n            Raised after the button is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"OnValidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnValidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation succeeds.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnValidClick"}},{"Kind":"Components.Component","Name":"OnInvalidClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnInvalidClick\">\r\n            <summary>\r\n            Raised after the button is clicked and EditContext validation fails.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnInvalidClick"}},{"Kind":"Components.Component","Name":"OnClickStopPropagation","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickStopPropagation\">\r\n            <summary>\r\n            Stop onClick-event propagation. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickStopPropagation"}},{"Kind":"Components.Component","Name":"OnClickPreventDefault","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClickPreventDefault\">\r\n            <summary>\r\n            Prevents the default action for the onclick event. Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"OnClickPreventDefault"}},{"Kind":"Components.Component","Name":"Spinner","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.Spinner\">\r\n            <summary>\r\n            Set state of the embedded <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\" />.\r\n            Leave <c>null</c> if you want automated spinner when any of the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers is running.\r\n            You can set an explicit <c>false</c> constant to disable (override) the spinner automation.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Spinner"}},{"Kind":"Components.Component","Name":"SingleClickProtection","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.SingleClickProtection\">\r\n            <summary>\r\n            Set <c>false</c> if you want to allow multiple <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.OnClick\" /> handlers in parallel. Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"SingleClickProtection"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying <c>&lt;button&gt;</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton","Common.TypeNameIdentifier":"HxPlaceholderButton"}},{"HashCode":-246725233,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxPlaceholderButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent","Common.TypeNameIdentifier":"HxPlaceholderButton"}},{"HashCode":-1808343245,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxButton.ChildContent\">\r\n            <summary>\r\n            Button content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderButton.ChildContent","Common.TypeNameIdentifier":"HxPlaceholderButton"}},{"HashCode":-1409884430,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer\">\r\n            <summary>\r\n            Optional container for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" /> components where you can set the animation and some common properties\r\n            for all placeholders contained.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxPlaceholderContainer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderContainerSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderContainerSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderAnimation?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Animation\">\r\n            <summary>\r\n            Animation of the placeholders in container.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderAnimation?","Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Size\">\r\n            <summary>\r\n            Size of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Color\">\r\n            <summary>\r\n            Color of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent\">\r\n            <summary>\r\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer","Common.TypeNameIdentifier":"HxPlaceholderContainer"}},{"HashCode":-548324417,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer\">\r\n            <summary>\r\n            Optional container for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" /> components where you can set the animation and some common properties\r\n            for all placeholders contained.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderContainerSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderContainerSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderAnimation?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Animation\">\r\n            <summary>\r\n            Animation of the placeholders in container.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderAnimation?","Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Size\">\r\n            <summary>\r\n            Size of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PlaceholderSize?","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.Color\">\r\n            <summary>\r\n            Color of the placeholders (propagated to the child <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent\">\r\n            <summary>\r\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer","Common.TypeNameIdentifier":"HxPlaceholderContainer"}},{"HashCode":1347894889,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent\">\r\n            <summary>\r\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxPlaceholderContainer"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent","Common.TypeNameIdentifier":"HxPlaceholderContainer"}},{"HashCode":652363778,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent\">\r\n            <summary>\r\n            Content of the placeholder container (put your <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPlaceholder\" />s here).\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPlaceholderContainer.ChildContent","Common.TypeNameIdentifier":"HxPlaceholderContainer"}},{"HashCode":-756991482,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgress","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgress\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/progress/\">Bootstrap 5 Progress</see> component.<br />\r\n            A wrapping component for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxProgress\">https://havit.blazor.eu/components/HxProgress</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxProgress"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent\">\r\n            <summary>\r\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the progress.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.Height\">\r\n            <summary>\r\n            Height of all inner progress bars. Default is <c>15px</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"MinValue","TypeName":"System.Single","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.MinValue\">\r\n            <summary>\r\n            Lowest possible value. Default is <c>0</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"MinValue"}},{"Kind":"Components.Component","Name":"MaxValue","TypeName":"System.Single","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.MaxValue\">\r\n            <summary>\r\n            Highest possible value. Default is <c>100</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"MaxValue"}},{"Kind":"Components.Component","Name":"Striped","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.Striped\">\r\n            <summary>\r\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Striped"}},{"Kind":"Components.Component","Name":"Animated","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.Animated\">\r\n            <summary>\r\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Animated"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgress","Common.TypeNameIdentifier":"HxProgress"}},{"HashCode":1416442481,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgress","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgress\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/progress/\">Bootstrap 5 Progress</see> component.<br />\r\n            A wrapping component for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxProgress\">https://havit.blazor.eu/components/HxProgress</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxProgress"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent\">\r\n            <summary>\r\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.CssClass\">\r\n            <summary>\r\n            Additional CSS classes for the progress.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.Height\">\r\n            <summary>\r\n            Height of all inner progress bars. Default is <c>15px</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"MinValue","TypeName":"System.Single","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.MinValue\">\r\n            <summary>\r\n            Lowest possible value. Default is <c>0</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"MinValue"}},{"Kind":"Components.Component","Name":"MaxValue","TypeName":"System.Single","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.MaxValue\">\r\n            <summary>\r\n            Highest possible value. Default is <c>100</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"MaxValue"}},{"Kind":"Components.Component","Name":"Striped","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.Striped\">\r\n            <summary>\r\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Striped"}},{"Kind":"Components.Component","Name":"Animated","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.Animated\">\r\n            <summary>\r\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Animated"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgress","Common.TypeNameIdentifier":"HxProgress"}},{"HashCode":1222944851,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent\">\r\n            <summary>\r\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxProgress"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent","Common.TypeNameIdentifier":"HxProgress"}},{"HashCode":-685759492,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent\">\r\n            <summary>\r\n            Content consisting of one or multiple <c>HxProgressBar</c> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxProgress"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgress.ChildContent","Common.TypeNameIdentifier":"HxProgress"}},{"HashCode":-344407677,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar\">\r\n            <summary>\r\n            A progress bar to be placed inside <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgress\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxProgressBar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent\">\r\n            <summary>\r\n            Inner content of the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.CssClass\">\r\n            <summary>\r\n            Additional CSS classes to be applied to the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Single","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Value\">\r\n            <summary>\r\n            Current value (proportion of the progress bar that is taken up).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"MinValue","TypeName":"System.Single?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.MinValue\">\r\n            <summary>\r\n            Lowest possible value. Default is <c>0</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single?","Common.PropertyName":"MinValue"}},{"Kind":"Components.Component","Name":"MaxValue","TypeName":"System.Single?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.MaxValue\">\r\n            <summary>\r\n            Highest possible value. Default is <c>100</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single?","Common.PropertyName":"MaxValue"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Label\">\r\n            <summary>\r\n            Text to be displayed on the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Color\">\r\n            <summary>\r\n            Fill (background) color of the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Striped","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Striped\">\r\n            <summary>\r\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Striped"}},{"Kind":"Components.Component","Name":"Animated","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Animated\">\r\n            <summary>\r\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animated"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar","Common.TypeNameIdentifier":"HxProgressBar"}},{"HashCode":-1777432148,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar\">\r\n            <summary>\r\n            A progress bar to be placed inside <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgress\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent\">\r\n            <summary>\r\n            Inner content of the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.CssClass\">\r\n            <summary>\r\n            Additional CSS classes to be applied to the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Single","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Value\">\r\n            <summary>\r\n            Current value (proportion of the progress bar that is taken up).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"MinValue","TypeName":"System.Single?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.MinValue\">\r\n            <summary>\r\n            Lowest possible value. Default is <c>0</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single?","Common.PropertyName":"MinValue"}},{"Kind":"Components.Component","Name":"MaxValue","TypeName":"System.Single?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.MaxValue\">\r\n            <summary>\r\n            Highest possible value. Default is <c>100</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single?","Common.PropertyName":"MaxValue"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Label\">\r\n            <summary>\r\n            Text to be displayed on the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Color\">\r\n            <summary>\r\n            Fill (background) color of the progress bar.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Striped","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Striped\">\r\n            <summary>\r\n            If <c>true</c>, applies a stripe via CSS gradient over the progress bar's background color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Striped"}},{"Kind":"Components.Component","Name":"Animated","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.Animated\">\r\n            <summary>\r\n            If <c>true</c>, stripes are animated right to left via CSS3 animations, stripes are automatically switched on.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animated"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar","Common.TypeNameIdentifier":"HxProgressBar"}},{"HashCode":1014289311,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent\">\r\n            <summary>\r\n            Inner content of the progress bar.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxProgressBar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent","Common.TypeNameIdentifier":"HxProgressBar"}},{"HashCode":-1967015401,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent\">\r\n            <summary>\r\n            Inner content of the progress bar.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressBar.ChildContent","Common.TypeNameIdentifier":"HxProgressBar"}},{"HashCode":100908592,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator\">\r\n            <summary>\r\n            Displays the content of the component as \"in progress\".<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxProgressIndicator\">https://havit.blazor.eu/components/HxProgressIndicator</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxProgressIndicator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ProgressIndicatorSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ProgressIndicatorSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"InProgress","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.InProgress\">\r\n            <summary>\r\n            Indicates whether the content should be displayed as \"in progress\".\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"InProgress"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Delay\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent\">\r\n            <summary>\r\n            Wrapped content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator","Common.TypeNameIdentifier":"HxProgressIndicator"}},{"HashCode":-1614872688,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator\">\r\n            <summary>\r\n            Displays the content of the component as \"in progress\".<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxProgressIndicator\">https://havit.blazor.eu/components/HxProgressIndicator</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ProgressIndicatorSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ProgressIndicatorSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"InProgress","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.InProgress\">\r\n            <summary>\r\n            Indicates whether the content should be displayed as \"in progress\".\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"InProgress"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.Delay\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent\">\r\n            <summary>\r\n            Wrapped content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator","Common.TypeNameIdentifier":"HxProgressIndicator"}},{"HashCode":-353558036,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent\">\r\n            <summary>\r\n            Wrapped content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxProgressIndicator"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent","Common.TypeNameIdentifier":"HxProgressIndicator"}},{"HashCode":562170532,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent\">\r\n            <summary>\r\n            Wrapped content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxProgressIndicator.ChildContent","Common.TypeNameIdentifier":"HxProgressIndicator"}},{"HashCode":1138283239,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSpinner","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/spinners/\">Spinner</see> (usually indicates operation in progress).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSpinner\">https://havit.blazor.eu/components/HxSpinner</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SpinnerType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.Type\">\r\n            <summary>\r\n            Spinner type. Spinner type - Border (default) or Grow.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SpinnerType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SpinnerSize","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.Size\">\r\n            <summary>\r\n            Spinner size. You can also use custom <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.CssClass\" /> to change the dimensions as needed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SpinnerSize","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.Color\">\r\n            <summary>\r\n            Spinner color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.CssClass\">\r\n            <summary>\r\n            Additional CSS class to be applied.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSpinner","Common.TypeNameIdentifier":"HxSpinner"}},{"HashCode":12917228,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSpinner","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxSpinner\">\r\n            <summary>\r\n            Bootstrap <see href=\"https://getbootstrap.com/docs/5.3/components/spinners/\">Spinner</see> (usually indicates operation in progress).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxSpinner\">https://havit.blazor.eu/components/HxSpinner</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SpinnerType","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.Type\">\r\n            <summary>\r\n            Spinner type. Spinner type - Border (default) or Grow.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SpinnerType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Havit.Blazor.Components.Web.Bootstrap.SpinnerSize","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.Size\">\r\n            <summary>\r\n            Spinner size. You can also use custom <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.CssClass\" /> to change the dimensions as needed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.SpinnerSize","Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.Color\">\r\n            <summary>\r\n            Spinner color.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxSpinner.CssClass\">\r\n            <summary>\r\n            Additional CSS class to be applied.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSpinner","Common.TypeNameIdentifier":"HxSpinner"}},{"HashCode":605260059,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTab","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTab\">\r\n            <summary>\r\n            Single tab for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxTab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Id\">\r\n            <summary>\r\n            ID of the tab (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabId\" />).\r\n            Autogenerated GUID if not set.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Title\">\r\n            <summary>\r\n            Tab title.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"TitleCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleCssClass\">\r\n            <summary>\r\n            CSS class(es) to be applied to the tab title (navigation).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TitleCssClass"}},{"Kind":"Components.Component","Name":"ContentCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.ContentCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) to be applied to the tab content (pane).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContentCssClass"}},{"Kind":"Components.Component","Name":"TitleTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate\">\r\n            <summary>\r\n            Tab title template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TitleTemplate"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Content\">\r\n            <summary>\r\n            Content of the tab.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"Order","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Order\">\r\n            <summary>\r\n            The order (display index) of the tab.<br />\r\n            Due to stable sorting used, the order in which the tabs are rendered is preserved when the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Order\" /> parameter is not set.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Order"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Visible\">\r\n            <summary>\r\n            <c>True</c> for visible tab. Set <c>false</c> when tab should not be visible.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the Enabled value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"OnTabActivated","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.OnTabActivated\">\r\n            <summary>\r\n            Raised when the tab is activated.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnTabActivated"}},{"Kind":"Components.Component","Name":"OnTabDeactivated","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.OnTabDeactivated\">\r\n            <summary>\r\n            Raised when the tab is deactivated (another tab is activates or when <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" /> is disposed).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnTabDeactivated"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTab","Common.TypeNameIdentifier":"HxTab"}},{"HashCode":586195752,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTab","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTab\">\r\n            <summary>\r\n            Single tab for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Id\">\r\n            <summary>\r\n            ID of the tab (<see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabId\" />).\r\n            Autogenerated GUID if not set.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Title\">\r\n            <summary>\r\n            Tab title.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"TitleCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleCssClass\">\r\n            <summary>\r\n            CSS class(es) to be applied to the tab title (navigation).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"TitleCssClass"}},{"Kind":"Components.Component","Name":"ContentCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.ContentCssClass\">\r\n            <summary>\r\n            Additional CSS class(es) to be applied to the tab content (pane).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContentCssClass"}},{"Kind":"Components.Component","Name":"TitleTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate\">\r\n            <summary>\r\n            Tab title template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"TitleTemplate"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Content\">\r\n            <summary>\r\n            Content of the tab.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"Order","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Order\">\r\n            <summary>\r\n            The order (display index) of the tab.<br />\r\n            Due to stable sorting used, the order in which the tabs are rendered is preserved when the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Order\" /> parameter is not set.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Order"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Visible\">\r\n            <summary>\r\n            <c>True</c> for visible tab. Set <c>false</c> when tab should not be visible.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the Enabled value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"OnTabActivated","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.OnTabActivated\">\r\n            <summary>\r\n            Raised when the tab is activated.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnTabActivated"}},{"Kind":"Components.Component","Name":"OnTabDeactivated","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.OnTabDeactivated\">\r\n            <summary>\r\n            Raised when the tab is deactivated (another tab is activates or when <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\" /> is disposed).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnTabDeactivated"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTab","Common.TypeNameIdentifier":"HxTab"}},{"HashCode":595039500,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate\">\r\n            <summary>\r\n            Tab title template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TitleTemplate","ParentTag":"HxTab"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate","Common.TypeNameIdentifier":"HxTab"}},{"HashCode":-783350759,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate\">\r\n            <summary>\r\n            Tab title template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TitleTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxTab"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTab.TitleTemplate","Common.TypeNameIdentifier":"HxTab"}},{"HashCode":889345439,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTab.Content","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Content\">\r\n            <summary>\r\n            Content of the tab.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"HxTab"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTab.Content","Common.TypeNameIdentifier":"HxTab"}},{"HashCode":-335896146,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTab.Content","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTab.Content\">\r\n            <summary>\r\n            Content of the tab.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxTab"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTab.Content","Common.TypeNameIdentifier":"HxTab"}},{"HashCode":133682723,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\">\r\n            <summary>\r\n            Container for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTab\" />s for easier implementation of tabbed UI.<br />\r\n            Encapsulates <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Tabs\" /> variant as default) and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavLink\" />s so you don't have to bother with them explicitly.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxTabPanel\">https://havit.blazor.eu/components/HxTabPanel</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxTabPanel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NavVariant","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavVariant","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.NavVariant\">\r\n            <summary>\r\n            The visual variant of the nav items.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Tabs\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavVariant","Common.PropertyName":"NavVariant"}},{"Kind":"Components.Component","Name":"RenderMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TabPanelRenderMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.RenderMode\">\r\n            <summary>\r\n            Whether to wrap the tab panel in a card with the tab navigation in the header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TabPanelRenderMode","Common.PropertyName":"RenderMode"}},{"Kind":"Components.Component","Name":"CardSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.CardSettings\">\r\n            <summary>\r\n            Card settings for the wrapping card.\r\n            Applies only if <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.RenderMode\" /> is set to <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TabPanelRenderMode.Card\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardSettings","Common.PropertyName":"CardSettings"}},{"Kind":"Components.Component","Name":"ActiveTabId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabId\">\r\n            <summary>\r\n            ID of the active tab (@bindable).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ActiveTabId"}},{"Kind":"Components.Component","Name":"ActiveTabIdChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabIdChanged\">\r\n            <summary>\r\n            Raised when ID of the active tab changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ActiveTabIdChanged"}},{"Kind":"Components.Component","Name":"InitialActiveTabId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.InitialActiveTabId\">\r\n            <summary>\r\n            ID of the tab which should be active at the very beginning.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InitialActiveTabId"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent\">\r\n            <summary>\r\n            Tabs.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","Common.TypeNameIdentifier":"HxTabPanel"}},{"HashCode":1646503797,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel\">\r\n            <summary>\r\n            Container for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTab\" />s for easier implementation of tabbed UI.<br />\r\n            Encapsulates <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNav\" /> (<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Tabs\" /> variant as default) and <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxNavLink\" />s so you don't have to bother with them explicitly.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxTabPanel\">https://havit.blazor.eu/components/HxTabPanel</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NavVariant","TypeName":"Havit.Blazor.Components.Web.Bootstrap.NavVariant","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.NavVariant\">\r\n            <summary>\r\n            The visual variant of the nav items.\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.NavVariant.Tabs\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.NavVariant","Common.PropertyName":"NavVariant"}},{"Kind":"Components.Component","Name":"RenderMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TabPanelRenderMode","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.RenderMode\">\r\n            <summary>\r\n            Whether to wrap the tab panel in a card with the tab navigation in the header.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TabPanelRenderMode","Common.PropertyName":"RenderMode"}},{"Kind":"Components.Component","Name":"CardSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CardSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.CardSettings\">\r\n            <summary>\r\n            Card settings for the wrapping card.\r\n            Applies only if <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.RenderMode\" /> is set to <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TabPanelRenderMode.Card\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CardSettings","Common.PropertyName":"CardSettings"}},{"Kind":"Components.Component","Name":"ActiveTabId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabId\">\r\n            <summary>\r\n            ID of the active tab (@bindable).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ActiveTabId"}},{"Kind":"Components.Component","Name":"ActiveTabIdChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ActiveTabIdChanged\">\r\n            <summary>\r\n            Raised when ID of the active tab changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ActiveTabIdChanged"}},{"Kind":"Components.Component","Name":"InitialActiveTabId","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.InitialActiveTabId\">\r\n            <summary>\r\n            ID of the tab which should be active at the very beginning.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InitialActiveTabId"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent\">\r\n            <summary>\r\n            Tabs.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","Common.TypeNameIdentifier":"HxTabPanel"}},{"HashCode":-1129797621,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent\">\r\n            <summary>\r\n            Tabs.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxTabPanel"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent","Common.TypeNameIdentifier":"HxTabPanel"}},{"HashCode":-1386380328,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent\">\r\n            <summary>\r\n            Tabs.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel.ChildContent","Common.TypeNameIdentifier":"HxTabPanel"}},{"HashCode":-1833315743,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTags\">\r\n            <summary>\r\n            Input for entering tags.\r\n            Does not allow duplicate tags.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputTags\">https://havit.blazor.eu/components/HxInputTags</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputTags"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTagsSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTagsSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"AllowCustomTags","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.AllowCustomTags\">\r\n            <summary>\r\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\r\n            Default is <c>true</c> (you can type your own tags).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllowCustomTags"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.DataProvider\">\r\n            <summary>\r\n            Set to method providing data for tags' suggestions.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"SuggestMinimumLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.SuggestMinimumLength\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"SuggestMinimumLength"}},{"Kind":"Components.Component","Name":"SuggestDelay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.SuggestDelay\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"SuggestDelay"}},{"Kind":"Components.Component","Name":"Delimiters","TypeName":"System.Collections.Generic.List<System.Char>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Delimiters\">\r\n            <summary>\r\n            Characters, when typed, divide the current input into separate tags.\r\n            Default is comma, semicolon and space.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.Char>","Common.PropertyName":"Delimiters"}},{"Kind":"Components.Component","Name":"ShowAddButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\">\r\n            <summary>\r\n            Indicates whether the add-icon (+) should be displayed.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowAddButton"}},{"Kind":"Components.Component","Name":"AddButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.AddButtonText\">\r\n            <summary>\r\n            Optional text for the add-button.\r\n            Displayed only when there are no tags (the <c>Value</c> is empty).\r\n            Default is <c>null</c> (none).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AddButtonText"}},{"Kind":"Components.Component","Name":"Naked","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Naked\">\r\n            <summary>\r\n            Indicates whether a \"naked\" variant should be displayed (no border).\r\n            Default is <c>false</c>.\r\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Naked"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"TagBadgeSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.TagBadgeSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\r\n            Default is <c>Color=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Light\" />\"</c> and <c>TextColor=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Dark\" />\"</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"TagBadgeSettings"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<global::System.String>>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<System.String>>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Collections.Generic.List<global::System.String>>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":-544914778,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTags\">\r\n            <summary>\r\n            Input for entering tags.\r\n            Does not allow duplicate tags.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxInputTags\">https://havit.blazor.eu/components/HxInputTags</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTagsSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTagsSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"AllowCustomTags","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.AllowCustomTags\">\r\n            <summary>\r\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\r\n            Default is <c>true</c> (you can type your own tags).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllowCustomTags"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.DataProvider\">\r\n            <summary>\r\n            Set to method providing data for tags' suggestions.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"SuggestMinimumLength","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.SuggestMinimumLength\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"SuggestMinimumLength"}},{"Kind":"Components.Component","Name":"SuggestDelay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.SuggestDelay\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"SuggestDelay"}},{"Kind":"Components.Component","Name":"Delimiters","TypeName":"System.Collections.Generic.List<System.Char>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Delimiters\">\r\n            <summary>\r\n            Characters, when typed, divide the current input into separate tags.\r\n            Default is comma, semicolon and space.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.Char>","Common.PropertyName":"Delimiters"}},{"Kind":"Components.Component","Name":"ShowAddButton","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\">\r\n            <summary>\r\n            Indicates whether the add-icon (+) should be displayed.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"ShowAddButton"}},{"Kind":"Components.Component","Name":"AddButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.AddButtonText\">\r\n            <summary>\r\n            Optional text for the add-button.\r\n            Displayed only when there are no tags (the <c>Value</c> is empty).\r\n            Default is <c>null</c> (none).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AddButtonText"}},{"Kind":"Components.Component","Name":"Naked","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Naked\">\r\n            <summary>\r\n            Indicates whether a \"naked\" variant should be displayed (no border).\r\n            Default is <c>false</c>.\r\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Naked"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"TagBadgeSettings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.TagBadgeSettings\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\r\n            Default is <c>Color=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Light\" />\"</c> and <c>TextColor=\"<see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ThemeColor.Dark\" />\"</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"TagBadgeSettings"}},{"Kind":"Components.Component","Name":"LabelType","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelType\">\r\n            <inheritdoc cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1\" />\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType?","Common.PropertyName":"LabelType"}},{"Kind":"Components.Component","Name":"InputSize","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputSize\">\r\n            <summary>\r\n            Size of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize?","Common.PropertyName":"InputSize"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"ValidationMessageMode","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ValidationMessageMode\">\r\n            <summary>\r\n            Specifies how the validation message should be displayed.<br />\r\n            Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode.Regular\" />, you can override application-wide default for all inputs in <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase.Defaults\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode?","Common.PropertyName":"ValidationMessageMode"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Label\">\r\n            <summary>\r\n            Label text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"LabelTemplate"}},{"Kind":"Components.Component","Name":"Hint","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Hint\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Hint"}},{"Kind":"Components.Component","Name":"HintTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HintTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.CssClass\">\r\n            <summary>\r\n            Custom CSS class to render with wrapping div.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"LabelCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the label.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"LabelCssClass"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.InputCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"GenerateChip","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.GenerateChip\">\r\n            <summary>\r\n            When <c>true</c>, <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxChipGenerator\" /> is used to generate chip item(s). Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"GenerateChip"}},{"Kind":"Components.Component","Name":"ChipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChipTemplate"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.Enabled\">\r\n            <summary>\r\n            When <c>null</c> (default), the <c>Enabled</c> value is received from cascading <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.FormState\" />.\r\n            When value is <c>false</c>, input is rendered as disabled.\r\n            To set multiple controls as disabled use <seealso cref=\"T:Havit.Blazor.Components.Web.HxFormState\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<global::System.String>>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.List<System.String>>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Collections.Generic.List<global::System.String>>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":375027233,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":265363812,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":495970051,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":-179798914,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":-867321293,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":637233166,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.LabelTemplate\">\r\n            <summary>\r\n            Label content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.LabelTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":-1814339894,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":-1019850286,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.HintTemplate\">\r\n            <summary>\r\n            Hint to render after input as form-text.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HintTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.HintTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":343010348,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":1120448227,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputBase`1.ChipTemplate\">\r\n            <summary>\r\n            Chip template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ChipTemplate","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":-1956924830,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessenger","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessenger\">\r\n            <summary>\r\n            <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer\" /> wrapper for displaying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToast\" /> messages dispatched through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessengerService\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxMessenger\">https://havit.blazor.eu/components/HxMessenger</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxMessenger"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessenger.Position\">\r\n            <summary>\r\n            Position of the messages. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition.None\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessenger.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessenger","Common.TypeNameIdentifier":"HxMessenger"}},{"HashCode":1384680955,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMessenger","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessenger\">\r\n            <summary>\r\n            <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer\" /> wrapper for displaying <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToast\" /> messages dispatched through <see cref=\"T:Havit.Blazor.Components.Web.IHxMessengerService\" />.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxMessenger\">https://havit.blazor.eu/components/HxMessenger</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxMessenger"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessenger.Position\">\r\n            <summary>\r\n            Position of the messages. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition.None\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxMessenger.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMessenger","Common.TypeNameIdentifier":"HxMessenger"}},{"HashCode":2039605410,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToast","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToast\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/toasts/\">Bootstrap Toast</see> component. Not intended to be used in user code, use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessenger\" />.\r\n            After first render component never updates.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxToast\">https://havit.blazor.eu/components/HxToast</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxToast"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.Color\">\r\n            <summary>\r\n            Color-scheme.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"AutohideDelay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.AutohideDelay\">\r\n            <summary>\r\n            Delay in milliseconds to automatically hide toast.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"AutohideDelay"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.CssClass\">\r\n            <summary>\r\n            Css class to render with toast.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderIcon\">\r\n            <summary>\r\n            Header icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"HeaderIcon"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderText\">\r\n            <summary>\r\n            Header text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"ContentText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentText\">\r\n            <summary>\r\n            Content (body) text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContentText"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate\">\r\n            <summary>\r\n            Content (body) template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ContentTemplate"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether to show close button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"OnToastHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.OnToastHidden\">\r\n            <summary>\r\n            Fires when toast is hidden (button or autohide).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnToastHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToast","Common.TypeNameIdentifier":"HxToast"}},{"HashCode":-860204705,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToast","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxToast\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/toasts/\">Bootstrap Toast</see> component. Not intended to be used in user code, use <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxMessenger\" />.\r\n            After first render component never updates.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxToast\">https://havit.blazor.eu/components/HxToast</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxToast"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Color","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.Color\">\r\n            <summary>\r\n            Color-scheme.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ThemeColor?","Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"AutohideDelay","TypeName":"System.Int32?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.AutohideDelay\">\r\n            <summary>\r\n            Delay in milliseconds to automatically hide toast.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32?","Common.PropertyName":"AutohideDelay"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.CssClass\">\r\n            <summary>\r\n            Css class to render with toast.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HeaderIcon","TypeName":"Havit.Blazor.Components.Web.IconBase","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderIcon\">\r\n            <summary>\r\n            Header icon.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"HeaderIcon"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderText\">\r\n            <summary>\r\n            Header text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"HeaderTemplate"}},{"Kind":"Components.Component","Name":"ContentText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentText\">\r\n            <summary>\r\n            Content (body) text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ContentText"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate\">\r\n            <summary>\r\n            Content (body) template.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ContentTemplate"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ShowCloseButton\">\r\n            <summary>\r\n            Indicates whether to show close button.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"OnToastHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.OnToastHidden\">\r\n            <summary>\r\n            Fires when toast is hidden (button or autohide).\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnToastHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToast","Common.TypeNameIdentifier":"HxToast"}},{"HashCode":-130775419,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"HxToast"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate","Common.TypeNameIdentifier":"HxToast"}},{"HashCode":1655144514,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate\">\r\n            <summary>\r\n            Header template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxToast"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToast.HeaderTemplate","Common.TypeNameIdentifier":"HxToast"}},{"HashCode":-1717519309,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate\">\r\n            <summary>\r\n            Content (body) template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"HxToast"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate","Common.TypeNameIdentifier":"HxToast"}},{"HashCode":267778442,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate\">\r\n            <summary>\r\n            Content (body) template.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxToast"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToast.ContentTemplate","Common.TypeNameIdentifier":"HxToast"}},{"HashCode":-1871085280,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxToastContainer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.Position\">\r\n            <summary>\r\n            Positioning of the toasts on screen.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent\">\r\n            <summary>\r\n            Toasts to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer","Common.TypeNameIdentifier":"HxToastContainer"}},{"HashCode":-412003696,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.Position\">\r\n            <summary>\r\n            Positioning of the toasts on screen.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ToastContainerPosition","Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.CssClass\">\r\n            <summary>\r\n            Additional CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent\">\r\n            <summary>\r\n            Toasts to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer","Common.TypeNameIdentifier":"HxToastContainer"}},{"HashCode":579124780,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent\">\r\n            <summary>\r\n            Toasts to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxToastContainer"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent","Common.TypeNameIdentifier":"HxToastContainer"}},{"HashCode":192002365,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent\">\r\n            <summary>\r\n            Toasts to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxToastContainer.ChildContent","Common.TypeNameIdentifier":"HxToastContainer"}},{"HashCode":-45156950,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPopover","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPopover\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/popovers/\">Bootstrap Popover</see> component.<br />\r\n            Rendered as a <c>span</c> wrapper to fully support popovers on disabled elements (see example in <see href=\"https://getbootstrap.com/docs/5.3/components/popovers/#disabled-elements\">Disabled elements</see> in the Bootstrap popover documentation).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxPopover\">https://havit.blazor.eu/components/HxPopover</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxPopover"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PopoverSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PopoverSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Title\">\r\n            <summary>\r\n            Popover title.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Content\">\r\n            <summary>\r\n            Popover content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Placement\">\r\n            <summary>\r\n            Popover placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement.Right\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement","Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"Trigger","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Trigger\">\r\n            <summary>\r\n            Popover trigger(s). Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger.Click\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger","Common.PropertyName":"Trigger"}},{"Kind":"Components.Component","Name":"Html","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Html\">\r\n            <summary>\r\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\r\n            Use text if you're worried about XSS attacks.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Html"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Container\">\r\n            <summary>\r\n            Appends the tooltip/popover to a specific element. Default is <c>body</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Container"}},{"Kind":"Components.Component","Name":"Sanitize","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Sanitize\">\r\n            <summary>\r\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Sanitize"}},{"Kind":"Components.Component","Name":"Offset","TypeName":"(System.Int32 X, System.Int32 Y)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Offset\">\r\n            <summary>\r\n            Offset of the component relative to its target (ChildContent).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)?","Common.PropertyName":"Offset"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Animation\">\r\n            <summary>\r\n            Apply a CSS fade transition to the tooltip (enable/disable).<br />\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.CssClass\">\r\n            <summary>\r\n            Custom CSS class to add.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"WrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.WrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"WrapperCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnShown\">\r\n            <summary>\r\n            Fired when the content has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnHidden\">\r\n            <summary>\r\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPopover","Common.TypeNameIdentifier":"HxPopover"}},{"HashCode":-1680887685,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPopover","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxPopover\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/popovers/\">Bootstrap Popover</see> component.<br />\r\n            Rendered as a <c>span</c> wrapper to fully support popovers on disabled elements (see example in <see href=\"https://getbootstrap.com/docs/5.3/components/popovers/#disabled-elements\">Disabled elements</see> in the Bootstrap popover documentation).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxPopover\">https://havit.blazor.eu/components/HxPopover</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxPopover"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PopoverSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PopoverSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Title\">\r\n            <summary>\r\n            Popover title.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Content\">\r\n            <summary>\r\n            Popover content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Placement\">\r\n            <summary>\r\n            Popover placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement.Right\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PopoverPlacement","Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"Trigger","TypeName":"Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxPopover.Trigger\">\r\n            <summary>\r\n            Popover trigger(s). Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger.Click\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.PopoverTrigger","Common.PropertyName":"Trigger"}},{"Kind":"Components.Component","Name":"Html","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Html\">\r\n            <summary>\r\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\r\n            Use text if you're worried about XSS attacks.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Html"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Container\">\r\n            <summary>\r\n            Appends the tooltip/popover to a specific element. Default is <c>body</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Container"}},{"Kind":"Components.Component","Name":"Sanitize","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Sanitize\">\r\n            <summary>\r\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Sanitize"}},{"Kind":"Components.Component","Name":"Offset","TypeName":"(System.Int32 X, System.Int32 Y)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Offset\">\r\n            <summary>\r\n            Offset of the component relative to its target (ChildContent).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)?","Common.PropertyName":"Offset"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Animation\">\r\n            <summary>\r\n            Apply a CSS fade transition to the tooltip (enable/disable).<br />\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.CssClass\">\r\n            <summary>\r\n            Custom CSS class to add.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"WrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.WrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"WrapperCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnShown\">\r\n            <summary>\r\n            Fired when the content has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnHidden\">\r\n            <summary>\r\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPopover","Common.TypeNameIdentifier":"HxPopover"}},{"HashCode":-1881950167,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxPopover"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent","Common.TypeNameIdentifier":"HxPopover"}},{"HashCode":889353201,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxPopover"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPopover.ChildContent","Common.TypeNameIdentifier":"HxPopover"}},{"HashCode":797306521,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTooltip\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/tooltips/\">Bootstrap Tooltip</see> component, activates on hover.<br />\r\n            Rendered as a <c>span</c> wrapper to fully support tooltips on disabled elements (see example in <see href=\"https://getbootstrap.com/docs/5.3/components/tooltips/#disabled-elements\">Disabled elements</see> in the Bootstrap tooltip documentation).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxTooltip\">https://havit.blazor.eu/components/HxTooltip</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Text\">\r\n            <summary>\r\n            Tooltip text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Placement\">\r\n            <summary>\r\n            Tooltip placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement.Top\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"Trigger","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Trigger\">\r\n            <summary>\r\n            Tooltip trigger(s). Default is <c><see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Hover\" /> | <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Focus\" /></c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger","Common.PropertyName":"Trigger"}},{"Kind":"Components.Component","Name":"Html","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Html\">\r\n            <summary>\r\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\r\n            Use text if you're worried about XSS attacks.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Html"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Container\">\r\n            <summary>\r\n            Appends the tooltip/popover to a specific element. Default is <c>body</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Container"}},{"Kind":"Components.Component","Name":"Sanitize","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Sanitize\">\r\n            <summary>\r\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Sanitize"}},{"Kind":"Components.Component","Name":"Offset","TypeName":"(System.Int32 X, System.Int32 Y)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Offset\">\r\n            <summary>\r\n            Offset of the component relative to its target (ChildContent).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)?","Common.PropertyName":"Offset"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Animation\">\r\n            <summary>\r\n            Apply a CSS fade transition to the tooltip (enable/disable).<br />\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.CssClass\">\r\n            <summary>\r\n            Custom CSS class to add.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"WrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.WrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"WrapperCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnShown\">\r\n            <summary>\r\n            Fired when the content has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnHidden\">\r\n            <summary>\r\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip","Common.TypeNameIdentifier":"HxTooltip"}},{"HashCode":-788192596,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTooltip\">\r\n            <summary>\r\n            <see href=\"https://getbootstrap.com/docs/5.3/components/tooltips/\">Bootstrap Tooltip</see> component, activates on hover.<br />\r\n            Rendered as a <c>span</c> wrapper to fully support tooltips on disabled elements (see example in <see href=\"https://getbootstrap.com/docs/5.3/components/tooltips/#disabled-elements\">Disabled elements</see> in the Bootstrap tooltip documentation).<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxTooltip\">https://havit.blazor.eu/components/HxTooltip</see>\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Settings","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Settings\">\r\n            <summary>\r\n            Set of settings to be applied to the component instance (overrides <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Defaults\" />, overridden by individual parameters).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipSettings","Common.PropertyName":"Settings"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Text\">\r\n            <summary>\r\n            Tooltip text.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Placement\">\r\n            <summary>\r\n            Tooltip placement. Default is <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement.Top\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipPlacement","Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"Trigger","TypeName":"Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger","IsEnum":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTooltip.Trigger\">\r\n            <summary>\r\n            Tooltip trigger(s). Default is <c><see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Hover\" /> | <see cref=\"F:Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger.Focus\" /></c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.TooltipTrigger","Common.PropertyName":"Trigger"}},{"Kind":"Components.Component","Name":"Html","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Html\">\r\n            <summary>\r\n            Allows you to insert HTML. If <c>false</c>, <c>innerText</c> property will be used to insert content into the DOM.\r\n            Use text if you're worried about XSS attacks.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Html"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Container\">\r\n            <summary>\r\n            Appends the tooltip/popover to a specific element. Default is <c>body</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Container"}},{"Kind":"Components.Component","Name":"Sanitize","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Sanitize\">\r\n            <summary>\r\n            Enable or disable the sanitization. If activated HTML content will be sanitized. <see href=\"https://getbootstrap.com/docs/5.3/getting-started/javascript/#sanitizer\">See the sanitizer section in Bootstrap JavaScript documentation</see>.\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Sanitize"}},{"Kind":"Components.Component","Name":"Offset","TypeName":"(System.Int32 X, System.Int32 Y)?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Offset\">\r\n            <summary>\r\n            Offset of the component relative to its target (ChildContent).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)?","Common.PropertyName":"Offset"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.Animation\">\r\n            <summary>\r\n            Apply a CSS fade transition to the tooltip (enable/disable).<br />\r\n            Default is <c>true</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.CssClass\">\r\n            <summary>\r\n            Custom CSS class to add.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"WrapperCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.WrapperCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with the <c>span</c> wrapper of the child-content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"WrapperCssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnShown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnShown\">\r\n            <summary>\r\n            Fired when the content has been made visible to the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnShown"}},{"Kind":"Components.Component","Name":"OnHidden","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.OnHidden\">\r\n            <summary>\r\n            Fired when the content has finished being hidden from the user and CSS transitions have completed.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnHidden"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip","Common.TypeNameIdentifier":"HxTooltip"}},{"HashCode":-2099741242,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxTooltip"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent","Common.TypeNameIdentifier":"HxTooltip"}},{"HashCode":1743040477,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxTooltipInternalBase.ChildContent\">\r\n            <summary>\r\n            Child content to wrap.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTooltip.ChildContent","Common.TypeNameIdentifier":"HxTooltip"}},{"HashCode":-598041651,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1\">\r\n            <summary>\r\n            Component to display hierarchy data structure.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxTreeView\">https://havit.blazor.eu/components/HxTreeView</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\">Type of tree data item.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxTreeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.IEnumerable<TItem>","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.Items\">\r\n            <summary>\r\n            Collection of hierarchy data to display.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"SelectedItem","TypeName":"TItem","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.SelectedItem\">\r\n            <summary>\r\n            Selected data item.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TItem","Components.GenericTyped":"True","Common.PropertyName":"SelectedItem"}},{"Kind":"Components.Component","Name":"SelectedItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.SelectedItemChanged\">\r\n            <summary>\r\n            Event fires when selected data item changes.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedItemChanged"}},{"Kind":"Components.Component","Name":"ItemTitleSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemTitleSelector\">\r\n            <summary>\r\n            Selector to display item title from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTitleSelector"}},{"Kind":"Components.Component","Name":"ItemIconSelector","TypeName":"System.Func<TItem, Havit.Blazor.Components.Web.IconBase>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemIconSelector\">\r\n            <summary>\r\n            Selector to display icon from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::Havit.Blazor.Components.Web.IconBase>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemIconSelector"}},{"Kind":"Components.Component","Name":"ItemInitialExpandedSelector","TypeName":"System.Func<TItem, System.Boolean>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemInitialExpandedSelector\">\r\n            <summary>\r\n            Selector for initial expansion state for data item.<br />\r\n            Default state is <c>false</c> (collapsed).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Boolean>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemInitialExpandedSelector"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemCssClass\">\r\n            <summary>\r\n            Item CSS class (same for all items).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemCssClassSelector\">\r\n            <summary>\r\n            Selector for item CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemChildrenSelector","TypeName":"System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemChildrenSelector\">\r\n            <summary>\r\n            Selector to display children collection for current data item. Children collection should have same type as current item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Collections.Generic.IEnumerable<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemChildrenSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.CssClass\">\r\n            <summary>\r\n            Additional CSS class to be applied.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxTreeView"}},{"HashCode":935174388,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1\">\r\n            <summary>\r\n            Component to display hierarchy data structure.<br />\r\n            Full documentation and demos: <see href=\"https://havit.blazor.eu/components/HxTreeView\">https://havit.blazor.eu/components/HxTreeView</see>\r\n            </summary>\r\n            <typeparam name=\"TItem\">Type of tree data item.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.IEnumerable<TItem>","IsEditorRequired":true,"Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.Items\">\r\n            <summary>\r\n            Collection of hierarchy data to display.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"SelectedItem","TypeName":"TItem","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.SelectedItem\">\r\n            <summary>\r\n            Selected data item.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TItem","Components.GenericTyped":"True","Common.PropertyName":"SelectedItem"}},{"Kind":"Components.Component","Name":"SelectedItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.SelectedItemChanged\">\r\n            <summary>\r\n            Event fires when selected data item changes.\r\n            </summary>\t\t\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedItemChanged"}},{"Kind":"Components.Component","Name":"ItemTitleSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemTitleSelector\">\r\n            <summary>\r\n            Selector to display item title from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemTitleSelector"}},{"Kind":"Components.Component","Name":"ItemIconSelector","TypeName":"System.Func<TItem, Havit.Blazor.Components.Web.IconBase>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemIconSelector\">\r\n            <summary>\r\n            Selector to display icon from data item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::Havit.Blazor.Components.Web.IconBase>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemIconSelector"}},{"Kind":"Components.Component","Name":"ItemInitialExpandedSelector","TypeName":"System.Func<TItem, System.Boolean>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemInitialExpandedSelector\">\r\n            <summary>\r\n            Selector for initial expansion state for data item.<br />\r\n            Default state is <c>false</c> (collapsed).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Boolean>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemInitialExpandedSelector"}},{"Kind":"Components.Component","Name":"ItemCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemCssClass\">\r\n            <summary>\r\n            Item CSS class (same for all items).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ItemCssClass"}},{"Kind":"Components.Component","Name":"ItemCssClassSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemCssClassSelector\">\r\n            <summary>\r\n            Selector for item CSS class.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemCssClassSelector"}},{"Kind":"Components.Component","Name":"ItemChildrenSelector","TypeName":"System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemChildrenSelector\">\r\n            <summary>\r\n            Selector to display children collection for current data item. Children collection should have same type as current item.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Collections.Generic.IEnumerable<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ItemChildrenSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.CssClass\">\r\n            <summary>\r\n            Additional CSS class to be applied.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxTreeView"}},{"HashCode":-1132716773,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxTreeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxTreeView"}},{"HashCode":138885682,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.HxTreeView`1.ItemTemplate\">\r\n            <summary>\r\n            Template for the item content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxTreeView"}},{"HashCode":1397199623,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap._Imports","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap._Imports","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1782616836,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap._Imports","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap._Imports"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap._Imports","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":430948749,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAutosuggestInputInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnInput"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnFocus"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnBlur"}},{"Kind":"Components.Component","Name":"OnMouseDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnMouseDown"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal.DropdownOffset\">\r\n            <summary>\r\n            Offset between the dropdown and the input.\r\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal","Common.TypeNameIdentifier":"HxAutosuggestInputInternal"}},{"HashCode":1270968775,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnInput"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnFocus"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnBlur"}},{"Kind":"Components.Component","Name":"OnMouseDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnMouseDown"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal.DropdownOffset\">\r\n            <summary>\r\n            Offset between the dropdown and the input.\r\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInputInternal","Common.TypeNameIdentifier":"HxAutosuggestInputInternal"}},{"HashCode":1832843103,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAutosuggestInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when TValue is same as TItemTime.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set ToString() is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items collection is empty\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"ItemFromValueResolver","TypeName":"System.Func<TValue, System.Threading.Tasks.Task<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ItemFromValueResolver\">\r\n            <summary>\r\n            Gets item from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.Value\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TValue, global::System.Threading.Tasks.Task<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"ItemFromValueResolver"}},{"Kind":"Components.Component","Name":"MinimumLengthEffective","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.MinimumLengthEffective\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"MinimumLengthEffective"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"DelayEffective","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.DelayEffective\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"DelayEffective"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"SearchIconEffective","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SearchIconEffective"}},{"Kind":"Components.Component","Name":"ClearIconEffective","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ClearIconEffective"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"LabelTypeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelTypeEffective"}},{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.DropdownOffset\">\r\n            <summary>\r\n            Offset between the dropdown and the input.\r\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":-1517994519,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.AutosuggestDataProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ValueSelector\">\r\n            <summary>\r\n            Selects value from item.\r\n            Not required when TValue is same as TItemTime.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.TextSelector\">\r\n            <summary>\r\n            Selects text to display from item.\r\n            When not set ToString() is used.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items collection is empty\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"ItemFromValueResolver","TypeName":"System.Func<TValue, System.Threading.Tasks.Task<TItem>>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ItemFromValueResolver\">\r\n            <summary>\r\n            Gets item from <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.Value\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TValue, global::System.Threading.Tasks.Task<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"ItemFromValueResolver"}},{"Kind":"Components.Component","Name":"MinimumLengthEffective","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.MinimumLengthEffective\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"MinimumLengthEffective"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"DelayEffective","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.DelayEffective\">\r\n            <summary>\r\n            Debounce delay in milliseconds. Default is <c>300 ms</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"DelayEffective"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"SearchIconEffective","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"SearchIconEffective"}},{"Kind":"Components.Component","Name":"ClearIconEffective","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"ClearIconEffective"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"LabelTypeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelTypeEffective"}},{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}},{"Kind":"Components.Component","Name":"DropdownOffset","TypeName":"(System.Int32 Skidding, System.Int32 Distance)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.DropdownOffset\">\r\n            <summary>\r\n            Offset between the dropdown and the input.\r\n            <see href=\"https://popper.js.org/docs/v2/modifiers/offset/#options\" />\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 Skidding, global::System.Int32 Distance)","Common.PropertyName":"DropdownOffset"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":1412713352,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxAutosuggestInternal"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":493207748,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.ItemTemplate\">\r\n            <summary>\r\n            Template to display item.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.ItemTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":1098192222,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items collection is empty\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"HxAutosuggestInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":959452790,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.EmptyTemplate\">\r\n            <summary>\r\n            Template to display when items collection is empty\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.EmptyTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":-38576853,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxAutosuggestInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":613237057,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":-1432347136,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxAutosuggestInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":-164449144,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":-417765115,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAutosuggestItemsInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"OnItemClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnItemClick"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"FocusedItemIndex","TypeName":"System.Int32","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"FocusedItemIndex"}},{"Kind":"Components.Component","Name":"FocusedItemCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FocusedItemCssClass"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxAutosuggestItemsInternal"}},{"HashCode":-1258550927,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"OnItemClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnItemClick"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemTemplate"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"EmptyTemplate"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"FocusedItemIndex","TypeName":"System.Int32","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"FocusedItemIndex"}},{"Kind":"Components.Component","Name":"FocusedItemCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FocusedItemCssClass"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxAutosuggestItemsInternal"}},{"HashCode":-5703308,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"HxAutosuggestItemsInternal"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxAutosuggestItemsInternal"}},{"HashCode":-1861139953,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.ItemTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.ItemTemplate","Common.TypeNameIdentifier":"HxAutosuggestItemsInternal"}},{"HashCode":1631937706,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"HxAutosuggestItemsInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.EmptyTemplate","Common.TypeNameIdentifier":"HxAutosuggestItemsInternal"}},{"HashCode":-2026254443,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.EmptyTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestItemsInternal<TItem>.EmptyTemplate","Common.TypeNameIdentifier":"HxAutosuggestItemsInternal"}},{"HashCode":1937476280,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxFormValueComponentRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer.FormValueComponent\">\r\n            <summary>\r\n            Values for component renderer.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer","Common.TypeNameIdentifier":"HxFormValueComponentRenderer"}},{"HashCode":2058279323,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer.FormValueComponent\">\r\n            <summary>\r\n            Values for component renderer.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer","Common.TypeNameIdentifier":"HxFormValueComponentRenderer"}},{"HashCode":1826359183,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxFormValueComponentRenderer_Label"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label","Common.TypeNameIdentifier":"HxFormValueComponentRenderer_Label"}},{"HashCode":-1927634879,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxFormValueComponentRenderer_Label","Common.TypeNameIdentifier":"HxFormValueComponentRenderer_Label"}},{"HashCode":740171696,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDateInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"ShowPredefinedDatesEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowPredefinedDatesEffective"}},{"Kind":"Components.Component","Name":"PredefinedDatesEffective","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Common.PropertyName":"PredefinedDatesEffective"}},{"Kind":"Components.Component","Name":"ParsingErrorMessageEffective","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessageEffective"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSizeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize","Common.PropertyName":"InputSizeEffective"}},{"Kind":"Components.Component","Name":"CalendarIconEffective","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CalendarIconEffective"}},{"Kind":"Components.Component","Name":"ShowClearButtonEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowClearButtonEffective"}},{"Kind":"Components.Component","Name":"MinDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MinDateEffective"}},{"Kind":"Components.Component","Name":"MaxDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MaxDateEffective"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProviderEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProviderEffective"}},{"Kind":"Components.Component","Name":"LabelTypeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelTypeEffective"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":-857131602,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"ShowPredefinedDatesEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowPredefinedDatesEffective"}},{"Kind":"Components.Component","Name":"PredefinedDatesEffective","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDatePredefinedDatesItem>","Common.PropertyName":"PredefinedDatesEffective"}},{"Kind":"Components.Component","Name":"ParsingErrorMessageEffective","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessageEffective"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"InputSizeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize","Common.PropertyName":"InputSizeEffective"}},{"Kind":"Components.Component","Name":"CalendarIconEffective","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"CalendarIconEffective"}},{"Kind":"Components.Component","Name":"ShowClearButtonEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowClearButtonEffective"}},{"Kind":"Components.Component","Name":"MinDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MinDateEffective"}},{"Kind":"Components.Component","Name":"MaxDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MaxDateEffective"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProviderEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProviderEffective"}},{"Kind":"Components.Component","Name":"LabelTypeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelTypeEffective"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"FormValueComponent","TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.Internal.IFormValueComponent","Common.PropertyName":"FormValueComponent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":830128981,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputDateInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":-1094227126,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":-181474534,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputDateInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":-1631078578,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal`1.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":377274550,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDateRangeInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"FromInputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FromInputId"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputSizeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize","Common.PropertyName":"InputSizeEffective"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"ValidationMessageModeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","Common.PropertyName":"ValidationMessageModeEffective"}},{"Kind":"Components.Component","Name":"ShowPredefinedDateRangesEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowPredefinedDateRangesEffective"}},{"Kind":"Components.Component","Name":"PredefinedDateRangesEffective","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Common.PropertyName":"PredefinedDateRangesEffective"}},{"Kind":"Components.Component","Name":"FromParsingErrorMessageEffective","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FromParsingErrorMessageEffective"}},{"Kind":"Components.Component","Name":"ToParsingErrorMessageEffective","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ToParsingErrorMessageEffective"}},{"Kind":"Components.Component","Name":"ShowClearButtonEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowClearButtonEffective"}},{"Kind":"Components.Component","Name":"MinDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MinDateEffective"}},{"Kind":"Components.Component","Name":"MaxDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MaxDateEffective"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProviderEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProviderEffective"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"Havit.DateTimeRange","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.DateTimeRange","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.DateTimeRange>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<Havit.DateTimeRange>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::Havit.DateTimeRange>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","Common.TypeNameIdentifier":"HxInputDateRangeInternal"}},{"HashCode":-140192229,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"FromInputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FromInputId"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputSizeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize","Common.PropertyName":"InputSizeEffective"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"ValidationMessageModeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.ValidationMessageMode","Common.PropertyName":"ValidationMessageModeEffective"}},{"Kind":"Components.Component","Name":"ShowPredefinedDateRangesEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowPredefinedDateRangesEffective"}},{"Kind":"Components.Component","Name":"PredefinedDateRangesEffective","TypeName":"System.Collections.Generic.IEnumerable<Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::Havit.Blazor.Components.Web.Bootstrap.InputDateRangePredefinedRangesItem>","Common.PropertyName":"PredefinedDateRangesEffective"}},{"Kind":"Components.Component","Name":"FromParsingErrorMessageEffective","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"FromParsingErrorMessageEffective"}},{"Kind":"Components.Component","Name":"ToParsingErrorMessageEffective","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ToParsingErrorMessageEffective"}},{"Kind":"Components.Component","Name":"ShowClearButtonEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowClearButtonEffective"}},{"Kind":"Components.Component","Name":"MinDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MinDateEffective"}},{"Kind":"Components.Component","Name":"MaxDateEffective","TypeName":"System.DateTime","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.DateTime","Common.PropertyName":"MaxDateEffective"}},{"Kind":"Components.Component","Name":"CalendarDateCustomizationProviderEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.CalendarDateCustomizationProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Common.PropertyName":"CalendarDateCustomizationProviderEffective"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"Havit.DateTimeRange","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.DateTimeRange","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.DateTimeRange>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<Havit.DateTimeRange>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::Havit.DateTimeRange>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","Common.TypeNameIdentifier":"HxInputDateRangeInternal"}},{"HashCode":697400199,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxMultiSelectInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputText","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputText"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"ItemsToRender","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemsToRender"}},{"Kind":"Components.Component","Name":"SelectedIndexes","TypeName":"System.Collections.Generic.List<System.Int32>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.Int32>","Common.PropertyName":"SelectedIndexes"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<TValue>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"NullDataText","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullDataText"}},{"Kind":"Components.Component","Name":"ItemSelectionChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.SelectionChangedArgs>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.SelectionChangedArgs>","Components.GenericTyped":"True","Common.PropertyName":"ItemSelectionChanged"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxMultiSelectInternal"}},{"HashCode":391837368,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"InputCssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputCssClass"}},{"Kind":"Components.Component","Name":"InputText","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputText"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"ItemsToRender","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemsToRender"}},{"Kind":"Components.Component","Name":"SelectedIndexes","TypeName":"System.Collections.Generic.List<System.Int32>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.Int32>","Common.PropertyName":"SelectedIndexes"}},{"Kind":"Components.Component","Name":"TextSelector","TypeName":"System.Func<TItem, System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TextSelector"}},{"Kind":"Components.Component","Name":"ValueSelector","TypeName":"System.Func<TItem, TValue>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, TValue>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ValueSelector"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<TValue>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<TValue>","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"NullDataText","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"NullDataText"}},{"Kind":"Components.Component","Name":"ItemSelectionChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.SelectionChangedArgs>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.SelectionChangedArgs>","Components.GenericTyped":"True","Common.PropertyName":"ItemSelectionChanged"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxMultiSelectInternal"}},{"HashCode":-1156586773,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxMultiSelectInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxMultiSelectInternal"}},{"HashCode":-545785513,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxMultiSelectInternal"}},{"HashCode":-2066055304,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxMultiSelectInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxMultiSelectInternal"}},{"HashCode":-1095560129,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal`2.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectInternal<TValue, TItem>.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxMultiSelectInternal"}},{"HashCode":1016382071,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxSearchBoxItemInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSearchBoxItemInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"Subtitle","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Subtitle"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxSearchBoxItemInternal","Common.TypeNameIdentifier":"HxSearchBoxItemInternal"}},{"HashCode":-1963334182,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxSearchBoxItemInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxSearchBoxItemInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"Subtitle","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Subtitle"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"Havit.Blazor.Components.Web.IconBase","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.IconBase","Common.PropertyName":"Icon"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxSearchBoxItemInternal","Common.TypeNameIdentifier":"HxSearchBoxItemInternal"}},{"HashCode":-1629386613,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectGridColumnInternal<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxMultiSelectGridColumnInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectGridColumnInternal<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"SelectedDataItems","TypeName":"System.Collections.Generic.HashSet<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.HashSet<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItems"}},{"Kind":"Components.Component","Name":"AllDataItemsSelected","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllDataItemsSelected"}},{"Kind":"Components.Component","Name":"OnSelectAllClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnSelectAllClicked"}},{"Kind":"Components.Component","Name":"OnSelectNoneClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnSelectNoneClicked"}},{"Kind":"Components.Component","Name":"OnSelectDataItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnSelectDataItemClicked"}},{"Kind":"Components.Component","Name":"OnUnselectDataItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnUnselectDataItemClicked"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectGridColumnInternal<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxMultiSelectGridColumnInternal"}},{"HashCode":1643663657,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectGridColumnInternal<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectGridColumnInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectGridColumnInternal<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"SelectedDataItems","TypeName":"System.Collections.Generic.HashSet<TItem>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.HashSet<TItem>","Components.GenericTyped":"True","Common.PropertyName":"SelectedDataItems"}},{"Kind":"Components.Component","Name":"AllDataItemsSelected","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllDataItemsSelected"}},{"Kind":"Components.Component","Name":"OnSelectAllClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnSelectAllClicked"}},{"Kind":"Components.Component","Name":"OnSelectNoneClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnSelectNoneClicked"}},{"Kind":"Components.Component","Name":"OnSelectDataItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnSelectDataItemClicked"}},{"Kind":"Components.Component","Name":"OnUnselectDataItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnUnselectDataItemClicked"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxMultiSelectGridColumnInternal<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxMultiSelectGridColumnInternal"}},{"HashCode":-1116577205,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> variation which adds <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.OnClick\" /> and related stuff.\r\n            </summary>\r\n            <remarks>\r\n            <see href=\"https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682\">https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682</see>.\r\n            </remarks>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNavLinkInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ActiveClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch","Common.PropertyName":"Match"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal","Common.TypeNameIdentifier":"HxNavLinkInternal"}},{"HashCode":-1469467512,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\" /> variation which adds <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.OnClick\" /> and related stuff.\r\n            </summary>\r\n            <remarks>\r\n            <see href=\"https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682\">https://github.com/dotnet/aspnetcore/issues/18460#issuecomment-577175682</see>.\r\n            </remarks>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.OnClick\">\r\n            <summary>\r\n            Raised when the item is clicked.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Common.PropertyName":"OnClick"}},{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ActiveClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch","Common.PropertyName":"Match"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal","Common.TypeNameIdentifier":"HxNavLinkInternal"}},{"HashCode":1465597242,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HxNavLinkInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent","Common.TypeNameIdentifier":"HxNavLinkInternal"}},{"HashCode":1418072903,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxNavLinkInternal.ChildContent","Common.TypeNameIdentifier":"HxNavLinkInternal"}},{"HashCode":479840700,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInputInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputTagsAutosuggestInputInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnInput"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnFocus"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnBlur"}},{"Kind":"Components.Component","Name":"OnMouseDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnMouseDown"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"Offset","TypeName":"(System.Int32 X, System.Int32 Y)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInputInternal.Offset\">\r\n            <summary>\r\n            Offset between dropdown input and dropdown menu\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)","Common.PropertyName":"Offset"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInputInternal","Common.TypeNameIdentifier":"HxInputTagsAutosuggestInputInternal"}},{"HashCode":856180431,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInputInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInputInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"OnInput"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnFocus"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnBlur"}},{"Kind":"Components.Component","Name":"OnMouseDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback","Common.PropertyName":"OnMouseDown"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"Offset","TypeName":"(System.Int32 X, System.Int32 Y)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInputInternal.Offset\">\r\n            <summary>\r\n            Offset between dropdown input and dropdown menu\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)","Common.PropertyName":"Offset"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsAutosuggestInputInternal","Common.TypeNameIdentifier":"HxInputTagsAutosuggestInputInternal"}},{"HashCode":189235096,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal\">\r\n            <summary>\r\n            Internal implementation for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTags\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputTagsInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AllowCustomTags","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.AllowCustomTags\">\r\n            <summary>\r\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\r\n            Default is <c>true</c> (you can type your own tags).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllowCustomTags"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<global::System.String>>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"SuggestMinimumLengthEffective","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.SuggestMinimumLengthEffective\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"SuggestMinimumLengthEffective"}},{"Kind":"Components.Component","Name":"DelimitersEffective","TypeName":"System.Collections.Generic.List<System.Char>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.DelimitersEffective\">\r\n            <summary>\r\n            Characters, when typed, divide the current input into separate tags.\r\n            Default is comma, semicolon and space.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.Char>","Common.PropertyName":"DelimitersEffective"}},{"Kind":"Components.Component","Name":"ShowAddButtonEffective","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.ShowAddButtonEffective\">\r\n            <summary>\r\n            Indicates whether the add-icon (+) should be displayed.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowAddButtonEffective"}},{"Kind":"Components.Component","Name":"AddButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.AddButtonText\">\r\n            <summary>\r\n            Optional text for the add-button.\r\n            Displayed only when there are no tags (the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Value\" /> is empty).\r\n            Default is <c>null</c> (none).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AddButtonText"}},{"Kind":"Components.Component","Name":"Naked","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Naked\">\r\n            <summary>\r\n            Indicates whether a \"naked\" variant should be displayed (no border).\r\n            Default is <c>false</c>.\r\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Naked"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"TagBadgeSettingsEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.TagBadgeSettingsEffective\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"TagBadgeSettingsEffective"}},{"Kind":"Components.Component","Name":"SuggestDelayEffective","TypeName":"System.Int32","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"SuggestDelayEffective"}},{"Kind":"Components.Component","Name":"CoreFormControlCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.CoreFormControlCssClass\">\r\n            <summary>\r\n            CSS of the wrapping .form-control container (corresponds to InputCssClass on regular inputs)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CoreFormControlCssClass"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"LabelTypeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelTypeEffective"}},{"Kind":"Components.Component","Name":"InputSizeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize","Common.PropertyName":"InputSizeEffective"}},{"Kind":"Components.Component","Name":"InputOffset","TypeName":"(System.Int32 X, System.Int32 Y)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputOffset\">\r\n            <summary>\r\n            Offset between dropdown input and dropdown menu\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)","Common.PropertyName":"InputOffset"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":-1930544769,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"T:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal\">\r\n            <summary>\r\n            Internal implementation for <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxInputTags\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AllowCustomTags","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.AllowCustomTags\">\r\n            <summary>\r\n            Indicates whether you are restricted to suggested items only (<c>false</c>).\r\n            Default is <c>true</c> (you can type your own tags).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"AllowCustomTags"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Collections.Generic.List<System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.List<global::System.String>>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"DataProvider","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputTagsDataProviderDelegate","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Common.PropertyName":"DataProvider"}},{"Kind":"Components.Component","Name":"SuggestMinimumLengthEffective","TypeName":"System.Int32","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.SuggestMinimumLengthEffective\">\r\n            <summary>\r\n            Minimal number of characters to start suggesting. Default is <c>2</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"SuggestMinimumLengthEffective"}},{"Kind":"Components.Component","Name":"DelimitersEffective","TypeName":"System.Collections.Generic.List<System.Char>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.DelimitersEffective\">\r\n            <summary>\r\n            Characters, when typed, divide the current input into separate tags.\r\n            Default is comma, semicolon and space.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.Char>","Common.PropertyName":"DelimitersEffective"}},{"Kind":"Components.Component","Name":"ShowAddButtonEffective","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.ShowAddButtonEffective\">\r\n            <summary>\r\n            Indicates whether the add-icon (+) should be displayed.\r\n            Default is <c>false</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"ShowAddButtonEffective"}},{"Kind":"Components.Component","Name":"AddButtonText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.AddButtonText\">\r\n            <summary>\r\n            Optional text for the add-button.\r\n            Displayed only when there are no tags (the <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Value\" /> is empty).\r\n            Default is <c>null</c> (none).\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"AddButtonText"}},{"Kind":"Components.Component","Name":"Naked","TypeName":"System.Boolean","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Naked\">\r\n            <summary>\r\n            Indicates whether a \"naked\" variant should be displayed (no border).\r\n            Default is <c>false</c>.\r\n            Consider enabling <see cref=\"P:Havit.Blazor.Components.Web.Bootstrap.HxInputTags.ShowAddButton\" /> when using <c>Naked</c>.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Naked"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.Placeholder\">\r\n            <summary>\r\n            Short hint displayed in the input field before the user enters a value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"TagBadgeSettingsEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.TagBadgeSettingsEffective\">\r\n            <summary>\r\n            Settings for the <see cref=\"T:Havit.Blazor.Components.Web.Bootstrap.HxBadge\" /> used to render tags.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.BadgeSettings","Common.PropertyName":"TagBadgeSettingsEffective"}},{"Kind":"Components.Component","Name":"SuggestDelayEffective","TypeName":"System.Int32","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"SuggestDelayEffective"}},{"Kind":"Components.Component","Name":"CoreFormControlCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.CoreFormControlCssClass\">\r\n            <summary>\r\n            CSS of the wrapping .form-control container (corresponds to InputCssClass on regular inputs)\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CoreFormControlCssClass"}},{"Kind":"Components.Component","Name":"InputId","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputId"}},{"Kind":"Components.Component","Name":"EnabledEffective","TypeName":"System.Boolean","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"EnabledEffective"}},{"Kind":"Components.Component","Name":"LabelTypeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.LabelType","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.LabelType","Common.PropertyName":"LabelTypeEffective"}},{"Kind":"Components.Component","Name":"InputSizeEffective","TypeName":"Havit.Blazor.Components.Web.Bootstrap.InputSize","IsEnum":true,"Metadata":{"Common.GloballyQualifiedTypeName":"global::Havit.Blazor.Components.Web.Bootstrap.InputSize","Common.PropertyName":"InputSizeEffective"}},{"Kind":"Components.Component","Name":"InputOffset","TypeName":"(System.Int32 X, System.Int32 Y)","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputOffset\">\r\n            <summary>\r\n            Offset between dropdown input and dropdown menu\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"(global::System.Int32 X, global::System.Int32 Y)","Common.PropertyName":"InputOffset"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.CssClass\">\r\n            <summary>\r\n            Any additional CSS class to apply.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"InputGroupCssClass","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupCssClass\">\r\n            <summary>\r\n            Custom CSS class to render with input-group span.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupCssClass"}},{"Kind":"Components.Component","Name":"InputGroupStartText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartText\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupStartText"}},{"Kind":"Components.Component","Name":"InputGroupStartTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupStartTemplate"}},{"Kind":"Components.Component","Name":"InputGroupEndText","TypeName":"System.String","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndText\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"InputGroupEndText"}},{"Kind":"Components.Component","Name":"InputGroupEndTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"InputGroupEndTemplate"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.AdditionalAttributes\">\r\n            <summary>\r\n            Additional attributes to be splatted onto an underlying HTML input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":647451038,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"HxInputTagsInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":1440881169,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate\">\r\n            <summary>\r\n            Input-group at the beginning of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupStartTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupStartTemplate","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":-42842022,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"HxInputTagsInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":1979397279,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"<member name=\"P:Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate\">\r\n            <summary>\r\n            Input-group at the end of the input.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputGroupEndTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal"}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal.InputGroupEndTemplate","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":1327516141,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxTreeViewItemInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Item","TypeName":"TItem","Metadata":{"Common.GloballyQualifiedTypeName":"TItem","Components.GenericTyped":"True","Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"OnItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnItemSelected"}},{"Kind":"Components.Component","Name":"IsExpanded","TypeName":"System.Boolean?","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"IsExpanded"}},{"Kind":"Components.Component","Name":"TitleSelector","TypeName":"System.Func<TItem, System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TitleSelector"}},{"Kind":"Components.Component","Name":"IconSelector","TypeName":"System.Func<TItem, Havit.Blazor.Components.Web.IconBase>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::Havit.Blazor.Components.Web.IconBase>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"IconSelector"}},{"Kind":"Components.Component","Name":"InitialExpandedSelector","TypeName":"System.Func<TItem, System.Boolean>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Boolean>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"InitialExpandedSelector"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"CssClassSelector","TypeName":"System.Func<TItem, System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"CssClassSelector"}},{"Kind":"Components.Component","Name":"ChildrenSelector","TypeName":"System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Collections.Generic.IEnumerable<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ChildrenSelector"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ContentTemplate"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxTreeViewItemInternal"}},{"HashCode":1205616423,"Kind":"Components.Component","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"Item","TypeName":"TItem","Metadata":{"Common.GloballyQualifiedTypeName":"TItem","Components.GenericTyped":"True","Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"OnItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TItem>","Components.GenericTyped":"True","Common.PropertyName":"OnItemSelected"}},{"Kind":"Components.Component","Name":"IsExpanded","TypeName":"System.Boolean?","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean?","Common.PropertyName":"IsExpanded"}},{"Kind":"Components.Component","Name":"TitleSelector","TypeName":"System.Func<TItem, System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"TitleSelector"}},{"Kind":"Components.Component","Name":"IconSelector","TypeName":"System.Func<TItem, Havit.Blazor.Components.Web.IconBase>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::Havit.Blazor.Components.Web.IconBase>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"IconSelector"}},{"Kind":"Components.Component","Name":"InitialExpandedSelector","TypeName":"System.Func<TItem, System.Boolean>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Boolean>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"InitialExpandedSelector"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"CssClassSelector","TypeName":"System.Func<TItem, System.String>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.String>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"CssClassSelector"}},{"Kind":"Components.Component","Name":"ChildrenSelector","TypeName":"System.Func<TItem, System.Collections.Generic.IEnumerable<TItem>>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Func<TItem, global::System.Collections.Generic.IEnumerable<TItem>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True","Common.PropertyName":"ChildrenSelector"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ContentTemplate"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"HxTreeViewItemInternal"}},{"HashCode":1942192430,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"HxTreeViewItemInternal"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ContentTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate","Common.TypeNameIdentifier":"HxTreeViewItemInternal"}},{"HashCode":374428836,"Kind":"Components.ChildContent","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ContentTemplate' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxTreeViewItemInternal<TItem>.ContentTemplate","Common.TypeNameIdentifier":"HxTreeViewItemInternal"}},{"HashCode":729944718,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxModelEditForm","Attributes":[{"Name":"@bind-Model","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxModelEditForm","Attributes":[{"Name":"@bind-Model:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Model:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Model","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Model"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","Components.Bind.ValueAttribute":"Model","Common.TypeNameIdentifier":"HxModelEditForm"}},{"HashCode":559726048,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxModelEditForm","Attributes":[{"Name":"@bind-Model","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.HxModelEditForm","Attributes":[{"Name":"@bind-Model:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Model:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Model","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Model"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.HxModelEditForm<TModel>","Components.Bind.ValueAttribute":"Model","Common.TypeNameIdentifier":"HxModelEditForm"}},{"HashCode":493289447,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.HxDynamicElement","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxDynamicElement","Attributes":[{"Name":"@bind-ElementRef","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxDynamicElement","Attributes":[{"Name":"@bind-ElementRef:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ElementRef:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ElementRef","TypeName":"System.Action<Microsoft.AspNetCore.Components.ElementReference>","Documentation":"Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ElementRef"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ElementRefChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.HxDynamicElement","Components.Bind.ValueAttribute":"ElementRef","Common.TypeNameIdentifier":"HxDynamicElement"}},{"HashCode":-355913252,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.HxDynamicElement","AssemblyName":"Havit.Blazor.Components.Web","Documentation":"Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.HxDynamicElement","Attributes":[{"Name":"@bind-ElementRef","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.HxDynamicElement","Attributes":[{"Name":"@bind-ElementRef:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ElementRef:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ElementRef","TypeName":"System.Action<Microsoft.AspNetCore.Components.ElementReference>","Documentation":"Binds the provided expression to the 'ElementRef' property and a change event delegate to the 'ElementRefChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ElementRef"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ElementRefChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.HxDynamicElement","Components.Bind.ValueAttribute":"ElementRef","Common.TypeNameIdentifier":"HxDynamicElement"}},{"HashCode":-1764817342,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'ExpandedItemIds' property and a change event delegate to the 'ExpandedItemIdsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemIds","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemIds:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ExpandedItemIds:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedItemIds","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"Binds the provided expression to the 'ExpandedItemIds' property and a change event delegate to the 'ExpandedItemIdsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedItemIds"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ExpandedItemIdsChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Components.Bind.ValueAttribute":"ExpandedItemIds","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":246951889,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemId","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemId:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ExpandedItemId:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedItemId","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedItemId"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ExpandedItemIdChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Components.Bind.ValueAttribute":"ExpandedItemId","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":-526447696,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'ExpandedItemIds' property and a change event delegate to the 'ExpandedItemIdsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemIds","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemIds:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ExpandedItemIds:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedItemIds","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"Binds the provided expression to the 'ExpandedItemIds' property and a change event delegate to the 'ExpandedItemIdsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedItemIds"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ExpandedItemIdsChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Components.Bind.ValueAttribute":"ExpandedItemIds","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":881776162,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemId","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Attributes":[{"Name":"@bind-ExpandedItemId:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ExpandedItemId:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedItemId","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ExpandedItemId' property and a change event delegate to the 'ExpandedItemIdChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedItemId"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ExpandedItemIdChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAccordion","Components.Bind.ValueAttribute":"ExpandedItemId","Common.TypeNameIdentifier":"HxAccordion"}},{"HashCode":-1722180045,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxCalendar","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxCalendar"}},{"HashCode":-1488662783,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCalendar","Attributes":[{"Name":"@bind-DisplayMonth","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxCalendar","Attributes":[{"Name":"@bind-DisplayMonth:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-DisplayMonth:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DisplayMonth","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime>","Documentation":"Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DisplayMonth"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"DisplayMonthChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Components.Bind.ValueAttribute":"DisplayMonth","Common.TypeNameIdentifier":"HxCalendar"}},{"HashCode":-305083904,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime?>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxCalendar"}},{"HashCode":1442553081,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Attributes":[{"Name":"@bind-DisplayMonth","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Attributes":[{"Name":"@bind-DisplayMonth:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-DisplayMonth:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DisplayMonth","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime>","Documentation":"Binds the provided expression to the 'DisplayMonth' property and a change event delegate to the 'DisplayMonthChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DisplayMonth"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"DisplayMonthChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCalendar","Components.Bind.ValueAttribute":"DisplayMonth","Common.TypeNameIdentifier":"HxCalendar"}},{"HashCode":-995653825,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxFilterForm","Attributes":[{"Name":"@bind-Model","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxFilterForm","Attributes":[{"Name":"@bind-Model:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Model:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Model","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Model"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","Components.Bind.ValueAttribute":"Model","Common.TypeNameIdentifier":"HxFilterForm"}},{"HashCode":-947015607,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm","Attributes":[{"Name":"@bind-Model","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm","Attributes":[{"Name":"@bind-Model:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Model:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Model","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TModel>","Documentation":"Binds the provided expression to the 'Model' property and a change event delegate to the 'ModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Model"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxFilterForm<TModel>","Components.Bind.ValueAttribute":"Model","Common.TypeNameIdentifier":"HxFilterForm"}},{"HashCode":-1917200746,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAutosuggest","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxAutosuggest","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":1392824106,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxAutosuggest<TItem, TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxAutosuggest"}},{"HashCode":560401095,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxCheckbox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":-1103842824,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckbox","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxCheckbox"}},{"HashCode":-1576483517,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxCheckboxList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxCheckboxList","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":-809923987,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxCheckboxList<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxCheckboxList"}},{"HashCode":-1973463457,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputDate","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":1644642806,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDate<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDate"}},{"HashCode":-376879508,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDateRange","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputDateRange","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":-1869286499,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputDateRange","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDateRange"}},{"HashCode":-1355287884,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputNumber","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":1243960199,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputNumber<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputNumber"}},{"HashCode":-1172355818,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputPercent","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputPercent","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":-186548684,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputPercent<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputPercent"}},{"HashCode":756065999,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputRange","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputRange","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":-1292217623,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputRange<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputRange"}},{"HashCode":2087689405,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputText","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":309074390,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputText","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputText"}},{"HashCode":1935026028,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputTextArea","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":-1444031092,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTextArea","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputTextArea"}},{"HashCode":-889419238,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxMultiSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":-380258709,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<TValue>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxMultiSelect<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxMultiSelect"}},{"HashCode":635278524,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxRadioButtonList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxRadioButtonList","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":425526411,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxRadioButtonList<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxRadioButtonList"}},{"HashCode":-1925986500,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-1435689948,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSelect<TValue, TItem>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxSelect"}},{"HashCode":-1267381000,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSwitch","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxSwitch","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":-1448232117,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSwitch","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxSwitch"}},{"HashCode":1739378738,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'TextQuery' property and a change event delegate to the 'TextQueryChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSearchBox","Attributes":[{"Name":"@bind-TextQuery","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxSearchBox","Attributes":[{"Name":"@bind-TextQuery:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-TextQuery:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-TextQuery","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'TextQuery' property and a change event delegate to the 'TextQueryChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"TextQuery"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"TextQueryChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","Components.Bind.ValueAttribute":"TextQuery","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":1674671176,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'TextQuery' property and a change event delegate to the 'TextQueryChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox","Attributes":[{"Name":"@bind-TextQuery","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox","Attributes":[{"Name":"@bind-TextQuery:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-TextQuery:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-TextQuery","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'TextQuery' property and a change event delegate to the 'TextQueryChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"TextQuery"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"TextQueryChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSearchBox<TItem>","Components.Bind.ValueAttribute":"TextQuery","Common.TypeNameIdentifier":"HxSearchBox"}},{"HashCode":1093001845,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxGrid","Attributes":[{"Name":"@bind-SelectedDataItem","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxGrid","Attributes":[{"Name":"@bind-SelectedDataItem:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedDataItem:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedDataItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedDataItem"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"SelectedDataItemChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.Bind.ValueAttribute":"SelectedDataItem","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":-1394171335,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxGrid","Attributes":[{"Name":"@bind-SelectedDataItems","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxGrid","Attributes":[{"Name":"@bind-SelectedDataItems:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedDataItems:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedDataItems","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>","Documentation":"Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedDataItems"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"SelectedDataItemsChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.Bind.ValueAttribute":"SelectedDataItems","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":1018420564,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxGrid","Attributes":[{"Name":"@bind-CurrentUserState","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxGrid","Attributes":[{"Name":"@bind-CurrentUserState:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-CurrentUserState:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CurrentUserState","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState>","Documentation":"Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CurrentUserState"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"CurrentUserStateChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.Bind.ValueAttribute":"CurrentUserState","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":-1946583946,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid","Attributes":[{"Name":"@bind-SelectedDataItem","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid","Attributes":[{"Name":"@bind-SelectedDataItem:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedDataItem:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedDataItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"Binds the provided expression to the 'SelectedDataItem' property and a change event delegate to the 'SelectedDataItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedDataItem"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"SelectedDataItemChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.Bind.ValueAttribute":"SelectedDataItem","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":1768642882,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid","Attributes":[{"Name":"@bind-SelectedDataItems","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid","Attributes":[{"Name":"@bind-SelectedDataItems:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedDataItems:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedDataItems","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.HashSet<TItem>>","Documentation":"Binds the provided expression to the 'SelectedDataItems' property and a change event delegate to the 'SelectedDataItemsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedDataItems"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"SelectedDataItemsChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.Bind.ValueAttribute":"SelectedDataItems","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":1796496167,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid","Attributes":[{"Name":"@bind-CurrentUserState","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid","Attributes":[{"Name":"@bind-CurrentUserState:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-CurrentUserState:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CurrentUserState","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.Blazor.Components.Web.Bootstrap.GridUserState>","Documentation":"Binds the provided expression to the 'CurrentUserState' property and a change event delegate to the 'CurrentUserStateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CurrentUserState"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"CurrentUserStateChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxGrid<TItem>","Components.Bind.ValueAttribute":"CurrentUserState","Common.TypeNameIdentifier":"HxGrid"}},{"HashCode":-1694902846,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPager","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxPager","Attributes":[{"Name":"@bind-CurrentPageIndex","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxPager","Attributes":[{"Name":"@bind-CurrentPageIndex:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-CurrentPageIndex:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CurrentPageIndex","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CurrentPageIndex"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"CurrentPageIndexChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPager","Components.Bind.ValueAttribute":"CurrentPageIndex","Common.TypeNameIdentifier":"HxPager"}},{"HashCode":238282954,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxPager","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxPager","Attributes":[{"Name":"@bind-CurrentPageIndex","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxPager","Attributes":[{"Name":"@bind-CurrentPageIndex:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-CurrentPageIndex:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CurrentPageIndex","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'CurrentPageIndex' property and a change event delegate to the 'CurrentPageIndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CurrentPageIndex"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"CurrentPageIndexChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxPager","Components.Bind.ValueAttribute":"CurrentPageIndex","Common.TypeNameIdentifier":"HxPager"}},{"HashCode":-1387802568,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxListLayout","Attributes":[{"Name":"@bind-FilterModel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxListLayout","Attributes":[{"Name":"@bind-FilterModel:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-FilterModel:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-FilterModel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"FilterModel"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"FilterModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","Components.Bind.ValueAttribute":"FilterModel","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":1523878722,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout","Attributes":[{"Name":"@bind-FilterModel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout","Attributes":[{"Name":"@bind-FilterModel:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-FilterModel:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-FilterModel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"FilterModel"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"FilterModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxListLayout<TFilterModel>","Components.Bind.ValueAttribute":"FilterModel","Common.TypeNameIdentifier":"HxListLayout"}},{"HashCode":-1489104088,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxNamedViewList","Attributes":[{"Name":"@bind-FilterModel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxNamedViewList","Attributes":[{"Name":"@bind-FilterModel:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-FilterModel:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-FilterModel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"FilterModel"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"FilterModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","Components.Bind.ValueAttribute":"FilterModel","Common.TypeNameIdentifier":"HxNamedViewList"}},{"HashCode":-1950506307,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList","Attributes":[{"Name":"@bind-FilterModel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList","Attributes":[{"Name":"@bind-FilterModel:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-FilterModel:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-FilterModel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TFilterModel>","Documentation":"Binds the provided expression to the 'FilterModel' property and a change event delegate to the 'FilterModelChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"FilterModel"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"FilterModelChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxNamedViewList<TFilterModel>","Components.Bind.ValueAttribute":"FilterModel","Common.TypeNameIdentifier":"HxNamedViewList"}},{"HashCode":-1692316142,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Collapsed' property and a change event delegate to the 'CollapsedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxSidebar","Attributes":[{"Name":"@bind-Collapsed","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxSidebar","Attributes":[{"Name":"@bind-Collapsed:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Collapsed:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Collapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Collapsed' property and a change event delegate to the 'CollapsedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Collapsed"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"CollapsedChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","Components.Bind.ValueAttribute":"Collapsed","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":1321866212,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Collapsed' property and a change event delegate to the 'CollapsedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","Attributes":[{"Name":"@bind-Collapsed","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","Attributes":[{"Name":"@bind-Collapsed:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Collapsed:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Collapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Collapsed' property and a change event delegate to the 'CollapsedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Collapsed"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"CollapsedChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxSidebar","Components.Bind.ValueAttribute":"Collapsed","Common.TypeNameIdentifier":"HxSidebar"}},{"HashCode":2040147044,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxTabPanel","Attributes":[{"Name":"@bind-ActiveTabId","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxTabPanel","Attributes":[{"Name":"@bind-ActiveTabId:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ActiveTabId:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveTabId","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveTabId"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ActiveTabIdChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","Components.Bind.ValueAttribute":"ActiveTabId","Common.TypeNameIdentifier":"HxTabPanel"}},{"HashCode":-241017621,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","Attributes":[{"Name":"@bind-ActiveTabId","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","Attributes":[{"Name":"@bind-ActiveTabId:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ActiveTabId:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveTabId","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveTabId' property and a change event delegate to the 'ActiveTabIdChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveTabId"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ActiveTabIdChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTabPanel","Components.Bind.ValueAttribute":"ActiveTabId","Common.TypeNameIdentifier":"HxTabPanel"}},{"HashCode":-2100634315,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputTags","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputTags","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":1088884103,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxInputTags","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputTags"}},{"HashCode":-576317650,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxTreeView","Attributes":[{"Name":"@bind-SelectedItem","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxTreeView","Attributes":[{"Name":"@bind-SelectedItem:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedItem:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedItem"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"SelectedItemChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","Components.Bind.ValueAttribute":"SelectedItem","Common.TypeNameIdentifier":"HxTreeView"}},{"HashCode":-341265571,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView","Attributes":[{"Name":"@bind-SelectedItem","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView","Attributes":[{"Name":"@bind-SelectedItem:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedItem:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TItem>","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedItem"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"SelectedItemChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.HxTreeView<TItem>","Components.Bind.ValueAttribute":"SelectedItem","Common.TypeNameIdentifier":"HxTreeView"}},{"HashCode":1775685277,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxAutosuggestInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxAutosuggestInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":-98085798,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxAutosuggestInternal<TItem, TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxAutosuggestInternal"}},{"HashCode":-964799754,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDateInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputDateInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":1319064824,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateInternal<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDateInternal"}},{"HashCode":-385399301,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputDateRangeInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputDateRangeInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDateRangeInternal"}},{"HashCode":-2080877654,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Havit.DateTimeRange>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputDateRangeInternal","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputDateRangeInternal"}},{"HashCode":1433428947,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HxInputTagsInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"HxInputTagsInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":1903589217,"Kind":"Components.Bind","Name":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","AssemblyName":"Havit.Blazor.Components.Web.Bootstrap","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.List<System.String>>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Havit.Blazor.Components.Web.Bootstrap.Internal","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Havit.Blazor.Components.Web.Bootstrap.Internal.HxInputTagsInternal","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"HxInputTagsInternal"}},{"HashCode":-1051825814,"Kind":"Components.Component","Name":"Website_Du_lich.Shared.NavMenu","AssemblyName":"Website Du lich","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavMenu"}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich.Shared","Runtime.Name":"Components.IComponent","Common.TypeName":"Website_Du_lich.Shared.NavMenu","Common.TypeNameIdentifier":"NavMenu"}},{"HashCode":-475088629,"Kind":"Components.Component","Name":"Website_Du_lich.Shared.NavMenu","AssemblyName":"Website Du lich","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Website_Du_lich.Shared.NavMenu"}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich.Shared","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Website_Du_lich.Shared.NavMenu","Common.TypeNameIdentifier":"NavMenu"}},{"HashCode":2098971119,"Kind":"Components.Component","Name":"Website_Du_lich.Shared.MainLayout","AssemblyName":"Website Du lich","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\">\r\n            <summary>\r\n            Gets the content to be rendered inside the layout.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Body"}}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich.Shared","Runtime.Name":"Components.IComponent","Common.TypeName":"Website_Du_lich.Shared.MainLayout","Common.TypeNameIdentifier":"MainLayout"}},{"HashCode":-1385835873,"Kind":"Components.Component","Name":"Website_Du_lich.Shared.MainLayout","AssemblyName":"Website Du lich","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Website_Du_lich.Shared.MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\">\r\n            <summary>\r\n            Gets the content to be rendered inside the layout.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Body"}}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich.Shared","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Website_Du_lich.Shared.MainLayout","Common.TypeNameIdentifier":"MainLayout"}},{"HashCode":-194282349,"Kind":"Components.ChildContent","Name":"Website_Du_lich.Shared.MainLayout.Body","AssemblyName":"Website Du lich","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\">\r\n            <summary>\r\n            Gets the content to be rendered inside the layout.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"MainLayout"}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich.Shared","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Website_Du_lich.Shared.MainLayout.Body","Common.TypeNameIdentifier":"MainLayout"}},{"HashCode":-1758648270,"Kind":"Components.ChildContent","Name":"Website_Du_lich.Shared.MainLayout.Body","AssemblyName":"Website Du lich","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\">\r\n            <summary>\r\n            Gets the content to be rendered inside the layout.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"Website_Du_lich.Shared.MainLayout"}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich.Shared","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Website_Du_lich.Shared.MainLayout.Body","Common.TypeNameIdentifier":"MainLayout"}},{"HashCode":549479240,"Kind":"Components.Component","Name":"Website_Du_lich.App","AssemblyName":"Website Du lich","CaseSensitive":true,"TagMatchingRules":[{"TagName":"App"}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich","Runtime.Name":"Components.IComponent","Common.TypeName":"Website_Du_lich.App","Common.TypeNameIdentifier":"App"}},{"HashCode":-1187860609,"Kind":"Components.Component","Name":"Website_Du_lich.App","AssemblyName":"Website Du lich","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Website_Du_lich.App"}],"Metadata":{"Common.TypeNamespace":"Website_Du_lich","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Website_Du_lich.App","Common.TypeNameIdentifier":"App"}},{"HashCode":456704173,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator\">\r\n            <summary>\r\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataAnnotationsValidator"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNameIdentifier":"DataAnnotationsValidator"}},{"HashCode":1602179958,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator\">\r\n            <summary>\r\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNameIdentifier":"DataAnnotationsValidator"}},{"HashCode":1940007618,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView\">\r\n             <summary>\r\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\r\n             so that it displays the page matching the specified route but only if the user\r\n             is authorized to see it.\r\n            \r\n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\r\n             which makes the user's current authentication state available to descendants.\r\n             </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"NotAuthorized"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Authorizing"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Resource"}},{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData","Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"DefaultLayout"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":-792368137,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView\">\r\n             <summary>\r\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\r\n             so that it displays the page matching the specified route but only if the user\r\n             is authorized to see it.\r\n            \r\n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\r\n             which makes the user's current authentication state available to descendants.\r\n             </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"NotAuthorized"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Authorizing"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Resource"}},{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData","Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"DefaultLayout"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":-199390266,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":-433760116,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":1972501356,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"AuthorizeRouteView"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":1005752647,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":-1386055935,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\">\r\n            <summary>\r\n            Displays differing content depending on the user's authorization status.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Policy","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Policy\">\r\n            <summary>\r\n            The policy name that determines whether the content can be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Policy"}},{"Kind":"Components.Component","Name":"Roles","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Roles\">\r\n            <summary>\r\n            A comma delimited list of roles that are allowed to display the content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Roles"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"NotAuthorized"}},{"Kind":"Components.Component","Name":"Authorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"Authorized"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Authorizing"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Resource"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-366856331,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\">\r\n            <summary>\r\n            Displays differing content depending on the user's authorization status.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Policy","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Policy\">\r\n            <summary>\r\n            The policy name that determines whether the content can be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Policy"}},{"Kind":"Components.Component","Name":"Roles","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Roles\">\r\n            <summary>\r\n            A comma delimited list of roles that are allowed to display the content.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Roles"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"NotAuthorized"}},{"Kind":"Components.Component","Name":"Authorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Common.PropertyName":"Authorized"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Authorizing"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Resource\">\r\n            <summary>\r\n            The resource to which access is being controlled.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Resource"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-2126992260,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-480051696,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":1153701438,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":1947491960,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.NotAuthorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is not authorized.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-1023823014,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorized","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Authorized' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-1583319627,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorized\">\r\n            <summary>\r\n            The content that will be displayed if the user is authorized.\r\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Authorized' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":243149576,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"AuthorizeView"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-1100011753,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.Authorizing\">\r\n            <summary>\r\n            The content that will be displayed while asynchronous authorization is in progress.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":908179135,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingAuthenticationState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","Common.TypeNameIdentifier":"CascadingAuthenticationState"}},{"HashCode":-1215977598,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","Common.TypeNameIdentifier":"CascadingAuthenticationState"}},{"HashCode":984151807,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingAuthenticationState"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","Common.TypeNameIdentifier":"CascadingAuthenticationState"}},{"HashCode":-2143412950,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent\">\r\n            <summary>\r\n            The content to which the authentication state should be provided.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","Common.TypeNameIdentifier":"CascadingAuthenticationState"}},{"HashCode":-572663461,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\">\r\n            <summary>\r\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\">\r\n            <summary>\r\n            Supplies the edit context explicitly. If using this parameter, do not\r\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\r\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\">\r\n            <summary>\r\n            Specifies the top-level model object for the form. An edit context will\r\n            be constructed for this model. If using this parameter, do not also supply\r\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnSubmit\">\r\n             <summary>\r\n             A callback that will be invoked when the form is submitted.\r\n            \r\n             If using this parameter, you are responsible for triggering any validation\r\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\r\n             </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"OnSubmit"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnValidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"OnValidSubmit"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnInvalidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"OnInvalidSubmit"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNameIdentifier":"EditForm"}},{"HashCode":-588114541,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\">\r\n            <summary>\r\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\">\r\n            <summary>\r\n            Supplies the edit context explicitly. If using this parameter, do not\r\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\r\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext","Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\">\r\n            <summary>\r\n            Specifies the top-level model object for the form. An edit context will\r\n            be constructed for this model. If using this parameter, do not also supply\r\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnSubmit\">\r\n             <summary>\r\n             A callback that will be invoked when the form is submitted.\r\n            \r\n             If using this parameter, you are responsible for triggering any validation\r\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\r\n             </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"OnSubmit"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnValidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"OnValidSubmit"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.OnInvalidSubmit\">\r\n            <summary>\r\n            A callback that will be invoked when the form is submitted and the\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Common.PropertyName":"OnInvalidSubmit"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNameIdentifier":"EditForm"}},{"HashCode":924762995,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNameIdentifier":"EditForm"}},{"HashCode":1969597621,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent\">\r\n            <summary>\r\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNameIdentifier":"EditForm"}},{"HashCode":-1362667734,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputCheckbox\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":390316276,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputCheckbox\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":-1311768412,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputDate`1\">\r\n            <summary>\r\n            An input component for editing date values.\r\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.Type\">\r\n            <summary>\r\n            Gets or sets the type of HTML input to be rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputDate"}},{"HashCode":-27656975,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputDate`1\">\r\n            <summary>\r\n            An input component for editing date values.\r\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.Type\">\r\n            <summary>\r\n            Gets or sets the type of HTML input to be rendered.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputDate`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputDate"}},{"HashCode":512248358,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\">\r\n            <summary>\r\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNameIdentifier":"InputFile"}},{"HashCode":-793686601,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputFile\">\r\n            <summary>\r\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.OnChange\">\r\n            <summary>\r\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Common.PropertyName":"OnChange"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputFile.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNameIdentifier":"InputFile"}},{"HashCode":983649175,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputNumber`1\">\r\n            <summary>\r\n            An input component for editing numeric values.\r\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputNumber"}},{"HashCode":-556115839,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputNumber`1\">\r\n            <summary>\r\n            An input component for editing numeric values.\r\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputNumber`1.ParsingErrorMessage\">\r\n            <summary>\r\n            Gets or sets the error message used when displaying an a parsing error.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputNumber"}},{"HashCode":323724845,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\">\r\n            <summary>\r\n            An input component used for selecting a value from a group of choices.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of this input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the parent input radio group.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Name"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputRadio"}},{"HashCode":1048570729,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\">\r\n            <summary>\r\n            An input component used for selecting a value from a group of choices.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the input element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of this input.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadio`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the parent input radio group.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Name"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputRadio"}},{"HashCode":3845135,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\">\r\n            <summary>\r\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the group.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":-325820364,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\">\r\n            <summary>\r\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.Name\">\r\n            <summary>\r\n            Gets or sets the name of the group.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":68095476,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputRadioGroup"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":-2140436893,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":501651446,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputSelect`1\">\r\n            <summary>\r\n            A dropdown selection component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":-1014469851,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputSelect`1\">\r\n            <summary>\r\n            A dropdown selection component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.GenericTyped":"True","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":-2086620057,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputSelect"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":240832860,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputSelect`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content to be rendering inside the select element.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":-1352458492,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputText\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNameIdentifier":"InputText"}},{"HashCode":-226117494,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputText\">\r\n            <summary>\r\n            An input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNameIdentifier":"InputText"}},{"HashCode":-1100667989,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputTextArea\">\r\n            <summary>\r\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":919219871,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.InputTextArea\">\r\n            <summary>\r\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.Value\">\r\n            <summary>\r\n            Gets or sets the value of the input. This should be used with two-way binding.\r\n            </summary>\r\n            <example>\r\n            @bind-Value=\"model.PropertyName\"\r\n            </example>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueChanged\">\r\n            <summary>\r\n            Gets or sets a callback that updates the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Common.PropertyName":"ValueChanged"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.ValueExpression\">\r\n            <summary>\r\n            Gets or sets an expression that identifies the bound value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>","Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.InputBase`1.DisplayName\">\r\n            <summary>\r\n            Gets or sets the display name for this field.\r\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"DisplayName"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":-1478366108,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"For"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"ValidationMessage"}},{"HashCode":-1327564734,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1\">\r\n            <summary>\r\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationMessage`1.For\">\r\n            <summary>\r\n            Specifies the field for which validation messages should be displayed.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True","Common.PropertyName":"For"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"ValidationMessage"}},{"HashCode":-1104507193,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationSummary\">\r\n            <summary>\r\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.Model\">\r\n            <summary>\r\n            Gets or sets the model to produce the list of validation messages for.\r\n            When specified, this lists all errors that are associated with the model instance.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNameIdentifier":"ValidationSummary"}},{"HashCode":-1607129185,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Forms.ValidationSummary\">\r\n            <summary>\r\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.Model\">\r\n            <summary>\r\n            Gets or sets the model to produce the list of validation messages for.\r\n            When specified, this lists all errors that are associated with the model instance.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Object","Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Forms.ValidationSummary.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNameIdentifier":"ValidationSummary"}},{"HashCode":27695941,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate\">\r\n            <summary>\r\n            After navigating from one page to another, sets focus to an element\r\n            matching a CSS selector. This can be used to build an accessible\r\n            navigation system compatible with screen readers.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This can be obtained from an enclosing\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData","Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.Selector\">\r\n            <summary>\r\n            Gets or sets a CSS selector describing the element to be focused after\r\n            navigation between pages.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Selector"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNameIdentifier":"FocusOnNavigate"}},{"HashCode":1693734471,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate\">\r\n            <summary>\r\n            After navigating from one page to another, sets focus to an element\r\n            matching a CSS selector. This can be used to build an accessible\r\n            navigation system compatible with screen readers.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This can be obtained from an enclosing\r\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData","Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.FocusOnNavigate.Selector\">\r\n            <summary>\r\n            Gets or sets a CSS selector describing the element to be focused after\r\n            navigation between pages.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Selector"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNameIdentifier":"FocusOnNavigate"}},{"HashCode":-402700225,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\">\r\n            <summary>\r\n            A component that renders an anchor tag, automatically toggling its 'active'\r\n            class based on whether its 'href' matches the current URI.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ActiveClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch","Common.PropertyName":"Match"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNameIdentifier":"NavLink"}},{"HashCode":1531657519,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Routing.NavLink\">\r\n            <summary>\r\n            A component that renders an anchor tag, automatically toggling its 'active'\r\n            class based on whether its 'href' matches the current URI.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ActiveClass\">\r\n            <summary>\r\n            Gets or sets the CSS class name applied to the NavLink when the\r\n            current route matches the NavLink href.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"ActiveClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.AdditionalAttributes\">\r\n            <summary>\r\n            Gets or sets a collection of additional attributes that will be added to the generated\r\n            <c>a</c> element.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>","Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.Match\">\r\n            <summary>\r\n            Gets or sets a value representing the URL matching behavior.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch","Common.PropertyName":"Match"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNameIdentifier":"NavLink"}},{"HashCode":-446411434,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"NavLink"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNameIdentifier":"NavLink"}},{"HashCode":-1030631652,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent\">\r\n            <summary>\r\n            Gets or sets the child content of the component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNameIdentifier":"NavLink"}},{"HashCode":-1520898206,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNameIdentifier":"HeadContent"}},{"HashCode":-618466065,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\">\r\n            <summary>\r\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNameIdentifier":"HeadContent"}},{"HashCode":319822320,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HeadContent"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNameIdentifier":"HeadContent"}},{"HashCode":-749425297,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNameIdentifier":"HeadContent"}},{"HashCode":-2072687175,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadOutlet"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNameIdentifier":"HeadOutlet"}},{"HashCode":-1202216091,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\">\r\n            <summary>\r\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadOutlet"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNameIdentifier":"HeadOutlet"}},{"HashCode":-1102488851,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.PageTitle\">\r\n            <summary>\r\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNameIdentifier":"PageTitle"}},{"HashCode":1156767528,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.PageTitle\">\r\n            <summary>\r\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNameIdentifier":"PageTitle"}},{"HashCode":-894340878,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"PageTitle"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNameIdentifier":"PageTitle"}},{"HashCode":-1244735021,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to be rendered as the document title.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNameIdentifier":"PageTitle"}},{"HashCode":-985770859,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.ErrorBoundary\">\r\n            <summary>\r\n            Captures errors thrown from its child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Common.PropertyName":"ErrorContent"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.MaximumErrorCount\">\r\n            <summary>\r\n            The maximum number of errors that can be handled. If more errors are received,\r\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"MaximumErrorCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":-280642229,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.ErrorBoundary\">\r\n            <summary>\r\n            Captures errors thrown from its child content.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Common.PropertyName":"ErrorContent"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.MaximumErrorCount\">\r\n            <summary>\r\n            The maximum number of errors that can be handled. If more errors are received,\r\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"MaximumErrorCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":-835195399,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ErrorBoundary"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":-1192805258,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ChildContent\">\r\n            <summary>\r\n            The content to be displayed when there is no error.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":-342031245,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":-1147300225,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.ErrorBoundaryBase.ErrorContent\">\r\n            <summary>\r\n            The content to be displayed when there is an error.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":-1986957815,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\">\r\n            <summary>\r\n            Provides functionality for rendering a virtualized list of items.\r\n            </summary>\r\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemContent"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemSize\">\r\n            <summary>\r\n            Gets the size of each item in pixels. Defaults to 50px.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"ItemSize"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemsProvider\">\r\n            <summary>\r\n            Gets or sets the function providing items to the list.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"ItemsProvider"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\">\r\n            <summary>\r\n            Gets or sets the fixed item source.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.OverscanCount\">\r\n            <summary>\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"OverscanCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":-554708338,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\">\r\n            <summary>\r\n            Provides functionality for rendering a virtualized list of items.\r\n            </summary>\r\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TItem"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.GenericTyped":"True","Common.PropertyName":"ItemContent"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemSize\">\r\n            <summary>\r\n            Gets the size of each item in pixels. Defaults to 50px.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Single","Common.PropertyName":"ItemSize"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemsProvider\">\r\n            <summary>\r\n            Gets or sets the function providing items to the list.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True","Common.PropertyName":"ItemsProvider"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Items\">\r\n            <summary>\r\n            Gets or sets the fixed item source.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True","Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.OverscanCount\">\r\n            <summary>\r\n            Gets or sets a value that determines how many additional items will be rendered\r\n            before and after the visible region. This help to reduce the frequency of rendering\r\n            during scrolling. However, higher values mean that more elements will be present\r\n            in the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Int32","Common.PropertyName":"OverscanCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":1718389561,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":-1949831978,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ChildContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":1203803959,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":-2031543214,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.ItemContent\">\r\n            <summary>\r\n            Gets or sets the item template for the list.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":-14890901,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":520927092,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.Placeholder\">\r\n            <summary>\r\n            Gets or sets the template for items that have not yet been loaded in memory.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNameIdentifier":"Virtualize"}},{"HashCode":-977639569,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.CascadingValue`1\">\r\n            <summary>\r\n            A component that provides a cascading value to all descendant components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\">\r\n            <summary>\r\n            The value to be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Name\">\r\n             <summary>\r\n             Optionally gives a name to the provided value. Descendant components\r\n             will be able to receive the value by specifying this name.\r\n            \r\n             If no name is specified, then descendant components will receive the\r\n             value based the type of value they are requesting.\r\n             </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed\">\r\n            <summary>\r\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\r\n            performance optimization that allows the framework to skip setting up\r\n            change notifications. Set this flag only if you will not change\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"IsFixed"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"CascadingValue"}},{"HashCode":202740433,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.CascadingValue`1\">\r\n            <summary>\r\n            A component that provides a cascading value to all descendant components.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Components.TypeParameterIsCascading":"False","Components.TypeParameter":"True","Common.PropertyName":"TValue"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\">\r\n            <summary>\r\n            The value to be provided.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True","Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Name\">\r\n             <summary>\r\n             Optionally gives a name to the provided value. Descendant components\r\n             will be able to receive the value by specifying this name.\r\n            \r\n             If no name is specified, then descendant components will receive the\r\n             value based the type of value they are requesting.\r\n             </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.String","Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.IsFixed\">\r\n            <summary>\r\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\r\n            performance optimization that allows the framework to skip setting up\r\n            change notifications. Set this flag only if you will not change\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"IsFixed"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Components.GenericTyped":"True","Common.TypeNameIdentifier":"CascadingValue"}},{"HashCode":1233880042,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingValue"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNameIdentifier":"CascadingValue"}},{"HashCode":-768078150,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.ChildContent\">\r\n            <summary>\r\n            The content to which the value should be provided.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.CascadingValue"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNameIdentifier":"CascadingValue"}},{"HashCode":137251201,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.DynamicComponent\">\r\n            <summary>\r\n            A component that renders another component dynamically according to its\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\">\r\n            <summary>\r\n            Gets or sets the type of the component to be rendered. The supplied type must\r\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Parameters\">\r\n            <summary>\r\n            Gets or sets a dictionary of parameters to be passed to the component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"Parameters"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNameIdentifier":"DynamicComponent"}},{"HashCode":143663655,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.DynamicComponent\">\r\n            <summary>\r\n            A component that renders another component dynamically according to its\r\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\">\r\n            <summary>\r\n            Gets or sets the type of the component to be rendered. The supplied type must\r\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Parameters\">\r\n            <summary>\r\n            Gets or sets a dictionary of parameters to be passed to the component.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>","Common.PropertyName":"Parameters"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNameIdentifier":"DynamicComponent"}},{"HashCode":2036585645,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.LayoutView\">\r\n            <summary>\r\n            Displays the specified content inside the specified layout and any further\r\n            nested layouts.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.Layout\">\r\n            <summary>\r\n            Gets or sets the type of the layout in which to display the content.\r\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"Layout"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNameIdentifier":"LayoutView"}},{"HashCode":1906187394,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.LayoutView\">\r\n            <summary>\r\n            Displays the specified content inside the specified layout and any further\r\n            nested layouts.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"ChildContent"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.Layout\">\r\n            <summary>\r\n            Gets or sets the type of the layout in which to display the content.\r\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"Layout"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNameIdentifier":"LayoutView"}},{"HashCode":-1002655453,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"LayoutView"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNameIdentifier":"LayoutView"}},{"HashCode":1897224314,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.LayoutView.ChildContent\">\r\n            <summary>\r\n            Gets or sets the content to display.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.LayoutView"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNameIdentifier":"LayoutView"}},{"HashCode":755423178,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.RouteView\">\r\n            <summary>\r\n            Displays the specified page component, rendering it inside its layout\r\n            and any further nested layouts.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData","Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"DefaultLayout"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNameIdentifier":"RouteView"}},{"HashCode":-635781978,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.RouteView\">\r\n            <summary>\r\n            Displays the specified page component, rendering it inside its layout\r\n            and any further nested layouts.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.RouteData\">\r\n            <summary>\r\n            Gets or sets the route data. This determines the page that will be\r\n            displayed and the parameter values that will be supplied to the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData","Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.RouteView.DefaultLayout\">\r\n            <summary>\r\n            Gets or sets the type of a layout to be used if the page does not\r\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\r\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Type","Common.PropertyName":"DefaultLayout"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNameIdentifier":"RouteView"}},{"HashCode":1587649487,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Routing.Router\">\r\n            <summary>\r\n            A component that supplies route data corresponding to the current navigation state.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly\">\r\n            <summary>\r\n            Gets or sets the assembly that should be searched for components matching the URI.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly","Common.PropertyName":"AppAssembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AdditionalAssemblies\">\r\n            <summary>\r\n            Gets or sets a collection of additional assemblies that should be searched for components\r\n            that can match URIs.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>","Common.PropertyName":"AdditionalAssemblies"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NotFound"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Common.PropertyName":"Found"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Navigating"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.OnNavigateAsync\">\r\n            <summary>\r\n            Gets or sets a handler that should be called before navigating to a new page.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Common.PropertyName":"OnNavigateAsync"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.PreferExactMatches\">\r\n            <summary>\r\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\r\n            over wildcards.\r\n            <para>This property is obsolete and configuring it does nothing.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"PreferExactMatches"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNameIdentifier":"Router"}},{"HashCode":-1152193607,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"T:Microsoft.AspNetCore.Components.Routing.Router\">\r\n            <summary>\r\n            A component that supplies route data corresponding to the current navigation state.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AppAssembly\">\r\n            <summary>\r\n            Gets or sets the assembly that should be searched for components matching the URI.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly","Common.PropertyName":"AppAssembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.AdditionalAssemblies\">\r\n            <summary>\r\n            Gets or sets a collection of additional assemblies that should be searched for components\r\n            that can match URIs.\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>","Common.PropertyName":"AdditionalAssemblies"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"NotFound"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Common.PropertyName":"Found"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>","Metadata":{"Components.ChildContent":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Common.PropertyName":"Navigating"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.OnNavigateAsync\">\r\n            <summary>\r\n            Gets or sets a handler that should be called before navigating to a new page.\r\n            </summary>\r\n        </member>","Metadata":{"Components.EventCallback":"True","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Common.PropertyName":"OnNavigateAsync"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.PreferExactMatches\">\r\n            <summary>\r\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\r\n            over wildcards.\r\n            <para>This property is obsolete and configuring it does nothing.</para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.GloballyQualifiedTypeName":"global::System.Boolean","Common.PropertyName":"PreferExactMatches"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNameIdentifier":"Router"}},{"HashCode":-1648221681,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Router"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNameIdentifier":"Router"}},{"HashCode":-1621887786,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.NotFound\">\r\n            <summary>\r\n            Gets or sets the content to display when no match is found for the requested route.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNameIdentifier":"Router"}},{"HashCode":839024483,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNameIdentifier":"Router"}},{"HashCode":1257976313,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Found\">\r\n            <summary>\r\n            Gets or sets the content to display when a match is found for the requested route.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Common.PropertyName":"Context","Components.ChildContentParameterName":"True"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNameIdentifier":"Router"}},{"HashCode":-1706588304,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Router"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNameIdentifier":"Router"}},{"HashCode":1775589929,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"<member name=\"P:Microsoft.AspNetCore.Components.Routing.Router.Navigating\">\r\n            <summary>\r\n            Get or sets the content to display when asynchronous navigation is in progress.\r\n            </summary>\r\n        </member>","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.ChildContent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNameIdentifier":"Router"}},{"HashCode":-1241519277,"Kind":"Components.EventHandler","Name":"onfocus","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocus","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocus"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":185338890,"Kind":"Components.EventHandler","Name":"onblur","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onblur","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onblur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onblur"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1395951131,"Kind":"Components.EventHandler","Name":"onfocusin","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusin","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusin"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-80162751,"Kind":"Components.EventHandler","Name":"onfocusout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":38666978,"Kind":"Components.EventHandler","Name":"onmouseover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":841963227,"Kind":"Components.EventHandler","Name":"onmouseout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":900683537,"Kind":"Components.EventHandler","Name":"onmousemove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousemove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousemove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1689748505,"Kind":"Components.EventHandler","Name":"onmousedown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousedown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousedown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousedown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2072535000,"Kind":"Components.EventHandler","Name":"onmouseup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":957123670,"Kind":"Components.EventHandler","Name":"onclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1117690483,"Kind":"Components.EventHandler","Name":"ondblclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondblclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondblclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondblclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1890398664,"Kind":"Components.EventHandler","Name":"onwheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-873195285,"Kind":"Components.EventHandler","Name":"onmousewheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousewheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousewheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousewheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1783703258,"Kind":"Components.EventHandler","Name":"oncontextmenu","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncontextmenu","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncontextmenu","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncontextmenu"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1126093720,"Kind":"Components.EventHandler","Name":"ondrag","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrag","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrag"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-217965433,"Kind":"Components.EventHandler","Name":"ondragend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-740922146,"Kind":"Components.EventHandler","Name":"ondragenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1114242050,"Kind":"Components.EventHandler","Name":"ondragleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2067527959,"Kind":"Components.EventHandler","Name":"ondragover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":290913765,"Kind":"Components.EventHandler","Name":"ondragstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":500052702,"Kind":"Components.EventHandler","Name":"ondrop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2089820561,"Kind":"Components.EventHandler","Name":"onkeydown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeydown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeydown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeydown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":159258008,"Kind":"Components.EventHandler","Name":"onkeyup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeyup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeyup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeyup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1171150421,"Kind":"Components.EventHandler","Name":"onkeypress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeypress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeypress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1271741505,"Kind":"Components.EventHandler","Name":"onchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2064097127,"Kind":"Components.EventHandler","Name":"oninput","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninput","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninput"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1628000710,"Kind":"Components.EventHandler","Name":"oninvalid","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninvalid","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninvalid","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninvalid"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":534622536,"Kind":"Components.EventHandler","Name":"onreset","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreset","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreset","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreset"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-232666644,"Kind":"Components.EventHandler","Name":"onselect","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselect","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselect"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-334703033,"Kind":"Components.EventHandler","Name":"onselectstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-580793560,"Kind":"Components.EventHandler","Name":"onselectionchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectionchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectionchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectionchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1182237255,"Kind":"Components.EventHandler","Name":"onsubmit","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsubmit","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsubmit"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":41919870,"Kind":"Components.EventHandler","Name":"onbeforecopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-467476237,"Kind":"Components.EventHandler","Name":"onbeforecut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-847753862,"Kind":"Components.EventHandler","Name":"onbeforepaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforepaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforepaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforepaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1103205449,"Kind":"Components.EventHandler","Name":"oncopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-336745500,"Kind":"Components.EventHandler","Name":"oncut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1167691091,"Kind":"Components.EventHandler","Name":"onpaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-814867136,"Kind":"Components.EventHandler","Name":"ontouchcancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchcancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchcancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchcancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1498711591,"Kind":"Components.EventHandler","Name":"ontouchend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-586006226,"Kind":"Components.EventHandler","Name":"ontouchmove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchmove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchmove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchmove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1710607310,"Kind":"Components.EventHandler","Name":"ontouchstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-807819226,"Kind":"Components.EventHandler","Name":"ontouchenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1947950502,"Kind":"Components.EventHandler","Name":"ontouchleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1480270924,"Kind":"Components.EventHandler","Name":"ongotpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ongotpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ongotpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1745683678,"Kind":"Components.EventHandler","Name":"onlostpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onlostpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onlostpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1295402411,"Kind":"Components.EventHandler","Name":"onpointercancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointercancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointercancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointercancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-52025697,"Kind":"Components.EventHandler","Name":"onpointerdown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerdown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerdown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerdown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1001822979,"Kind":"Components.EventHandler","Name":"onpointerenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-696829939,"Kind":"Components.EventHandler","Name":"onpointerleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1019396270,"Kind":"Components.EventHandler","Name":"onpointermove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointermove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointermove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointermove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-358160437,"Kind":"Components.EventHandler","Name":"onpointerout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":373773343,"Kind":"Components.EventHandler","Name":"onpointerover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":678915047,"Kind":"Components.EventHandler","Name":"onpointerup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2079011202,"Kind":"Components.EventHandler","Name":"oncanplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-505461926,"Kind":"Components.EventHandler","Name":"oncanplaythrough","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplaythrough","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplaythrough"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":561069164,"Kind":"Components.EventHandler","Name":"oncuechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncuechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncuechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncuechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-628056390,"Kind":"Components.EventHandler","Name":"ondurationchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondurationchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondurationchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondurationchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1753598003,"Kind":"Components.EventHandler","Name":"onemptied","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onemptied","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onemptied","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onemptied"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-400440555,"Kind":"Components.EventHandler","Name":"onpause","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpause","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpause","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpause"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1218828270,"Kind":"Components.EventHandler","Name":"onplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":250593440,"Kind":"Components.EventHandler","Name":"onplaying","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplaying","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplaying","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplaying"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":935785849,"Kind":"Components.EventHandler","Name":"onratechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onratechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onratechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onratechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-710319652,"Kind":"Components.EventHandler","Name":"onseeked","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeked"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1041149917,"Kind":"Components.EventHandler","Name":"onseeking","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeking","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeking"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1045603085,"Kind":"Components.EventHandler","Name":"onstalled","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstalled","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstalled","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstalled"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1650458835,"Kind":"Components.EventHandler","Name":"onstop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1645835663,"Kind":"Components.EventHandler","Name":"onsuspend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsuspend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsuspend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsuspend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":441111076,"Kind":"Components.EventHandler","Name":"ontimeupdate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeupdate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeupdate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeupdate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-397557218,"Kind":"Components.EventHandler","Name":"onvolumechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onvolumechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onvolumechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onvolumechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":537583696,"Kind":"Components.EventHandler","Name":"onwaiting","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwaiting","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwaiting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwaiting"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":836734996,"Kind":"Components.EventHandler","Name":"onloadstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":861226790,"Kind":"Components.EventHandler","Name":"ontimeout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1844748847,"Kind":"Components.EventHandler","Name":"onabort","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onabort","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onabort","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onabort"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-101025883,"Kind":"Components.EventHandler","Name":"onload","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onload","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onload"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1892583957,"Kind":"Components.EventHandler","Name":"onloadend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1160619536,"Kind":"Components.EventHandler","Name":"onprogress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onprogress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onprogress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onprogress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1647209768,"Kind":"Components.EventHandler","Name":"onerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ErrorEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-36368380,"Kind":"Components.EventHandler","Name":"onactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1700008379,"Kind":"Components.EventHandler","Name":"onbeforeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-120325947,"Kind":"Components.EventHandler","Name":"onbeforedeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforedeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforedeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1880914847,"Kind":"Components.EventHandler","Name":"ondeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1960248882,"Kind":"Components.EventHandler","Name":"onended","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onended","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onended","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onended"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2030586449,"Kind":"Components.EventHandler","Name":"onfullscreenchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":274964787,"Kind":"Components.EventHandler","Name":"onfullscreenerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":564604628,"Kind":"Components.EventHandler","Name":"onloadeddata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadeddata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadeddata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadeddata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1564406460,"Kind":"Components.EventHandler","Name":"onloadedmetadata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadedmetadata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadedmetadata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":965338784,"Kind":"Components.EventHandler","Name":"onpointerlockchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-788074180,"Kind":"Components.EventHandler","Name":"onpointerlockerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1139821432,"Kind":"Components.EventHandler","Name":"onreadystatechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreadystatechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreadystatechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreadystatechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1723125714,"Kind":"Components.EventHandler","Name":"onscroll","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onscroll","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onscroll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onscroll"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1160583875,"Kind":"Components.EventHandler","Name":"ontoggle","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontoggle","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontoggle","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontoggle"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-464744423,"Kind":"Components.Splat","Name":"Attributes","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Merges a collection of attributes into the current element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@attributes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Splat","Name":"@attributes","TypeName":"System.Object","Documentation":"Merges a collection of attributes into the current element or component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Attributes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Splat","Common.TypeName":"Microsoft.AspNetCore.Components.Attributes","Common.ClassifyAttributesOnly":"True"}},{"HashCode":-908965030,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.Razor","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting elements containing attributes with URL expected values.\r\n            </summary>\r\n            <remarks>Resolves URLs starting with '~/' (relative to the application's 'webroot' setting) that are not\r\n            targeted by other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s. Runs prior to other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s to ensure\r\n            application-relative URLs are resolved.</remarks>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"itemid","Value":"~/","ValueComparison":2}]},{"TagName":"a","Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"applet","Attributes":[{"Name":"archive","Value":"~/","ValueComparison":2}]},{"TagName":"area","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"audio","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"base","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"blockquote","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"button","Attributes":[{"Name":"formaction","Value":"~/","ValueComparison":2}]},{"TagName":"del","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"embed","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"form","Attributes":[{"Name":"action","Value":"~/","ValueComparison":2}]},{"TagName":"html","Attributes":[{"Name":"manifest","Value":"~/","ValueComparison":2}]},{"TagName":"iframe","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"srcset","Value":"~/","ValueComparison":2}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"formaction","Value":"~/","ValueComparison":2}]},{"TagName":"ins","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"menuitem","Attributes":[{"Name":"icon","Value":"~/","ValueComparison":2}]},{"TagName":"object","Attributes":[{"Name":"archive","Value":"~/","ValueComparison":2}]},{"TagName":"object","Attributes":[{"Name":"data","Value":"~/","ValueComparison":2}]},{"TagName":"q","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"script","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"source","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"source","TagStructure":2,"Attributes":[{"Name":"srcset","Value":"~/","ValueComparison":2}]},{"TagName":"track","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"video","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"video","Attributes":[{"Name":"poster","Value":"~/","ValueComparison":2}]}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper","Common.TypeNameIdentifier":"UrlResolutionTagHelper"}},{"HashCode":-454297784,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;a&gt; elements.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"a","Attributes":[{"Name":"asp-action"}]},{"TagName":"a","Attributes":[{"Name":"asp-controller"}]},{"TagName":"a","Attributes":[{"Name":"asp-area"}]},{"TagName":"a","Attributes":[{"Name":"asp-page"}]},{"TagName":"a","Attributes":[{"Name":"asp-page-handler"}]},{"TagName":"a","Attributes":[{"Name":"asp-fragment"}]},{"TagName":"a","Attributes":[{"Name":"asp-host"}]},{"TagName":"a","Attributes":[{"Name":"asp-protocol"}]},{"TagName":"a","Attributes":[{"Name":"asp-route"}]},{"TagName":"a","Attributes":[{"Name":"asp-all-route-data"}]},{"TagName":"a","Attributes":[{"Name":"asp-route-","NameComparison":1}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\r\n            is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\r\n            is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-protocol","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Protocol\">\r\n            <summary>\r\n            The protocol for the URL, such as \"http\" or \"https\".\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Protocol"}},{"Kind":"ITagHelper","Name":"asp-host","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Host\">\r\n            <summary>\r\n            The host name.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Host"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Fragment\">\r\n            <summary>\r\n            The URL fragment name.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if one of <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\" />\r\n            or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper","Common.TypeNameIdentifier":"AnchorTagHelper"}},{"HashCode":-1792856567,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;cache&gt; elements.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"cache"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"priority","TypeName":"Microsoft.Extensions.Caching.Memory.CacheItemPriority?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper.Priority\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:Microsoft.Extensions.Caching.Memory.CacheItemPriority\" /> policy for the cache entry.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Priority"}},{"Kind":"ITagHelper","Name":"vary-by","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryBy\">\r\n            <summary>\r\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryBy"}},{"Kind":"ITagHelper","Name":"vary-by-header","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByHeader\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByHeader"}},{"Kind":"ITagHelper","Name":"vary-by-query","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByQuery\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByQuery"}},{"Kind":"ITagHelper","Name":"vary-by-route","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByRoute\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByRoute"}},{"Kind":"ITagHelper","Name":"vary-by-cookie","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCookie\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByCookie"}},{"Kind":"ITagHelper","Name":"vary-by-user","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByUser\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\r\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByUser"}},{"Kind":"ITagHelper","Name":"vary-by-culture","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCulture\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\r\n            <para>\r\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\r\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\r\n            </para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByCulture"}},{"Kind":"ITagHelper","Name":"expires-on","TypeName":"System.DateTimeOffset?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresOn\">\r\n            <summary>\r\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ExpiresOn"}},{"Kind":"ITagHelper","Name":"expires-after","TypeName":"System.TimeSpan?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresAfter\">\r\n            <summary>\r\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ExpiresAfter"}},{"Kind":"ITagHelper","Name":"expires-sliding","TypeName":"System.TimeSpan?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresSliding\">\r\n            <summary>\r\n            Gets or sets the duration from last access that the cache entry should be evicted.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ExpiresSliding"}},{"Kind":"ITagHelper","Name":"enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.Enabled\">\r\n            <summary>\r\n            Gets or sets the value which determines if the tag helper is enabled or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper","Common.TypeNameIdentifier":"CacheTagHelper"}},{"HashCode":529625848,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that renders a Razor component.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"component","TagStructure":2,"Attributes":[{"Name":"type"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"params","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","IndexerNamePrefix":"param-","IndexerTypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.Parameters\">\r\n            <summary>\r\n            Gets or sets values for component parameters.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Parameters"}},{"Kind":"ITagHelper","Name":"type","TypeName":"System.Type","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.ComponentType\">\r\n            <summary>\r\n            Gets or sets the component type. This value is required.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ComponentType"}},{"Kind":"ITagHelper","Name":"render-mode","TypeName":"Microsoft.AspNetCore.Mvc.Rendering.RenderMode","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper.RenderMode\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.RenderMode\" />\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"RenderMode"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper","Common.TypeNameIdentifier":"ComponentTagHelper"}},{"HashCode":1283854314,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;distributed-cache&gt; elements.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"distributed-cache","Attributes":[{"Name":"name"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper.Name\">\r\n            <summary>\r\n            Gets or sets a unique name to discriminate cached entries.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"vary-by","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryBy\">\r\n            <summary>\r\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryBy"}},{"Kind":"ITagHelper","Name":"vary-by-header","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByHeader\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByHeader"}},{"Kind":"ITagHelper","Name":"vary-by-query","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByQuery\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByQuery"}},{"Kind":"ITagHelper","Name":"vary-by-route","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByRoute\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByRoute"}},{"Kind":"ITagHelper","Name":"vary-by-cookie","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCookie\">\r\n            <summary>\r\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByCookie"}},{"Kind":"ITagHelper","Name":"vary-by-user","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByUser\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\r\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByUser"}},{"Kind":"ITagHelper","Name":"vary-by-culture","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.VaryByCulture\">\r\n            <summary>\r\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\r\n            <para>\r\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\r\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\r\n            </para>\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"VaryByCulture"}},{"Kind":"ITagHelper","Name":"expires-on","TypeName":"System.DateTimeOffset?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresOn\">\r\n            <summary>\r\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ExpiresOn"}},{"Kind":"ITagHelper","Name":"expires-after","TypeName":"System.TimeSpan?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresAfter\">\r\n            <summary>\r\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ExpiresAfter"}},{"Kind":"ITagHelper","Name":"expires-sliding","TypeName":"System.TimeSpan?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.ExpiresSliding\">\r\n            <summary>\r\n            Gets or sets the duration from last access that the cache entry should be evicted.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ExpiresSliding"}},{"Kind":"ITagHelper","Name":"enabled","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelperBase.Enabled\">\r\n            <summary>\r\n            Gets or sets the value which determines if the tag helper is enabled or not.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Enabled"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper","Common.TypeNameIdentifier":"DistributedCacheTagHelper"}},{"HashCode":1995842910,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;environment&gt; elements that conditionally renders\r\n            content based on the current value of <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            If the environment is not listed in the specified <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\" />,\r\n            or if it is in <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" />, the content will not be rendered.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"environment"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"names","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content should be rendered.\r\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Names"}},{"Kind":"ITagHelper","Name":"include","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content should be rendered.\r\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Include"}},{"Kind":"ITagHelper","Name":"exclude","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\">\r\n            <summary>\r\n            A comma separated list of environment names in which the content will not be rendered.\r\n            </summary>\r\n            <remarks>\r\n            The specified environment names are compared case insensitively to the current value of\r\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Exclude"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper","Common.TypeNameIdentifier":"EnvironmentTagHelper"}},{"HashCode":1113929238,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;button&gt; elements and &lt;input&gt; elements with\r\n            their <c>type</c> attribute set to <c>image</c> or <c>submit</c>.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"button","Attributes":[{"Name":"asp-action"}]},{"TagName":"button","Attributes":[{"Name":"asp-controller"}]},{"TagName":"button","Attributes":[{"Name":"asp-area"}]},{"TagName":"button","Attributes":[{"Name":"asp-page"}]},{"TagName":"button","Attributes":[{"Name":"asp-page-handler"}]},{"TagName":"button","Attributes":[{"Name":"asp-fragment"}]},{"TagName":"button","Attributes":[{"Name":"asp-route"}]},{"TagName":"button","Attributes":[{"Name":"asp-all-route-data"}]},{"TagName":"button","Attributes":[{"Name":"asp-route-","NameComparison":1}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-action"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-controller"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-area"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-page"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-page-handler"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-fragment"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-route"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-all-route-data"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-route-","NameComparison":1}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-action"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-controller"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-area"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-page"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-page-handler"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-fragment"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-route"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-all-route-data"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-route-","NameComparison":1}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Fragment\">\r\n            <summary>\r\n            Gets or sets the URL fragment.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper","Common.TypeNameIdentifier":"FormActionTagHelper"}},{"HashCode":389843017,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;form&gt; elements.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"form"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\">\r\n            <summary>\r\n            The name of the action method.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\">\r\n            <summary>\r\n            The name of the controller.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Area\">\r\n            <summary>\r\n            The name of the area.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Page\">\r\n            <summary>\r\n            The name of the page.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.PageHandler\">\r\n            <summary>\r\n            The name of the page handler.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-antiforgery","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Antiforgery\">\r\n            <summary>\r\n            Whether the antiforgery token should be generated.\r\n            </summary>\r\n            <value>Defaults to <c>false</c> if user provides an <c>action</c> attribute\r\n            or if the <c>method</c> is <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get\" />; <c>true</c> otherwise.</value>\r\n        </member>","Metadata":{"Common.PropertyName":"Antiforgery"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Fragment\">\r\n            <summary>\r\n            Gets or sets the URL fragment.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Route\">\r\n            <summary>\r\n            Name of the route.\r\n            </summary>\r\n            <remarks>\r\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\" /> is non-<c>null</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.RouteValues\">\r\n            <summary>\r\n            Additional parameters for the route.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper","Common.TypeNameIdentifier":"FormTagHelper"}},{"HashCode":-281794304,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;img&gt; elements that supports file versioning.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'src' attribute.\r\n            </remarks>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"asp-append-version"},{"Name":"src"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"src","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.Src\">\r\n            <summary>\r\n            Source of the image.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Src"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to the src urls.\r\n            </summary>\r\n            <remarks>\r\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"AppendVersion"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper","Common.TypeNameIdentifier":"ImageTagHelper"}},{"HashCode":1322189092,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;input&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"asp-format","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\">\r\n            <summary>\r\n            The format string (see https://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to format the\r\n            <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> result. Sets the generated \"value\" attribute to that formatted string.\r\n            </summary>\r\n            <remarks>\r\n            Not used if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is\r\n            <c>checkbox</c>, <c>password</c>, or <c>radio</c>. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is used when calling\r\n            <see cref=\"M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)\" />.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"ITagHelper","Name":"type","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\">\r\n            <summary>\r\n            The type of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine the <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator\" />\r\n            helper to call and the default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> value. A default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is not calculated\r\n            if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is <c>checkbox</c>,\r\n            <c>hidden</c>, <c>password</c>, or <c>radio</c>.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"InputTypeName"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Value\">\r\n            <summary>\r\n            The value of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine the generated \"checked\" attribute\r\n            if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" /> is \"radio\". Must not be <c>null</c> in that case.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper","Common.TypeNameIdentifier":"InputTagHelper"}},{"HashCode":1530364764,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"label","Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"For"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper","Common.TypeNameIdentifier":"LabelTagHelper"}},{"HashCode":1278061783,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;link&gt; elements that supports fallback href paths.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'href' attribute.\r\n            </remarks>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-href-include"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-href-exclude"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href-include"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href-exclude"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-class"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-property"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-value"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-append-version"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"href","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.Href\">\r\n            <summary>\r\n            Address of the linked resource.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Href"}},{"Kind":"ITagHelper","Name":"asp-href-include","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to load.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"HrefInclude"}},{"Kind":"ITagHelper","Name":"asp-href-exclude","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"HrefExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-href","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\">\r\n            <summary>\r\n            The URL of a CSS stylesheet to fallback to in the case the primary one fails.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackHref"}},{"Kind":"ITagHelper","Name":"asp-suppress-fallback-integrity","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.SuppressFallbackIntegrity\">\r\n            <summary>\r\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"SuppressFallbackIntegrity"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to the href urls.\r\n            </summary>\r\n            <remarks>\r\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"AppendVersion"}},{"Kind":"ITagHelper","Name":"asp-fallback-href-include","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary\r\n            one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackHrefInclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-href-exclude","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in\r\n            the case the primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackHrefExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-class","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\">\r\n            <summary>\r\n            The class name defined in the stylesheet to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackTestClass"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-property","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\">\r\n            <summary>\r\n            The CSS property name to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackTestProperty"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\">\r\n            <summary>\r\n            The CSS property value to use for the fallback test.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" />,\r\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackTestValue"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper","Common.TypeNameIdentifier":"LinkTagHelper"}},{"HashCode":-1638577815,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;option&gt; elements.\r\n            </summary>\r\n            <remarks>\r\n            This <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> works in conjunction with <see cref=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\" />. It reads elements\r\n            content but does not modify that content. The only modification it makes is to add a <c>selected</c> attribute\r\n            in some cases.\r\n            </remarks>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"option"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"value","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper.Value\">\r\n            <summary>\r\n            Specifies a value for the &lt;option&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper","Common.TypeNameIdentifier":"OptionTagHelper"}},{"HashCode":301813300,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper\">\r\n            <summary>\r\n            Renders a partial view.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"partial","TagStructure":2,"Attributes":[{"Name":"name"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\">\r\n            <summary>\r\n            The name or path of the partial view that is rendered to the response.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"model","TypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\">\r\n            <summary>\r\n            The model to pass into the partial view. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"ITagHelper","Name":"optional","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Optional\">\r\n            <summary>\r\n            When optional, executing the tag helper will no-op if the view cannot be located.\r\n            Otherwise will throw stating the view could not be found.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Optional"}},{"Kind":"ITagHelper","Name":"fallback-name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.FallbackName\">\r\n            <summary>\r\n            View to lookup if the view specified by <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\" /> cannot be located.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackName"}},{"Kind":"ITagHelper","Name":"view-data","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary","IndexerNamePrefix":"view-data-","IndexerTypeName":"System.Object","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.ViewData\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" /> to pass into the partial view.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"ViewData"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper","Common.TypeNameIdentifier":"PartialTagHelper"}},{"HashCode":-2102000158,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper\">\r\n            <summary>\r\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that saves the state of Razor components rendered on the page up to that point.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"persist-component-state","TagStructure":2}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"persist-mode","TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\">\r\n            <summary>\r\n            Gets or sets the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\" /> for the state to persist.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"PersistenceMode"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper","Common.TypeNameIdentifier":"PersistComponentStateTagHelper"}},{"HashCode":1919440116,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;script&gt; elements that supports fallback src paths.\r\n            </summary>\r\n            <remarks>\r\n            The tag helper won't process for cases with just the 'src' attribute.\r\n            </remarks>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"script","Attributes":[{"Name":"asp-src-include"}]},{"TagName":"script","Attributes":[{"Name":"asp-src-exclude"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src-include"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src-exclude"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-test"}]},{"TagName":"script","Attributes":[{"Name":"asp-append-version"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"src","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.Src\">\r\n            <summary>\r\n            Address of the external script to use.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Src"}},{"Kind":"ITagHelper","Name":"asp-src-include","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to load.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"SrcInclude"}},{"Kind":"ITagHelper","Name":"asp-src-exclude","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"SrcExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-src","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\">\r\n            <summary>\r\n            The URL of a Script tag to fallback to in the case the primary one fails.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackSrc"}},{"Kind":"ITagHelper","Name":"asp-suppress-fallback-integrity","TypeName":"System.Boolean","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SuppressFallbackIntegrity\">\r\n            <summary>\r\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\" /> value.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"SuppressFallbackIntegrity"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean?","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.AppendVersion\">\r\n            <summary>\r\n            Value indicating if file version should be appended to src urls.\r\n            </summary>\r\n            <remarks>\r\n            A query string \"v\" with the encoded content of the file is added.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"AppendVersion"}},{"Kind":"ITagHelper","Name":"asp-fallback-src-include","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the\r\n            primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackSrcInclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-src-exclude","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcExclude\">\r\n            <summary>\r\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in\r\n            the case the primary one fails.\r\n            The glob patterns are assessed relative to the application's 'webroot' setting.\r\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\" />.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackSrcExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-test","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackTestExpression\">\r\n            <summary>\r\n            The script method defined in the primary script to use for the fallback test.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"FallbackTestExpression"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper","Common.TypeNameIdentifier":"ScriptTagHelper"}},{"HashCode":-336972530,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;select&gt; elements with <c>asp-for</c> and/or\r\n            <c>asp-items</c> attribute(s).\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"asp-for"}]},{"TagName":"select","Attributes":[{"Name":"asp-items"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"asp-items","TypeName":"System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Items\">\r\n            <summary>\r\n            A collection of <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem\" /> objects used to populate the &lt;select&gt; element with\r\n            &lt;optgroup&gt; and &lt;option&gt; elements.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper","Common.TypeNameIdentifier":"SelectTagHelper"}},{"HashCode":-1473474677,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;textarea&gt; elements with an <c>asp-for</c> attribute.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\">\r\n            <summary>\r\n            An expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.Name\">\r\n            <summary>\r\n            The name of the &lt;input&gt; element.\r\n            </summary>\r\n            <remarks>\r\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\" /> is\r\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\r\n            </remarks>\r\n        </member>","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper","Common.TypeNameIdentifier":"TextAreaTagHelper"}},{"HashCode":-1713889251,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-for</c>\r\n            attribute.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"span","Attributes":[{"Name":"asp-validation-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-validation-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper.For\">\r\n            <summary>\r\n            Gets an expression to be evaluated against the current model.\r\n            </summary>\r\n        </member>","Metadata":{"Common.PropertyName":"For"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper","Common.TypeNameIdentifier":"ValidationMessageTagHelper"}},{"HashCode":890700439,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"<member name=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper\">\r\n            <summary>\r\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-summary</c>\r\n            attribute.\r\n            </summary>\r\n        </member>","CaseSensitive":false,"TagMatchingRules":[{"TagName":"div","Attributes":[{"Name":"asp-validation-summary"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-validation-summary","TypeName":"Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary","IsEnum":true,"Documentation":"<member name=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\">\r\n            <summary>\r\n            If <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All\" /> or <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly\" />, appends a validation\r\n            summary. Otherwise (<see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.None\" />, the default), this tag helper does nothing.\r\n            </summary>\r\n            <exception cref=\"T:System.ArgumentException\">\r\n            Thrown if setter is called with an undefined <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\" /> value e.g.\r\n            <c>(ValidationSummary)23</c>.\r\n            </exception>\r\n        </member>","Metadata":{"Common.PropertyName":"ValidationSummary"}}],"Metadata":{"Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper","Common.TypeNameIdentifier":"ValidationSummaryTagHelper"}},{"HashCode":68128766,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@bind-","NameComparison":1,"Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-...","TypeName":"System.Collections.Generic.Dictionary<string, object>","IndexerNamePrefix":"@bind-","IndexerTypeName":"System.Object","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.","Metadata":{"Common.PropertyName":"Event"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.Fallback":"True","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.TypeName":"Microsoft.AspNetCore.Components.Bind","Common.ClassifyAttributesOnly":"True","Common.TypeNameIdentifier":"Bind"}},{"HashCode":-933749138,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"False","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1104133056,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"False","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-337462685,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"checkbox","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"checkbox","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_checked"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-checked","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"False","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"checked","Components.Bind.TypeAttribute":"checkbox","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-251536517,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"text","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"text","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"False","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"text","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1104233308,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"number","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1732425482,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"number","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1900373147,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"yyyy-MM-dd","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"date","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-2098739122,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"yyyy-MM-dd","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"date","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-1274234482,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"datetime-local","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-483774086,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"datetime-local","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":614903700,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"yyyy-MM","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"month","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":2019391292,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"yyyy-MM","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"month","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1620150668,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"HH:mm:ss","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"time","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-998986924,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":"HH:mm:ss","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.TypeAttribute":"time","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1545263755,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"select","Attributes":[{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"False","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-159836328,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"textarea","Attributes":[{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Components.Bind.ChangeAttribute":"onchange","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.IsInvariantCulture":"False","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Components.Bind.Format":null,"Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-430203784,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputCheckbox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":-1100620278,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":556281347,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputDate","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputDate"}},{"HashCode":1883545775,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputDate"}},{"HashCode":-138454584,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputNumber","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputNumber"}},{"HashCode":1254467101,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputNumber"}},{"HashCode":-1428121970,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputRadioGroup","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":1230901276,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":1067270308,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":-1105711556,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":1302743319,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputText","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputText"}},{"HashCode":-1955468612,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputText"}},{"HashCode":1573018933,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputTextArea","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":807720999,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Components.Bind.AlternativeNotation":"True","Common.PropertyName":"Get"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Components.NameMatch":"Components.FullyQualifiedNameMatch","Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Components.Bind.ValueAttribute":"Value","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":1925038139,"Kind":"Components.Ref","Name":"Ref","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Populates the specified field or property with a reference to the element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ref","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Ref","Name":"@ref","TypeName":"System.Object","Documentation":"Populates the specified field or property with a reference to the element or component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Ref"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Ref","Common.TypeName":"Microsoft.AspNetCore.Components.Ref","Common.ClassifyAttributesOnly":"True"}},{"HashCode":549539769,"Kind":"Components.Key","Name":"Key","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@key","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Key","Name":"@key","TypeName":"System.Object","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Key"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Key","Common.TypeName":"Microsoft.AspNetCore.Components.Key","Common.ClassifyAttributesOnly":"True"}}],"CSharpLanguageVersion":1000},"RootNamespace":"Website_Du_lich","Documents":[{"FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\Pages\\_Layout.cshtml","TargetPath":"Pages\\_Layout.cshtml","FileKind":"mvc"},{"FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\App.razor","TargetPath":"App.razor","FileKind":"component"},{"FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\Shared\\MainLayout.razor","TargetPath":"Shared\\MainLayout.razor","FileKind":"component"},{"FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\_Imports.razor","TargetPath":"_Imports.razor","FileKind":"componentImport"},{"FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\Shared\\NavMenu.razor","TargetPath":"Shared\\NavMenu.razor","FileKind":"component"},{"FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\Pages\\Error.cshtml","TargetPath":"Pages\\Error.cshtml","FileKind":"mvc"},{"FilePath":"C:\\Users\\Administrator\\Documents\\GitHub\\Web-Du-Lich-Blazor\\Website Du lich\\Website Du lich\\Pages\\_Host.cshtml","TargetPath":"Pages\\_Host.cshtml","FileKind":"mvc"}],"SerializationFormat":"0.3"}